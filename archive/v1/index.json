{
  "api/i2connect.accesslevel.html": {
    "href": "api/i2connect.accesslevel.html",
    "title": "AccessLevel type",
    "keywords": "Home > @i2analyze/i2connect > AccessLevel AccessLevel type The level of access that a user has to some data. Signature: export declare type AccessLevel = 'none' | 'update' | 'readOnly'; Introduced: API version 1.2"
  },
  "api/i2connect.asyncstate.html": {
    "href": "api/i2connect.asyncstate.html",
    "title": "asyncState() function",
    "keywords": "Home > @i2analyze/i2connect > asyncState asyncState() function The @asyncState decorator, which configures a service method parameter to receive an IAsyncState object. Signature: export declare function asyncState(): ParameterDecorator; Returns: ParameterDecorator Introduced: API version 1.0 Remarks The IAsyncState interface provides access to additional communication between the connector and the client. For example, the connector can call IAsyncState.isCanceled to determined whether the user has canceled the query. The connector can also set substatuses to provide detailed feedback to the user about a long-running query."
  },
  "api/i2connect.authenticationfield.html": {
    "href": "api/i2connect.authenticationfield.html",
    "title": "authenticationField() function",
    "keywords": "Home > @i2analyze/i2connect > authenticationField authenticationField() function The @authenticationField decorator, which configures an authenticator method parameter to receive the value from a field on an authentication dialog. Signature: export declare function authenticationField(config: connectors.IAuthenticationField): ParameterDecorator; Introduced: API version 1.0 Parameters Parameter Type Description config connectors.IAuthenticationField Settings that determine the label and the content type of the authentication field. Returns: ParameterDecorator Example usernameAndPasswordAuthenticator( @authenticationField({ label: \"User name\", type: 'text', }) username: string, ...)"
  },
  "api/i2connect.authenticationrequirederror._constructor_.html": {
    "href": "api/i2connect.authenticationrequirederror._constructor_.html",
    "title": "AuthenticationRequiredError.(constructor)",
    "keywords": "Home > @i2analyze/i2connect > AuthenticationRequiredError > (constructor) AuthenticationRequiredError.(constructor) Constructs a new instance of the AuthenticationRequiredError class. Signature: constructor(data?: Omit<IDetailedErrorData, 'type'>); Introduced: API version 1.0 Parameters Parameter Type Description data Omit< IDetailedErrorData <!-- --> , 'type'> Detailed information about the authentication requirement."
  },
  "api/i2connect.authenticationrequirederror.html": {
    "href": "api/i2connect.authenticationrequirederror.html",
    "title": "AuthenticationRequiredError class",
    "keywords": "Home > @i2analyze/i2connect > AuthenticationRequiredError AuthenticationRequiredError class An error indicating that authentication is required. Signature: export declare class AuthenticationRequiredError extends DetailedError Extends: DetailedError Introduced: API version 1.0 Remarks Error objects can optionally be constructed with detailed error information. Constructors Constructor Modifiers Description (constructor)(data) Constructs a new instance of the AuthenticationRequiredError class."
  },
  "api/i2connect.authenticationtoken.html": {
    "href": "api/i2connect.authenticationtoken.html",
    "title": "authenticationToken() function",
    "keywords": "Home > @i2analyze/i2connect > authenticationToken authenticationToken() function The @authenticationToken decorator, which configures a service method parameter to receive the value of the token associated with an authenticator. Signature: export declare function authenticationToken(authConfigId?: string): ParameterDecorator; Introduced: API version 1.0 Parameters Parameter Type Description authConfigId string The identifier of the authenticator that the token is associated with, which can be omitted if the connector has only one authenticator. Returns: ParameterDecorator Example async findIPAddresses( @authenticationToken('usernameAndPasswordConfigId') token: string, ...)"
  },
  "api/i2connect.authenticator.html": {
    "href": "api/i2connect.authenticator.html",
    "title": "authenticator() function",
    "keywords": "Home > @i2analyze/i2connect > authenticator authenticator() function The @authenticator decorator, which configures a method on the connector class to perform user authentication. Signature: export declare function authenticator(config: connectors.IAuthenticatorConfig): MethodDecorator; Introduced: API version 1.0 Parameters Parameter Type Description config connectors.IAuthenticatorConfig Settings that provide an identifier and a description for the authenticator. Returns: MethodDecorator Example @authenticator({ id: 'usernameAndPasswordConfigId', description: 'Enter your user name and password' }) usernameAndPasswordAuthConfig (...)"
  },
  "api/i2connect.condition.html": {
    "href": "api/i2connect.condition.html",
    "title": "condition() function",
    "keywords": "Home > @i2analyze/i2connect > condition condition() function The @condition decorator, which configures a service method parameter to receive a value that a user provides, subject to a condition that you specify. Signature: export declare function condition(condition: services.ICondition): ParameterDecorator; Introduced: API version 1.0 Parameters Parameter Type Description condition services.ICondition Settings that determine what users see, and what constitutes a valid value. Returns: ParameterDecorator Example The @condition decorator in the following service method declaration results in users seeing an input field that guarantees the value of the octet parameter to be in the configured range. async findIPAddresses( @condition({ label: \"IP address octet number\", description: \"A mandatory integer between 0 and 255\", logicalType: LogicalType.INTEGER, minValue: 0, maxValue: 255, mandatory: true }) octet: number, ...)"
  },
  "api/i2connect.connector.html": {
    "href": "api/i2connect.connector.html",
    "title": "connector() function",
    "keywords": "Home > @i2analyze/i2connect > connector connector() function The @connector decorator, which configures a class to be a connector for the i2 Connect server. Signature: export declare function connector(config?: connectors.IConnectorConfig): ClassDecorator; Introduced: API version 1.0 Parameters Parameter Type Description config connectors.IConnectorConfig Settings that determine the name and description of the connector that users see, and some aspects of its behavior. Returns: ClassDecorator Example @connector({ name: \"Sample Connector\", description: \"A sample connector\" }) export class SampleConnector {...}"
  },
  "api/i2connect.connectors.authenticationfieldtype.html": {
    "href": "api/i2connect.connectors.authenticationfieldtype.html",
    "title": "connectors.AuthenticationFieldType type",
    "keywords": "Home > @i2analyze/i2connect > connectors > AuthenticationFieldType connectors.AuthenticationFieldType type The type of an authentication field, which can be 'text' or 'password' <!-- --> . Signature: type AuthenticationFieldType = 'text' | 'password'; Introduced: API version 1.0"
  },
  "api/i2connect.connectors.html": {
    "href": "api/i2connect.connectors.html",
    "title": "connectors namespace",
    "keywords": "Home > @i2analyze/i2connect > connectors connectors namespace The members of the connectors namespace allow you to configure the connectors that you create for the i2 Connect server. Signature: export declare namespace connectors Introduced: API version 1.0 Interfaces Interface Description IAuthenticationField A field on an authentication dialog. IAuthenticatorConfig A collection of properties that provide configuration for an authenticator. IConnectorConfig A collection of properties that provide the name and configuration for a connector. IConnectorSchema A connector schema. ISchemas A container for the schemas that a connector uses. Type Aliases Type Alias Description AuthenticationFieldType The type of an authentication field, which can be 'text' or 'password' ."
  },
  "api/i2connect.connectors.iauthenticationfield.html": {
    "href": "api/i2connect.connectors.iauthenticationfield.html",
    "title": "connectors.IAuthenticationField interface",
    "keywords": "Home > @i2analyze/i2connect > connectors > IAuthenticationField connectors.IAuthenticationField interface A field on an authentication dialog. Signature: interface IAuthenticationField Introduced: API version 1.0 Properties Property Type Description label string Gets the label of the field. type AuthenticationFieldType Gets the type of the field."
  },
  "api/i2connect.connectors.iauthenticationfield.label.html": {
    "href": "api/i2connect.connectors.iauthenticationfield.label.html",
    "title": "connectors.IAuthenticationField.label property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IAuthenticationField > label connectors.IAuthenticationField.label property Gets the label of the field. Signature: readonly label: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iauthenticationfield.type.html": {
    "href": "api/i2connect.connectors.iauthenticationfield.type.html",
    "title": "connectors.IAuthenticationField.type property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IAuthenticationField > type connectors.IAuthenticationField.type property Gets the type of the field. Signature: readonly type: AuthenticationFieldType; Returns: AuthenticationFieldType Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iauthenticatorconfig.description.html": {
    "href": "api/i2connect.connectors.iauthenticatorconfig.description.html",
    "title": "connectors.IAuthenticatorConfig.description property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IAuthenticatorConfig > description connectors.IAuthenticatorConfig.description property Gets a description that the authenticator displays to tell users what to do in order to authenticate. Signature: readonly description: string; Returns: string Introduced: API version 1.0 Remarks The description string can contain simple markup that enables the inclusion of hyperlinks. Example A description that contains a hyperlink might look like this: Enter a user name and a password. In this example, the password must match the user name. For more information, [hyperlink]http://example.com/passwords click here[/hyperlink]."
  },
  "api/i2connect.connectors.iauthenticatorconfig.html": {
    "href": "api/i2connect.connectors.iauthenticatorconfig.html",
    "title": "connectors.IAuthenticatorConfig interface",
    "keywords": "Home > @i2analyze/i2connect > connectors > IAuthenticatorConfig connectors.IAuthenticatorConfig interface A collection of properties that provide configuration for an authenticator. Signature: interface IAuthenticatorConfig Introduced: API version 1.0 Properties Property Type Description description string Gets a description that the authenticator displays to tell users what to do in order to authenticate. id? string (Optional) Gets the identifier of the authenticator, which can be referenced by services."
  },
  "api/i2connect.connectors.iauthenticatorconfig.id.html": {
    "href": "api/i2connect.connectors.iauthenticatorconfig.id.html",
    "title": "connectors.IAuthenticatorConfig.id property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IAuthenticatorConfig > id connectors.IAuthenticatorConfig.id property Gets the identifier of the authenticator, which can be referenced by services. Signature: readonly id?: string; Returns: string Introduced: API version 1.0 Remarks The identifier is required only when a connector defines more than one authenticator."
  },
  "api/i2connect.connectors.iconnectorconfig.haspersistentresultids.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.haspersistentresultids.html",
    "title": "connectors.IConnectorConfig.hasPersistentResultIds property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig > hasPersistentResultIds connectors.IConnectorConfig.hasPersistentResultIds property Indicates whether the identifiers of result records are persistent from one query to the next. Signature: readonly hasPersistentResultIds?: boolean; Returns: boolean Default value: true Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorconfig.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.html",
    "title": "connectors.IConnectorConfig interface",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig connectors.IConnectorConfig interface A collection of properties that provide the name and configuration for a connector. Signature: interface IConnectorConfig Introduced: API version 1.0 Properties Property Type Description hasPersistentResultIds? boolean (Optional) Indicates whether the identifiers of result records are persistent from one query to the next. linkDirection? data.LinkDirection (Optional) Gets the link direction that applies to all data from the connector, unless overridden by a service. schemas? ISchemas (Optional) Gets the schemas that define the types of records that appear in results from the connector. timeZoneId? string (Optional) Gets the identifier of the time zone that applies to all data from the connector, unless overridden by a service."
  },
  "api/i2connect.connectors.iconnectorconfig.linkdirection.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.linkdirection.html",
    "title": "connectors.IConnectorConfig.linkDirection property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig > linkDirection connectors.IConnectorConfig.linkDirection property Gets the link direction that applies to all data from the connector, unless overridden by a service. Signature: readonly linkDirection?: data.LinkDirection; Returns: data.LinkDirection Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorconfig.schemas.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.schemas.html",
    "title": "connectors.IConnectorConfig.schemas property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig > schemas connectors.IConnectorConfig.schemas property Gets the schemas that define the types of records that appear in results from the connector. Signature: readonly schemas?: ISchemas; Returns: ISchemas Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorconfig.timezoneid.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.timezoneid.html",
    "title": "connectors.IConnectorConfig.timeZoneId property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig > timeZoneId connectors.IConnectorConfig.timeZoneId property Gets the identifier of the time zone that applies to all data from the connector, unless overridden by a service. Signature: readonly timeZoneId?: string; Returns: string Default value: \"Europe/London\" Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorschema.chartingschemepath.html": {
    "href": "api/i2connect.connectors.iconnectorschema.chartingschemepath.html",
    "title": "connectors.IConnectorSchema.chartingSchemePath property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorSchema > chartingSchemePath connectors.IConnectorSchema.chartingSchemePath property Gets the full path to the charting scheme file. Signature: readonly chartingSchemePath?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorschema.html": {
    "href": "api/i2connect.connectors.iconnectorschema.html",
    "title": "connectors.IConnectorSchema interface",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorSchema connectors.IConnectorSchema interface A connector schema. Signature: interface IConnectorSchema extends schema.ISchema Extends: schema.ISchema Introduced: API version 1.0 Properties Property Type Description chartingSchemePath? string (Optional) Gets the full path to the charting scheme file. entityTypes Record<string, schema.IEntityType <!-- --> > Gets the entity types that the schema defines. (Inherited from ISchema <!-- --> ) linkTypes Record<string, schema.ILinkType <!-- --> > Gets the link types that the schema defines. (Inherited from ISchema <!-- --> ) schemaPath string Gets the full path to the schema file. schemaShortName? string (Optional) Gets the short name for the schema, which the i2 Analyze topology can override."
  },
  "api/i2connect.connectors.iconnectorschema.schemapath.html": {
    "href": "api/i2connect.connectors.iconnectorschema.schemapath.html",
    "title": "connectors.IConnectorSchema.schemaPath property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorSchema > schemaPath connectors.IConnectorSchema.schemaPath property Gets the full path to the schema file. Signature: readonly schemaPath: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorschema.schemashortname.html": {
    "href": "api/i2connect.connectors.iconnectorschema.schemashortname.html",
    "title": "connectors.IConnectorSchema.schemaShortName property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorSchema > schemaShortName connectors.IConnectorSchema.schemaShortName property Gets the short name for the schema, which the i2 Analyze topology can override. Signature: readonly schemaShortName?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.connectors.ischemas.connector.html": {
    "href": "api/i2connect.connectors.ischemas.connector.html",
    "title": "connectors.ISchemas.connector property",
    "keywords": "Home > @i2analyze/i2connect > connectors > ISchemas > connector connectors.ISchemas.connector property Gets the connector schema. Signature: readonly connector?: IConnectorSchema; Returns: IConnectorSchema Introduced: API version 1.0"
  },
  "api/i2connect.connectors.ischemas.gateway.html": {
    "href": "api/i2connect.connectors.ischemas.gateway.html",
    "title": "connectors.ISchemas.gateway property",
    "keywords": "Home > @i2analyze/i2connect > connectors > ISchemas > gateway connectors.ISchemas.gateway property Gets the gateway schema. Signature: readonly gateway?: schema.ISchema; Returns: schema.ISchema Introduced: API version 1.0"
  },
  "api/i2connect.connectors.ischemas.html": {
    "href": "api/i2connect.connectors.ischemas.html",
    "title": "connectors.ISchemas interface",
    "keywords": "Home > @i2analyze/i2connect > connectors > ISchemas connectors.ISchemas interface A container for the schemas that a connector uses. Signature: interface ISchemas Introduced: API version 1.0 Properties Property Type Description connector? IConnectorSchema (Optional) Gets the connector schema. gateway? schema.ISchema (Optional) Gets the gateway schema. infoStore? schema.ISchema (Optional) Gets the Information Store schema."
  },
  "api/i2connect.connectors.ischemas.infostore.html": {
    "href": "api/i2connect.connectors.ischemas.infostore.html",
    "title": "connectors.ISchemas.infoStore property",
    "keywords": "Home > @i2analyze/i2connect > connectors > ISchemas > infoStore connectors.ISchemas.infoStore property Gets the Information Store schema. Signature: readonly infoStore?: schema.ISchema; Returns: schema.ISchema Introduced: API version 1.0"
  },
  "api/i2connect.createlogger.html": {
    "href": "api/i2connect.createlogger.html",
    "title": "createLogger() function",
    "keywords": "Home > @i2analyze/i2connect > createLogger createLogger() function Creates or retrieves a logger object with the specified identifier. Signature: export declare function createLogger(id?: string): ILogger; Introduced: API version 1.0 Parameters Parameter Type Description id string The identifier of the logger, which is used to find configuration settings, and also to name any resulting log file. Returns: ILogger The specified logger object, or the default logger for the i2 Connect server if no identifier was provided."
  },
  "api/i2connect.data.datetime.html": {
    "href": "api/i2connect.data.datetime.html",
    "title": "data.DateTime type",
    "keywords": "Home > @i2analyze/i2connect > data > DateTime data.DateTime type A date and time. Signature: type DateTime = IZonedDateTime | ISO8601LocalDateTime; References: IZonedDateTime <!-- --> , ISO8601LocalDateTime Introduced: API version 1.2 Remarks Date and time values can be specified in ISO 8601 format (in which case the default time zone is assumed) or as an data.IZonedDateTime <!-- --> ."
  },
  "api/i2connect.data.decimalstring.html": {
    "href": "api/i2connect.data.decimalstring.html",
    "title": "data.DecimalString type",
    "keywords": "Home > @i2analyze/i2connect > data > DecimalString data.DecimalString type A decimal in string format. Signature: type DecimalString = string; Introduced: API version 1.2 Remarks A valid transport string is a number with up to 18 digits before the decimal separator, and up to four digits after the decimal separator. A leading minus sign is valid, but exponent (E) notation is not."
  },
  "api/i2connect.data.html": {
    "href": "api/i2connect.data.html",
    "title": "data namespace",
    "keywords": "Home > @i2analyze/i2connect > data data namespace The members of the data namespace provide access to the property values of records that an i2 Connect service operates on. Signature: export declare namespace data Introduced: API version 1.0 Interfaces Interface Description IGeoJsonFeature A geospatial feature, containing a geometry object and its associated properties, as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2). IGeoJsonFeatureCollection An area on a map, which comprises one or more geospatial features. IGeoJsonMultiPolygon A geospatial \"multi-polygon\", as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7). IGeoJsonPoint A position on a map. IGeoJsonPolygon A geospatial polygon, as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6). IZonedDateTime A date and time with an accompanying time zone. Type Aliases Type Alias Description DateTime A date and time. DecimalString A decimal in string format. IGeoJsonGeometry A geospatial geometry object, as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3). IGeoJsonPosition A pair of geospatial coordinates, as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1). ISO8601Date A date in ISO 8601 format. For example, 1976-10-23 . ISO8601LocalDateTime A local date and time in ISO 8601 format. For example, 1976-10-23T11:22:33.123 . ISO8601Time A time in ISO 8601 format. For example, 11:22:33.123 . LinkDirection The direction of a link. LogicalType A logical type for the value of a property of a record. PropertyValue A value for a property of a record. PropertyValueType The permitted types (for example, string , number , or boolean ) for the value of a property that has the specified property type."
  },
  "api/i2connect.data.igeojsonfeature.geometry.html": {
    "href": "api/i2connect.data.igeojsonfeature.geometry.html",
    "title": "data.IGeoJsonFeature.geometry property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeature > geometry data.IGeoJsonFeature.geometry property Gets the feature's geometry object. Signature: geometry: IGeoJsonGeometry; Returns: IGeoJsonGeometry Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonfeature.html": {
    "href": "api/i2connect.data.igeojsonfeature.html",
    "title": "data.IGeoJsonFeature interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeature data.IGeoJsonFeature interface A geospatial feature, containing a geometry object and its associated properties, as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2). Signature: interface IGeoJsonFeature<P = Record<string, unknown> | null> Introduced: API version 1.2 Type Parameters Parameter Type Description P any (default: Record<string, unknown> | null) The type of the associated properties. Properties Property Type Description geometry IGeoJsonGeometry Gets the feature's geometry object. properties P Gets the properties associated with the geometry object. type 'Feature' Gets the type of the object, which is always 'Feature'."
  },
  "api/i2connect.data.igeojsonfeature.properties.html": {
    "href": "api/i2connect.data.igeojsonfeature.properties.html",
    "title": "data.IGeoJsonFeature.properties property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeature > properties data.IGeoJsonFeature.properties property Gets the properties associated with the geometry object. Signature: properties: P; Returns: P Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonfeature.type.html": {
    "href": "api/i2connect.data.igeojsonfeature.type.html",
    "title": "data.IGeoJsonFeature.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeature > type data.IGeoJsonFeature.type property Gets the type of the object, which is always 'Feature'. Signature: type: 'Feature'; Returns: 'Feature' Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonfeaturecollection.features.html": {
    "href": "api/i2connect.data.igeojsonfeaturecollection.features.html",
    "title": "data.IGeoJsonFeatureCollection.features property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeatureCollection > features data.IGeoJsonFeatureCollection.features property Gets the features that the area comprises. Signature: features: IGeoJsonFeature[]; Returns: IGeoJsonFeature [] Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonfeaturecollection.html": {
    "href": "api/i2connect.data.igeojsonfeaturecollection.html",
    "title": "data.IGeoJsonFeatureCollection interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeatureCollection data.IGeoJsonFeatureCollection interface An area on a map, which comprises one or more geospatial features. Signature: interface IGeoJsonFeatureCollection Introduced: API version 1.2 Properties Property Type Description features IGeoJsonFeature <!-- --> [] Gets the features that the area comprises. type 'FeatureCollection' Gets the type of the area, which is always 'FeatureCollection'."
  },
  "api/i2connect.data.igeojsonfeaturecollection.type.html": {
    "href": "api/i2connect.data.igeojsonfeaturecollection.type.html",
    "title": "data.IGeoJsonFeatureCollection.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeatureCollection > type data.IGeoJsonFeatureCollection.type property Gets the type of the area, which is always 'FeatureCollection'. Signature: type: 'FeatureCollection'; Returns: 'FeatureCollection' Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsongeometry.html": {
    "href": "api/i2connect.data.igeojsongeometry.html",
    "title": "data.IGeoJsonGeometry type",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonGeometry data.IGeoJsonGeometry type A geospatial geometry object, as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3). Signature: type IGeoJsonGeometry = IGeoJsonPolygon | IGeoJsonMultiPolygon; References: IGeoJsonPolygon <!-- --> , IGeoJsonMultiPolygon Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonmultipolygon.coordinates.html": {
    "href": "api/i2connect.data.igeojsonmultipolygon.coordinates.html",
    "title": "data.IGeoJsonMultiPolygon.coordinates property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonMultiPolygon > coordinates data.IGeoJsonMultiPolygon.coordinates property Gets the geospatial coordinates of the polygons' vertices. Signature: coordinates: IGeoJsonPosition[][][]; Returns: IGeoJsonPosition [][][] Introduced: API version 1.2 Remarks The coordinates are an array of arrays of (longitude, latitude), where longitude is in degrees east and latitude is in degrees north."
  },
  "api/i2connect.data.igeojsonmultipolygon.html": {
    "href": "api/i2connect.data.igeojsonmultipolygon.html",
    "title": "data.IGeoJsonMultiPolygon interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonMultiPolygon data.IGeoJsonMultiPolygon interface A geospatial \"multi-polygon\", as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7). Signature: interface IGeoJsonMultiPolygon Introduced: API version 1.2 Properties Property Type Description coordinates IGeoJsonPosition <!-- --> [][][] Gets the geospatial coordinates of the polygons' vertices. type 'MultiPolygon' Gets the type of the object, which is always 'MultiPolygon' in this case."
  },
  "api/i2connect.data.igeojsonmultipolygon.type.html": {
    "href": "api/i2connect.data.igeojsonmultipolygon.type.html",
    "title": "data.IGeoJsonMultiPolygon.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonMultiPolygon > type data.IGeoJsonMultiPolygon.type property Gets the type of the object, which is always 'MultiPolygon' in this case. Signature: type: 'MultiPolygon'; Returns: 'MultiPolygon' Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonpoint.coordinates.html": {
    "href": "api/i2connect.data.igeojsonpoint.coordinates.html",
    "title": "data.IGeoJsonPoint.coordinates property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPoint > coordinates data.IGeoJsonPoint.coordinates property Gets the geospatial coordinates of the position. Signature: coordinates: IGeoJsonPosition; Returns: IGeoJsonPosition Introduced: API version 1.0 Remarks The coordinates are in the form (longitude, latitude), where longitude is in degrees east and latitude is in degrees north."
  },
  "api/i2connect.data.igeojsonpoint.html": {
    "href": "api/i2connect.data.igeojsonpoint.html",
    "title": "data.IGeoJsonPoint interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPoint data.IGeoJsonPoint interface A position on a map. Signature: interface IGeoJsonPoint Introduced: API version 1.0 Properties Property Type Description coordinates IGeoJsonPosition Gets the geospatial coordinates of the position. type 'Point' Gets the type of the position."
  },
  "api/i2connect.data.igeojsonpoint.type.html": {
    "href": "api/i2connect.data.igeojsonpoint.type.html",
    "title": "data.IGeoJsonPoint.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPoint > type data.IGeoJsonPoint.type property Gets the type of the position. Signature: type: 'Point'; Returns: 'Point' Introduced: API version 1.0"
  },
  "api/i2connect.data.igeojsonpolygon.coordinates.html": {
    "href": "api/i2connect.data.igeojsonpolygon.coordinates.html",
    "title": "data.IGeoJsonPolygon.coordinates property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPolygon > coordinates data.IGeoJsonPolygon.coordinates property Gets the geospatial coordinates of the polygon's vertices. Signature: coordinates: IGeoJsonPosition[][]; Returns: IGeoJsonPosition [][] Introduced: API version 1.2 Remarks The coordinates are an array of (longitude, latitude) pairs, where longitude is in degrees east and latitude is in degrees north."
  },
  "api/i2connect.data.igeojsonpolygon.html": {
    "href": "api/i2connect.data.igeojsonpolygon.html",
    "title": "data.IGeoJsonPolygon interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPolygon data.IGeoJsonPolygon interface A geospatial polygon, as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6). Signature: interface IGeoJsonPolygon Introduced: API version 1.2 Properties Property Type Description coordinates IGeoJsonPosition <!-- --> [][] Gets the geospatial coordinates of the polygon's vertices. type 'Polygon' Gets the type of the object, which is always 'Polygon' in this case."
  },
  "api/i2connect.data.igeojsonpolygon.type.html": {
    "href": "api/i2connect.data.igeojsonpolygon.type.html",
    "title": "data.IGeoJsonPolygon.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPolygon > type data.IGeoJsonPolygon.type property Gets the type of the object, which is always 'Polygon' in this case. Signature: type: 'Polygon'; Returns: 'Polygon' Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonposition.html": {
    "href": "api/i2connect.data.igeojsonposition.html",
    "title": "data.IGeoJsonPosition type",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPosition data.IGeoJsonPosition type A pair of geospatial coordinates, as described in [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1). Signature: type IGeoJsonPosition = [number, number]; Introduced: API version 1.2"
  },
  "api/i2connect.data.iso8601date.html": {
    "href": "api/i2connect.data.iso8601date.html",
    "title": "data.ISO8601Date type",
    "keywords": "Home > @i2analyze/i2connect > data > ISO8601Date data.ISO8601Date type A date in ISO 8601 format. For example, 1976-10-23 <!-- --> . Signature: type ISO8601Date = string; Introduced: API version 1.2"
  },
  "api/i2connect.data.iso8601localdatetime.html": {
    "href": "api/i2connect.data.iso8601localdatetime.html",
    "title": "data.ISO8601LocalDateTime type",
    "keywords": "Home > @i2analyze/i2connect > data > ISO8601LocalDateTime data.ISO8601LocalDateTime type A local date and time in ISO 8601 format. For example, 1976-10-23T11:22:33.123 <!-- --> . Signature: type ISO8601LocalDateTime = string; Introduced: API version 1.2"
  },
  "api/i2connect.data.iso8601time.html": {
    "href": "api/i2connect.data.iso8601time.html",
    "title": "data.ISO8601Time type",
    "keywords": "Home > @i2analyze/i2connect > data > ISO8601Time data.ISO8601Time type A time in ISO 8601 format. For example, 11:22:33.123 <!-- --> . Signature: type ISO8601Time = string; Introduced: API version 1.2"
  },
  "api/i2connect.data.izoneddatetime.html": {
    "href": "api/i2connect.data.izoneddatetime.html",
    "title": "data.IZonedDateTime interface",
    "keywords": "Home > @i2analyze/i2connect > data > IZonedDateTime data.IZonedDateTime interface A date and time with an accompanying time zone. Signature: interface IZonedDateTime Introduced: API version 1.0 Properties Property Type Description isDST boolean Indicates whether daylight saving time is in operation. localDateAndTime ISO8601LocalDateTime Gets the date and time as an ISO 8601 value. For example, 1976-10-23T13:30:00.409 . timeZoneId string Gets the identifier of the time zone."
  },
  "api/i2connect.data.izoneddatetime.isdst.html": {
    "href": "api/i2connect.data.izoneddatetime.isdst.html",
    "title": "data.IZonedDateTime.isDST property",
    "keywords": "Home > @i2analyze/i2connect > data > IZonedDateTime > isDST data.IZonedDateTime.isDST property Indicates whether daylight saving time is in operation. Signature: readonly isDST: boolean; Returns: boolean Introduced: API version 1.0"
  },
  "api/i2connect.data.izoneddatetime.localdateandtime.html": {
    "href": "api/i2connect.data.izoneddatetime.localdateandtime.html",
    "title": "data.IZonedDateTime.localDateAndTime property",
    "keywords": "Home > @i2analyze/i2connect > data > IZonedDateTime > localDateAndTime data.IZonedDateTime.localDateAndTime property Gets the date and time as an ISO 8601 value. For example, 1976-10-23T13:30:00.409 <!-- --> . Signature: readonly localDateAndTime: ISO8601LocalDateTime; Returns: ISO8601LocalDateTime Introduced: API version 1.0"
  },
  "api/i2connect.data.izoneddatetime.timezoneid.html": {
    "href": "api/i2connect.data.izoneddatetime.timezoneid.html",
    "title": "data.IZonedDateTime.timeZoneId property",
    "keywords": "Home > @i2analyze/i2connect > data > IZonedDateTime > timeZoneId data.IZonedDateTime.timeZoneId property Gets the identifier of the time zone. Signature: readonly timeZoneId: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.data.linkdirection.html": {
    "href": "api/i2connect.data.linkdirection.html",
    "title": "data.LinkDirection type",
    "keywords": "Home > @i2analyze/i2connect > data > LinkDirection data.LinkDirection type The direction of a link. Signature: type LinkDirection = 'none' | 'with' | 'against' | 'both'; Introduced: API version 1.0"
  },
  "api/i2connect.data.logicaltype.html": {
    "href": "api/i2connect.data.logicaltype.html",
    "title": "data.LogicalType type",
    "keywords": "Home > @i2analyze/i2connect > data > LogicalType data.LogicalType type A logical type for the value of a property of a record. Signature: type LogicalType = /** A single-line text string. */ 'singleLineString' /** A date with no associated time. */ | 'date' /** A time with no associated date. */ | 'time' /** A date-and-time value. */ | 'dateAndTime' /** A true/false value. */ | 'boolean' /** An integer value. */ | 'integer' /** A double-precision (64-bit) floating point value. */ | 'double' /** A decimal value that is stored accurately without rounding. */ | 'decimal' /** A multiple-line text string. */ | 'multipleLineString' /** A value that is selected from a list. */ | 'selectedFromList' /** A value that is suggested from a list. */ | 'suggestedFromList' /** A geospatial value. */ | 'geospatial'; Introduced: API version 1.0"
  },
  "api/i2connect.data.propertyvalue.html": {
    "href": "api/i2connect.data.propertyvalue.html",
    "title": "data.PropertyValue type",
    "keywords": "Home > @i2analyze/i2connect > data > PropertyValue data.PropertyValue type A value for a property of a record. Signature: type PropertyValue = string | number | boolean | IZonedDateTime | IGeoJsonPoint | IGeoJsonFeatureCollection; References: IZonedDateTime <!-- --> , IGeoJsonPoint <!-- --> , IGeoJsonFeatureCollection Introduced: API version 1.0 Remarks Property values are constrained to the types that are listed in the definition."
  },
  "api/i2connect.data.propertyvaluetype.html": {
    "href": "api/i2connect.data.propertyvaluetype.html",
    "title": "data.PropertyValueType type",
    "keywords": "Home > @i2analyze/i2connect > data > PropertyValueType data.PropertyValueType type The permitted types (for example, string <!-- --> , number <!-- --> , or boolean <!-- --> ) for the value of a property that has the specified property type. Signature: type PropertyValueType<TPropertyType extends schema.IPropertyType> = records.LogicalTypeValueTypeMap<TPropertyType>[TPropertyType['logicalType']]; References: schema.IPropertyType <!-- --> , records.LogicalTypeValueTypeMap Introduced: API version 1.0 Type Parameters Parameter Type Description TPropertyType extends schema.IPropertyType The type to evaluate."
  },
  "api/i2connect.detailederror._constructor_.html": {
    "href": "api/i2connect.detailederror._constructor_.html",
    "title": "DetailedError.(constructor)",
    "keywords": "Home > @i2analyze/i2connect > DetailedError > (constructor) DetailedError.(constructor) Constructs a new instance of the DetailedError class. Signature: constructor(data: IDetailedErrorData); Introduced: API version 1.0 Parameters Parameter Type Description data IDetailedErrorData The detailed information about the problem that caused the error, which can contain all the properties of IDetailedErrorData except type ."
  },
  "api/i2connect.detailederror.data.html": {
    "href": "api/i2connect.detailederror.data.html",
    "title": "DetailedError.data property",
    "keywords": "Home > @i2analyze/i2connect > DetailedError > data DetailedError.data property Gets detailed information about the problem that caused the error. Signature: readonly data: IDetailedErrorData; Introduced: API version 1.0"
  },
  "api/i2connect.detailederror.html": {
    "href": "api/i2connect.detailederror.html",
    "title": "DetailedError class",
    "keywords": "Home > @i2analyze/i2connect > DetailedError DetailedError class An error indicating that a problem occurred during a service call. Signature: export declare class DetailedError extends Error Extends: Error Introduced: API version 1.0 Remarks Error objects can optionally be constructed with detailed error information. Constructors Constructor Modifiers Description (constructor)(data) Constructs a new instance of the DetailedError class. Properties Property Modifiers Type Description data IDetailedErrorData Gets detailed information about the problem that caused the error."
  },
  "api/i2connect.html": {
    "href": "api/i2connect.html",
    "title": "i2connect package",
    "keywords": "Home > @i2analyze/i2connect i2connect package The i2 Connect Server package, which contains all the functionality you need to create connectors for the i2 Connect server. Classes Class Description AuthenticationRequiredError An error indicating that authentication is required. DetailedError An error indicating that a problem occurred during a service call. Result A result from a service method on a connector for the i2 Connect server. Server The i2 Connect server. Functions Function Description asyncState() The @asyncState decorator, which configures a service method parameter to receive an IAsyncState object. authenticationField(config) The @authenticationField decorator, which configures an authenticator method parameter to receive the value from a field on an authentication dialog. authenticationToken(authConfigId) The @authenticationToken decorator, which configures a service method parameter to receive the value of the token associated with an authenticator. authenticator(config) The @authenticator decorator, which configures a method on the connector class to perform user authentication. condition(condition) The @condition decorator, which configures a service method parameter to receive a value that a user provides, subject to a condition that you specify. connector(config) The @connector decorator, which configures a class to be a connector for the i2 Connect server. createLogger(id) Creates or retrieves a logger object with the specified identifier. jwt() The @jwt decorator, which configures a service method parameter to receive a JSON Web Token (JWT). seeds(constraints) The @seeds decorator, which configures a service method parameter to receive records to use as seeds. service(config) The @service decorator, which configures a method on the connector class to be an i2 Connect service. Interfaces Interface Description IAsyncState A collection of methods through which an i2 Connect service method can communicate with a user who initiated a long-running operation. IDetailedErrorData A set of detailed error information for a DetailedError object. ILogger A diagnostic logger that i2 Connect services can use. IRequestInformation A set of information from an incoming HTTP request. ISecurityPermission A set of access levels associated with the values of a particular security dimension. ISeeds A set of seed records that the i2 Connect server passes to a service method. ISubstatus A piece of information about the progress of a long-running service method call. Namespaces Namespace Description connectors The members of the connectors namespace allow you to configure the connectors that you create for the i2 Connect server. data The members of the data namespace provide access to the property values of records that an i2 Connect service operates on. records The members of the records namespace provide access to the contents of seed and result records in an i2 Connect service. schema The members of the schema namespace provide access to the specifications that govern the structure of records in an i2 Connect service. services The members of the services namespace define the conditions and constraints that you can place on the parameters of i2 Connect service methods. Type Aliases Type Alias Description AccessLevel The level of access that a user has to some data. LogLevel The logging level, or severity, of log messages. SubstatusType A type for a piece of substatus information."
  },
  "api/i2connect.iasyncstate.addsubstatus.html": {
    "href": "api/i2connect.iasyncstate.addsubstatus.html",
    "title": "IAsyncState.addSubstatus() method",
    "keywords": "Home > @i2analyze/i2connect > IAsyncState > addSubstatus IAsyncState.addSubstatus() method Provides a piece of information about the progress of the long-running operation to the user. Signature: addSubstatus(type: SubstatusType, message: string): ISubstatus; Introduced: API version 1.0 Parameters Parameter Type Description type SubstatusType The type of the substatus. message string The message associated with the substatus. Returns: ISubstatus The substatus that was added to the IAsyncState object. Remarks Substatuses make extra information available to the client. By polling the server during execution, the client can display the information to users. As well as adding substatus information, you can also update previously provided information by editing the object that this method returns."
  },
  "api/i2connect.iasyncstate.clearsubstatuses.html": {
    "href": "api/i2connect.iasyncstate.clearsubstatuses.html",
    "title": "IAsyncState.clearSubstatuses() method",
    "keywords": "Home > @i2analyze/i2connect > IAsyncState > clearSubstatuses IAsyncState.clearSubstatuses() method Clears all the substatuses from the IAsyncState object. Signature: clearSubstatuses(): void; Returns: void Introduced: API version 1.0"
  },
  "api/i2connect.iasyncstate.html": {
    "href": "api/i2connect.iasyncstate.html",
    "title": "IAsyncState interface",
    "keywords": "Home > @i2analyze/i2connect > IAsyncState IAsyncState interface A collection of methods through which an i2 Connect service method can communicate with a user who initiated a long-running operation. Signature: export interface IAsyncState Introduced: API version 1.0 Remarks The i2 Connect server injects an IAsyncState object when the async property is set to true in the @service decorator, and one of the service method parameters has the @asyncState decorator. Properties Property Type Description isCanceled boolean Indicates whether the user has canceled the long-running operation. Methods Method Description addSubstatus(type, message) Provides a piece of information about the progress of the long-running operation to the user. clearSubstatuses() Clears all the substatuses from the IAsyncState object."
  },
  "api/i2connect.iasyncstate.iscanceled.html": {
    "href": "api/i2connect.iasyncstate.iscanceled.html",
    "title": "IAsyncState.isCanceled property",
    "keywords": "Home > @i2analyze/i2connect > IAsyncState > isCanceled IAsyncState.isCanceled property Indicates whether the user has canceled the long-running operation. Signature: readonly isCanceled: boolean; Returns: boolean Introduced: API version 1.0 Remarks If you inspect this property during your processing for a long-running operation and find it to be true <!-- --> , you can avoid doing further work (for example, making more calls to a target data source) in support of the operation."
  },
  "api/i2connect.idetailederrordata.detail.html": {
    "href": "api/i2connect.idetailederrordata.detail.html",
    "title": "IDetailedErrorData.detail property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > detail IDetailedErrorData.detail property Gets addition detail about the problem, specific to this instance of it. Signature: readonly detail?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.idetailederrordata.html": {
    "href": "api/i2connect.idetailederrordata.html",
    "title": "IDetailedErrorData interface",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData IDetailedErrorData interface A set of detailed error information for a DetailedError object. Signature: export interface IDetailedErrorData Introduced: API version 1.0 Properties Property Type Description detail? string (Optional) Gets addition detail about the problem, specific to this instance of it. instance? string (Optional) Gets a URL for a resource that is specific to this instance of the problem. status? number (Optional) Gets the HTTP status code that was generated by the server for this occurrence of the problem. title? string (Optional) Gets the title of the problem, which might be displayed to the user. type? string (Optional) Gets a URL for a resource that describes the type of the problem."
  },
  "api/i2connect.idetailederrordata.instance.html": {
    "href": "api/i2connect.idetailederrordata.instance.html",
    "title": "IDetailedErrorData.instance property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > instance IDetailedErrorData.instance property Gets a URL for a resource that is specific to this instance of the problem. Signature: readonly instance?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.idetailederrordata.status.html": {
    "href": "api/i2connect.idetailederrordata.status.html",
    "title": "IDetailedErrorData.status property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > status IDetailedErrorData.status property Gets the HTTP status code that was generated by the server for this occurrence of the problem. Signature: readonly status?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.idetailederrordata.title.html": {
    "href": "api/i2connect.idetailederrordata.title.html",
    "title": "IDetailedErrorData.title property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > title IDetailedErrorData.title property Gets the title of the problem, which might be displayed to the user. Signature: readonly title?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.idetailederrordata.type.html": {
    "href": "api/i2connect.idetailederrordata.type.html",
    "title": "IDetailedErrorData.type property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > type IDetailedErrorData.type property Gets a URL for a resource that describes the type of the problem. Signature: readonly type?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.ilogger.debug.html": {
    "href": "api/i2connect.ilogger.debug.html",
    "title": "ILogger.debug() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > debug ILogger.debug() method Logs a message at 'debug' level. Signature: debug(message: string): void; Introduced: API version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/i2connect.ilogger.debug_1.html": {
    "href": "api/i2connect.ilogger.debug_1.html",
    "title": "ILogger.debug() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > debug ILogger.debug() method Logs a formatted message at 'debug' level. Signature: debug(format: string, ...args: unknown[]): void; Introduced: API version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/i2connect.ilogger.error.html": {
    "href": "api/i2connect.ilogger.error.html",
    "title": "ILogger.error() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > error ILogger.error() method Logs a message at 'error' level. Signature: error(message: string): void; Introduced: API version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/i2connect.ilogger.error_1.html": {
    "href": "api/i2connect.ilogger.error_1.html",
    "title": "ILogger.error() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > error ILogger.error() method Logs a formatted message at 'error' level. Signature: error(format: string, ...args: unknown[]): void; Introduced: API version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/i2connect.ilogger.error_2.html": {
    "href": "api/i2connect.ilogger.error_2.html",
    "title": "ILogger.error() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > error ILogger.error() method Logs an Error object at 'error' level. Signature: error(error: Error): void; Introduced: API version 1.0 Parameters Parameter Type Description error Error An Error object to log. Returns: void"
  },
  "api/i2connect.ilogger.html": {
    "href": "api/i2connect.ilogger.html",
    "title": "ILogger interface",
    "keywords": "Home > @i2analyze/i2connect > ILogger ILogger interface A diagnostic logger that i2 Connect services can use. Signature: export interface ILogger Introduced: API version 1.0 Remarks In formatted message strings, ' %d <!-- --> ' is a numeric representation of the parameter, ' %j <!-- --> ' is a JSON representation of the parameter, and ' %s <!-- --> ' is a string representation of the parameter. Any extra parameters are interpreted automatically as ' %s <!-- --> '. The default logging level is info <!-- --> . Methods Method Description debug(message) Logs a message at 'debug' level. debug(format, args) Logs a formatted message at 'debug' level. error(message) Logs a message at 'error' level. error(format, args) Logs a formatted message at 'error' level. error(error) Logs an Error object at 'error' level. info(message) Logs a message at 'info' level. info(format, args) Logs a formatted message at 'info' level. setLogLevel(level) Sets the minimum level, or severity, of messages that will be emitted. warn(message) Logs a message at 'warn' level. warn(format, args) Logs a formatted message at 'warn' level."
  },
  "api/i2connect.ilogger.info.html": {
    "href": "api/i2connect.ilogger.info.html",
    "title": "ILogger.info() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > info ILogger.info() method Logs a message at 'info' level. Signature: info(message: string): void; Introduced: API version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/i2connect.ilogger.info_1.html": {
    "href": "api/i2connect.ilogger.info_1.html",
    "title": "ILogger.info() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > info ILogger.info() method Logs a formatted message at 'info' level. Signature: info(format: string, ...args: unknown[]): void; Introduced: API version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/i2connect.ilogger.setloglevel.html": {
    "href": "api/i2connect.ilogger.setloglevel.html",
    "title": "ILogger.setLogLevel() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > setLogLevel ILogger.setLogLevel() method Sets the minimum level, or severity, of messages that will be emitted. Signature: setLogLevel(level: LogLevel): void; Introduced: API version 1.0 Parameters Parameter Type Description level LogLevel The minimum logging level to set. Returns: void"
  },
  "api/i2connect.ilogger.warn.html": {
    "href": "api/i2connect.ilogger.warn.html",
    "title": "ILogger.warn() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > warn ILogger.warn() method Logs a message at 'warn' level. Signature: warn(message: string): void; Introduced: API version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/i2connect.ilogger.warn_1.html": {
    "href": "api/i2connect.ilogger.warn_1.html",
    "title": "ILogger.warn() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > warn ILogger.warn() method Logs a formatted message at 'warn' level. Signature: warn(format: string, ...args: unknown[]): void; Introduced: API version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/i2connect.irequestinformation.html": {
    "href": "api/i2connect.irequestinformation.html",
    "title": "IRequestInformation interface",
    "keywords": "Home > @i2analyze/i2connect > IRequestInformation IRequestInformation interface A set of information from an incoming HTTP request. Signature: export interface IRequestInformation Introduced: API version 1.2 Properties Property Type Description user { readonly principal: string; readonly displayName: string; readonly securityPermissions: readonly ISecurityPermission <!-- --> []; readonly groups: readonly string[]; readonly commandAccessPermissions: readonly string[]; } Gets information about the user who made the request."
  },
  "api/i2connect.irequestinformation.user.html": {
    "href": "api/i2connect.irequestinformation.user.html",
    "title": "IRequestInformation.user property",
    "keywords": "Home > @i2analyze/i2connect > IRequestInformation > user IRequestInformation.user property Gets information about the user who made the request. Signature: readonly user: { readonly principal: string; readonly displayName: string; readonly securityPermissions: readonly ISecurityPermission[]; readonly groups: readonly string[]; readonly commandAccessPermissions: readonly string[]; }; Returns: { readonly principal: string; readonly displayName: string; readonly securityPermissions: readonly ISecurityPermission []; readonly groups: readonly string[]; readonly commandAccessPermissions: readonly string[]; } Introduced: API version 1.2"
  },
  "api/i2connect.isecuritypermission.dimension.html": {
    "href": "api/i2connect.isecuritypermission.dimension.html",
    "title": "ISecurityPermission.dimension property",
    "keywords": "Home > @i2analyze/i2connect > ISecurityPermission > dimension ISecurityPermission.dimension property Gets the identifier of the dimension that the security permission applies to. Signature: readonly dimension: string; Returns: string Introduced: API version 1.2"
  },
  "api/i2connect.isecuritypermission.html": {
    "href": "api/i2connect.isecuritypermission.html",
    "title": "ISecurityPermission interface",
    "keywords": "Home > @i2analyze/i2connect > ISecurityPermission ISecurityPermission interface A set of access levels associated with the values of a particular security dimension. Signature: export interface ISecurityPermission Introduced: API version 1.2 Properties Property Type Description dimension string Gets the identifier of the dimension that the security permission applies to. permissions readonly { readonly dimensionValue: string; readonly level: AccessLevel <!-- --> ; }[] Gets the access levels that apply to the values of ISecurityPermission.dimension <!-- --> ."
  },
  "api/i2connect.isecuritypermission.permissions.html": {
    "href": "api/i2connect.isecuritypermission.permissions.html",
    "title": "ISecurityPermission.permissions property",
    "keywords": "Home > @i2analyze/i2connect > ISecurityPermission > permissions ISecurityPermission.permissions property Gets the access levels that apply to the values of ISecurityPermission.dimension <!-- --> . Signature: readonly permissions: readonly { readonly dimensionValue: string; readonly level: AccessLevel; }[]; Returns: readonly { readonly dimensionValue: string; readonly level: AccessLevel ; }[] Introduced: API version 1.2"
  },
  "api/i2connect.iseeds.entities.html": {
    "href": "api/i2connect.iseeds.entities.html",
    "title": "ISeeds.entities property",
    "keywords": "Home > @i2analyze/i2connect > ISeeds > entities ISeeds.entities property Gets the seed entities for the query. Each seed corresponds to an entity record that was selected on the chart. Signature: readonly entities: readonly records.ISeedEntityRecord[]; Returns: readonly records.ISeedEntityRecord [] Introduced: API version 1.0"
  },
  "api/i2connect.iseeds.html": {
    "href": "api/i2connect.iseeds.html",
    "title": "ISeeds interface",
    "keywords": "Home > @i2analyze/i2connect > ISeeds ISeeds interface A set of seed records that the i2 Connect server passes to a service method. Signature: export interface ISeeds Introduced: API version 1.0 Remarks Seed records are selected by users when they submit a query to your service through a client. Properties Property Type Description entities readonly records.ISeedEntityRecord <!-- --> [] Gets the seed entities for the query. Each seed corresponds to an entity record that was selected on the chart. links readonly records.ISeedLinkRecord <!-- --> [] Gets the seed links for the query. Each seed corresponds to a link record that was selected on the chart."
  },
  "api/i2connect.iseeds.links.html": {
    "href": "api/i2connect.iseeds.links.html",
    "title": "ISeeds.links property",
    "keywords": "Home > @i2analyze/i2connect > ISeeds > links ISeeds.links property Gets the seed links for the query. Each seed corresponds to a link record that was selected on the chart. Signature: readonly links: readonly records.ISeedLinkRecord[]; Returns: readonly records.ISeedLinkRecord [] Introduced: API version 1.0"
  },
  "api/i2connect.isubstatus.html": {
    "href": "api/i2connect.isubstatus.html",
    "title": "ISubstatus interface",
    "keywords": "Home > @i2analyze/i2connect > ISubstatus ISubstatus interface A piece of information about the progress of a long-running service method call. Signature: export interface ISubstatus Introduced: API version 1.0 Remarks Substatuses provide information at a finer level of detail than a simple \"succeeded\" or \"failed\" status. The asynchronous state for a particular long-running operation can contain multiple substatuses that report on different aspects of its progress. Properties Property Type Description message string Gets the message that is associated with the substatus information. type SubstatusType Gets the type of the substatus information."
  },
  "api/i2connect.isubstatus.message.html": {
    "href": "api/i2connect.isubstatus.message.html",
    "title": "ISubstatus.message property",
    "keywords": "Home > @i2analyze/i2connect > ISubstatus > message ISubstatus.message property Gets the message that is associated with the substatus information. Signature: readonly message: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.isubstatus.type.html": {
    "href": "api/i2connect.isubstatus.type.html",
    "title": "ISubstatus.type property",
    "keywords": "Home > @i2analyze/i2connect > ISubstatus > type ISubstatus.type property Gets the type of the substatus information. Signature: readonly type: SubstatusType; Returns: SubstatusType Introduced: API version 1.0"
  },
  "api/i2connect.jwt.html": {
    "href": "api/i2connect.jwt.html",
    "title": "jwt() function",
    "keywords": "Home > @i2analyze/i2connect > jwt jwt() function The @jwt decorator, which configures a service method parameter to receive a JSON Web Token (JWT). Signature: export declare function jwt(): ParameterDecorator; Returns: ParameterDecorator Introduced: API version 1.0 Remarks JSON Web Tokens are used as part of the authentication process for web connectors. Connections to data sources are usually anonymous, or else they use a shared key. In some cases, however, it is useful to know the identity of the user that submitted the request. The decorated parameter contains the decoded JWT that was used to authenticate the user with the i2 Connect gateway. As the structure of the token can vary, you will need to parse it to extract the information you need."
  },
  "api/i2connect.loglevel.html": {
    "href": "api/i2connect.loglevel.html",
    "title": "LogLevel type",
    "keywords": "Home > @i2analyze/i2connect > LogLevel LogLevel type The logging level, or severity, of log messages. Signature: export declare type LogLevel = 'error' | 'warn' | 'info' | 'debug'; Introduced: API version 1.0 Remarks The possible values for the logging level are hierarchical. The default logging level is info <!-- --> ."
  },
  "api/i2connect.records.html": {
    "href": "api/i2connect.records.html",
    "title": "records namespace",
    "keywords": "Home > @i2analyze/i2connect > records records namespace The members of the records namespace provide access to the contents of seed and result records in an i2 Connect service. Signature: export declare namespace records Introduced: API version 1.0 Interfaces Interface Description IConnectorKey A key from a source identifier of a record that was returned by the current connector. IRecordProperties A set of properties in a result record. IResultLinkRecord A new result link record. IResultRecordBase A set of information and functionality that is common to all result records. ISeededResultRecordBase A set of information and functionality that is common to all result records that are generated from seed records. ISeedEntityRecord A seed entity record. ISeedLinkRecord A seed link record. ISeedRecordBase A set of information and functionality that is common to all seed records. ISourceIdentifier A source identifier for a record. ISourceReference A source reference for a record. ITypedSeededResultRecord A result record of a specific type that is generated from a seed record. ITypedSeedRecord A seed record of a specific type. Type Aliases Type Alias Description IResultEntityRecord A new result entity record. ISeededResultEntityRecord A result entity record that is generated from a seed record. ISeededResultLinkRecord A result link record that is generated from a seed record. ISeedProperties The properties of a seed record. LogicalTypeValueTypeMap A map of logical type to value types for a particular property type. PropertyTypeDisplayNames A utility type that represents the display names of the property types of a particular item type. PropertyTypeFromDisplayName A utility type that represents a property type with a particular display name from a particular item type. PropertyValuesFromPossibleValues A utility type that represents the values from a property type that has possible values. RecordProperties A set of name-value pairs that contain the type names and values for the properties of a record that has a specific type. ResultRecordId The identifier of a newly created result record. ResultRecordIdType The type of an identifier for a newly created result record. SeedId The identifier of a seed record."
  },
  "api/i2connect.records.iconnectorkey.html": {
    "href": "api/i2connect.records.iconnectorkey.html",
    "title": "records.IConnectorKey interface",
    "keywords": "Home > @i2analyze/i2connect > records > IConnectorKey records.IConnectorKey interface A key from a source identifier of a record that was returned by the current connector. Signature: interface IConnectorKey Introduced: API version 1.0 Properties Property Type Description id string Gets the identifier of the data that the key represents. itemTypeId string Gets the item type identifier of the data that the key represents."
  },
  "api/i2connect.records.iconnectorkey.id.html": {
    "href": "api/i2connect.records.iconnectorkey.id.html",
    "title": "records.IConnectorKey.id property",
    "keywords": "Home > @i2analyze/i2connect > records > IConnectorKey > id records.IConnectorKey.id property Gets the identifier of the data that the key represents. Signature: readonly id: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.iconnectorkey.itemtypeid.html": {
    "href": "api/i2connect.records.iconnectorkey.itemtypeid.html",
    "title": "records.IConnectorKey.itemTypeId property",
    "keywords": "Home > @i2analyze/i2connect > records > IConnectorKey > itemTypeId records.IConnectorKey.itemTypeId property Gets the item type identifier of the data that the key represents. Signature: readonly itemTypeId: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.irecordproperties.html": {
    "href": "api/i2connect.records.irecordproperties.html",
    "title": "records.IRecordProperties interface",
    "keywords": "Home > @i2analyze/i2connect > records > IRecordProperties records.IRecordProperties interface A set of properties in a result record. Signature: interface IRecordProperties<TItemType extends schema.IItemType = schema.IItemType> Introduced: API version 1.2 Type Parameters Parameter Type Description TItemType extends schema.IItemType (default: schema.IItemType ) The type of the result record. Methods Method Description setProperties(properties) Sets the values of several properties on the result record. setProperty(displayName, value) Sets the value of a property on the result record. setSourceReference(sourceReference) Adds a source reference to the result record."
  },
  "api/i2connect.records.irecordproperties.setproperties.html": {
    "href": "api/i2connect.records.irecordproperties.setproperties.html",
    "title": "records.IRecordProperties.setProperties() method",
    "keywords": "Home > @i2analyze/i2connect > records > IRecordProperties > setProperties records.IRecordProperties.setProperties() method Sets the values of several properties on the result record. Signature: setProperties(properties: RecordProperties<TItemType>): void; Introduced: API version 1.2 Parameters Parameter Type Description properties RecordProperties <!-- --> <TItemType> An object that contains name-value pairs, where the names match property type names, and the values are those that you want to set. Returns: void Example Use code like this to set several properties on the seeded result record at once: seededRecord.setProperties({ 'property name 1': 'property value', 'property name 2': 4 });"
  },
  "api/i2connect.records.irecordproperties.setproperty.html": {
    "href": "api/i2connect.records.irecordproperties.setproperty.html",
    "title": "records.IRecordProperties.setProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > IRecordProperties > setProperty records.IRecordProperties.setProperty() method Sets the value of a property on the result record. Signature: setProperty<TPropertyName extends PropertyTypeDisplayNames<TItemType>>(displayName: TPropertyName, value: data.PropertyValueType<PropertyTypeFromDisplayName<TItemType, TPropertyName>> | undefined): void; Introduced: API version 1.2 Type Parameters Parameter Type Description TPropertyName extends PropertyTypeDisplayNames <TItemType> The type display name, which is inferred from the displayName parameter. Parameters Parameter Type Description displayName TPropertyName The display name of the property type. value data.PropertyValueType <!-- --> < PropertyTypeFromDisplayName <!-- --> <TItemType, TPropertyName>> | undefined The value for the property. Returns: void Remarks This method allows you to set a property on the record, given the display name of its property type from the schema. Example Use code like this to set an individual property on the seeded result record: seededResultRecord.setProperty('property name 1', 'property value'); seededResultRecord.setProperty('property name 2', 4);"
  },
  "api/i2connect.records.irecordproperties.setsourcereference.html": {
    "href": "api/i2connect.records.irecordproperties.setsourcereference.html",
    "title": "records.IRecordProperties.setSourceReference() method",
    "keywords": "Home > @i2analyze/i2connect > records > IRecordProperties > setSourceReference records.IRecordProperties.setSourceReference() method Adds a source reference to the result record. Signature: setSourceReference(sourceReference: ISourceReference): void; Introduced: API version 1.2 Parameters Parameter Type Description sourceReference ISourceReference The source reference to add. Returns: void"
  },
  "api/i2connect.records.iresultentityrecord.html": {
    "href": "api/i2connect.records.iresultentityrecord.html",
    "title": "records.IResultEntityRecord type",
    "keywords": "Home > @i2analyze/i2connect > records > IResultEntityRecord records.IResultEntityRecord type A new result entity record. Signature: type IResultEntityRecord<TItemType extends schema.IItemType = schema.IItemType, TIdType extends ResultRecordIdType = ResultRecordId> = IResultRecordBase<TItemType, TIdType>; References: schema.IItemType <!-- --> , ResultRecordIdType <!-- --> , ResultRecordId <!-- --> , IResultRecordBase Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType (default: schema.IItemType ) The type of the result record. TIdType extends ResultRecordIdType (default: ResultRecordId ) The type of the identifier for the result record.."
  },
  "api/i2connect.records.iresultlinkrecord.fromend.html": {
    "href": "api/i2connect.records.iresultlinkrecord.fromend.html",
    "title": "records.IResultLinkRecord.fromEnd property",
    "keywords": "Home > @i2analyze/i2connect > records > IResultLinkRecord > fromEnd records.IResultLinkRecord.fromEnd property Gets the entity record at the \"from\" end of the link. Signature: readonly fromEnd: TFromEnd; Returns: TFromEnd Introduced: API version 1.0"
  },
  "api/i2connect.records.iresultlinkrecord.html": {
    "href": "api/i2connect.records.iresultlinkrecord.html",
    "title": "records.IResultLinkRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > IResultLinkRecord records.IResultLinkRecord interface A new result link record. Signature: interface IResultLinkRecord<TLinkType extends schema.ILinkType, TFromEnd extends ISeededResultEntityRecord | IResultEntityRecord | IResultEntityRecord<schema.IEntityType, ISourceIdentifier>, TToEnd extends ISeededResultEntityRecord | IResultEntityRecord | IResultEntityRecord<schema.IEntityType, ISourceIdentifier>, TIdType extends ResultRecordIdType = ResultRecordId> extends IResultRecordBase<TLinkType, TIdType> Extends: IResultRecordBase <!-- --> <TLinkType, TIdType> Introduced: API version 1.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the result record. TFromEnd extends ISeededResultEntityRecord | IResultEntityRecord | IResultEntityRecord < schema.IEntityType , ISourceIdentifier > The type of the entity record at the \"from\" end of the link. TToEnd extends ISeededResultEntityRecord | IResultEntityRecord | IResultEntityRecord < schema.IEntityType , ISourceIdentifier > The type of the entity record at the \"to\" end of the link. TIdType extends ResultRecordIdType (default: ResultRecordId ) The type of the identifier for the result record.. Properties Property Type Description fromEnd TFromEnd Gets the entity record at the \"from\" end of the link. id TIdType Gets the identifier of the result record. (Inherited from IResultRecordBase <!-- --> ) linkDirection data.LinkDirection Gets the direction of the link. toEnd TToEnd Gets the entity record at the \"to\" end of the link. Methods Method Description setProperties(properties) Sets the values of several properties on the result record. (Inherited from IRecordProperties <!-- --> ) setProperty(displayName, value) Sets the value of a property on the result record. (Inherited from IRecordProperties <!-- --> ) setSourceReference(sourceReference) Adds a source reference to the result record. (Inherited from IRecordProperties <!-- --> )"
  },
  "api/i2connect.records.iresultlinkrecord.linkdirection.html": {
    "href": "api/i2connect.records.iresultlinkrecord.linkdirection.html",
    "title": "records.IResultLinkRecord.linkDirection property",
    "keywords": "Home > @i2analyze/i2connect > records > IResultLinkRecord > linkDirection records.IResultLinkRecord.linkDirection property Gets the direction of the link. Signature: readonly linkDirection: data.LinkDirection; Returns: data.LinkDirection Introduced: API version 1.0"
  },
  "api/i2connect.records.iresultlinkrecord.toend.html": {
    "href": "api/i2connect.records.iresultlinkrecord.toend.html",
    "title": "records.IResultLinkRecord.toEnd property",
    "keywords": "Home > @i2analyze/i2connect > records > IResultLinkRecord > toEnd records.IResultLinkRecord.toEnd property Gets the entity record at the \"to\" end of the link. Signature: readonly toEnd: TToEnd; Returns: TToEnd Introduced: API version 1.0"
  },
  "api/i2connect.records.iresultrecordbase.html": {
    "href": "api/i2connect.records.iresultrecordbase.html",
    "title": "records.IResultRecordBase interface",
    "keywords": "Home > @i2analyze/i2connect > records > IResultRecordBase records.IResultRecordBase interface A set of information and functionality that is common to all result records. Signature: interface IResultRecordBase<TItemType extends schema.IItemType = schema.IItemType, TIdType extends ResultRecordIdType = ResultRecordId> extends IRecordProperties<TItemType> Extends: IRecordProperties <!-- --> <TItemType> Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType (default: schema.IItemType ) The type of the result record. TIdType extends ResultRecordIdType (default: ResultRecordId ) The type of the identifier for the result record. Properties Property Type Description id TIdType Gets the identifier of the result record. Methods Method Description setProperties(properties) Sets the values of several properties on the result record. (Inherited from IRecordProperties <!-- --> ) setProperty(displayName, value) Sets the value of a property on the result record. (Inherited from IRecordProperties <!-- --> ) setSourceReference(sourceReference) Adds a source reference to the result record. (Inherited from IRecordProperties <!-- --> )"
  },
  "api/i2connect.records.iresultrecordbase.id.html": {
    "href": "api/i2connect.records.iresultrecordbase.id.html",
    "title": "records.IResultRecordBase.id property",
    "keywords": "Home > @i2analyze/i2connect > records > IResultRecordBase > id records.IResultRecordBase.id property Gets the identifier of the result record. Signature: readonly id: TIdType; Returns: TIdType Introduced: API version 1.2"
  },
  "api/i2connect.records.iseededresultentityrecord.html": {
    "href": "api/i2connect.records.iseededresultentityrecord.html",
    "title": "records.ISeededResultEntityRecord type",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultEntityRecord records.ISeededResultEntityRecord type A result entity record that is generated from a seed record. Signature: type ISeededResultEntityRecord = ISeededResultRecordBase; References: ISeededResultRecordBase Introduced: API version 1.0"
  },
  "api/i2connect.records.iseededresultlinkrecord.html": {
    "href": "api/i2connect.records.iseededresultlinkrecord.html",
    "title": "records.ISeededResultLinkRecord type",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultLinkRecord records.ISeededResultLinkRecord type A result link record that is generated from a seed record. Signature: type ISeededResultLinkRecord = ISeededResultRecordBase; References: ISeededResultRecordBase Introduced: API version 1.0"
  },
  "api/i2connect.records.iseededresultrecordbase.html": {
    "href": "api/i2connect.records.iseededresultrecordbase.html",
    "title": "records.ISeededResultRecordBase interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultRecordBase records.ISeededResultRecordBase interface A set of information and functionality that is common to all result records that are generated from seed records. Signature: interface ISeededResultRecordBase Introduced: API version 1.0 Properties Property Type Description id SeedId Gets the identifier of the result record, which is also the identifier of the seed record. Methods Method Description isType(itemType) Indicates whether the result record has the specified item type. setSourceReference(sourceReference) Adds a source reference to the result record."
  },
  "api/i2connect.records.iseededresultrecordbase.id.html": {
    "href": "api/i2connect.records.iseededresultrecordbase.id.html",
    "title": "records.ISeededResultRecordBase.id property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultRecordBase > id records.ISeededResultRecordBase.id property Gets the identifier of the result record, which is also the identifier of the seed record. Signature: readonly id: SeedId; Returns: SeedId Introduced: API version 1.0"
  },
  "api/i2connect.records.iseededresultrecordbase.istype.html": {
    "href": "api/i2connect.records.iseededresultrecordbase.istype.html",
    "title": "records.ISeededResultRecordBase.isType() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultRecordBase > isType records.ISeededResultRecordBase.isType() method Indicates whether the result record has the specified item type. Signature: isType<TItemType extends schema.IItemType>(itemType: TItemType): this is ITypedSeededResultRecord<TItemType>; Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The type of the result record. Parameters Parameter Type Description itemType TItemType The type of the result record. Returns: this is ITypedSeededResultRecord <!-- --> <TItemType> true if the result record has the specified type; false otherwise."
  },
  "api/i2connect.records.iseededresultrecordbase.setsourcereference.html": {
    "href": "api/i2connect.records.iseededresultrecordbase.setsourcereference.html",
    "title": "records.ISeededResultRecordBase.setSourceReference() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultRecordBase > setSourceReference records.ISeededResultRecordBase.setSourceReference() method Adds a source reference to the result record. Signature: setSourceReference(sourceReference: ISourceReference): void; Introduced: API version 1.0 Parameters Parameter Type Description sourceReference ISourceReference The source reference to add. Returns: void"
  },
  "api/i2connect.records.iseedentityrecord.html": {
    "href": "api/i2connect.records.iseedentityrecord.html",
    "title": "records.ISeedEntityRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedEntityRecord records.ISeedEntityRecord interface A seed entity record. Signature: interface ISeedEntityRecord extends ISeedRecordBase Extends: ISeedRecordBase Introduced: API version 1.0 Properties Property Type Description connectorKeys readonly IConnectorKey <!-- --> [] Gets the keys that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) label string Gets the label of the seed record. (Inherited from ISeedRecordBase <!-- --> ) seedId SeedId Gets the identifier of the seed record. (Inherited from ISeedRecordBase <!-- --> ) sourceIdentifiers readonly ISourceIdentifier <!-- --> [] Gets the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) Methods Method Description connectorKeysByType(type) Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) getProperty(itemType, displayName) Gets the value of the specified property of the seed record. (Inherited from ISeedRecordBase <!-- --> ) hasProperty(itemType, displayName) Indicates whether the seed record is of the specified item type and, if so, also has a property with the specified display name. (Inherited from ISeedRecordBase <!-- --> ) isType(itemType) Indicates whether the seed record is of the specified item type. (Inherited from ISeedRecordBase <!-- --> )"
  },
  "api/i2connect.records.iseedlinkrecord.direction.html": {
    "href": "api/i2connect.records.iseedlinkrecord.direction.html",
    "title": "records.ISeedLinkRecord.direction property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord > direction records.ISeedLinkRecord.direction property Gets the direction of the link record. Signature: readonly direction: data.LinkDirection; Returns: data.LinkDirection Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedlinkrecord.fromend.html": {
    "href": "api/i2connect.records.iseedlinkrecord.fromend.html",
    "title": "records.ISeedLinkRecord.fromEnd property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord > fromEnd records.ISeedLinkRecord.fromEnd property Gets the seed entity record at the \"from\" end of the link record. Signature: readonly fromEnd: ISeedEntityRecord; Returns: ISeedEntityRecord Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedlinkrecord.html": {
    "href": "api/i2connect.records.iseedlinkrecord.html",
    "title": "records.ISeedLinkRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord records.ISeedLinkRecord interface A seed link record. Signature: interface ISeedLinkRecord extends ISeedRecordBase Extends: ISeedRecordBase Introduced: API version 1.0 Properties Property Type Description connectorKeys readonly IConnectorKey <!-- --> [] Gets the keys that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) direction data.LinkDirection Gets the direction of the link record. fromEnd ISeedEntityRecord Gets the seed entity record at the \"from\" end of the link record. label string Gets the label of the seed record. (Inherited from ISeedRecordBase <!-- --> ) seedId SeedId Gets the identifier of the seed record. (Inherited from ISeedRecordBase <!-- --> ) sourceIdentifiers readonly ISourceIdentifier <!-- --> [] Gets the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) toEnd ISeedEntityRecord Gets the seed entity record at the \"to\" end of the link record. Methods Method Description connectorKeysByType(type) Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) getProperty(itemType, displayName) Gets the value of the specified property of the seed record. (Inherited from ISeedRecordBase <!-- --> ) hasProperty(itemType, displayName) Indicates whether the seed record is of the specified item type and, if so, also has a property with the specified display name. (Inherited from ISeedRecordBase <!-- --> ) isType(itemType) Indicates whether the seed record is of the specified item type. (Inherited from ISeedRecordBase <!-- --> )"
  },
  "api/i2connect.records.iseedlinkrecord.toend.html": {
    "href": "api/i2connect.records.iseedlinkrecord.toend.html",
    "title": "records.ISeedLinkRecord.toEnd property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord > toEnd records.ISeedLinkRecord.toEnd property Gets the seed entity record at the \"to\" end of the link record. Signature: readonly toEnd: ISeedEntityRecord; Returns: ISeedEntityRecord Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedproperties.html": {
    "href": "api/i2connect.records.iseedproperties.html",
    "title": "records.ISeedProperties type",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedProperties records.ISeedProperties type The properties of a seed record. Signature: type ISeedProperties = ReadonlyMap<string, data.PropertyValue>; References: data.PropertyValue Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedrecordbase.connectorkeys.html": {
    "href": "api/i2connect.records.iseedrecordbase.connectorkeys.html",
    "title": "records.ISeedRecordBase.connectorKeys property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > connectorKeys records.ISeedRecordBase.connectorKeys property Gets the keys that came from the current connector, from the source identifiers of the seed record. Signature: readonly connectorKeys: readonly IConnectorKey[]; Returns: readonly IConnectorKey [] Introduced: API version 1.0 Remarks Each key contains the identifier and type of some data that originated from the current connector. This array contains more than one key only if multiple records have been merged on the chart. If the identifiers are unique in your source system, you must iterate over each key in this array. Note: Your seed constraints are no guarantee of the types of these keys. If the user has merged different types of record, you will get different key types. Use the connectorKeysByType() method to get keys only of the type that you are interested in."
  },
  "api/i2connect.records.iseedrecordbase.connectorkeysbytype.html": {
    "href": "api/i2connect.records.iseedrecordbase.connectorkeysbytype.html",
    "title": "records.ISeedRecordBase.connectorKeysByType() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > connectorKeysByType records.ISeedRecordBase.connectorKeysByType() method Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. Signature: connectorKeysByType(type: schema.IItemType): readonly IConnectorKey[]; Introduced: API version 1.0 Parameters Parameter Type Description type schema.IItemType The item type of the keys to retrieve. Returns: readonly IConnectorKey <!-- --> [] Remarks See the documentation for connectorKeys for more information."
  },
  "api/i2connect.records.iseedrecordbase.getproperty.html": {
    "href": "api/i2connect.records.iseedrecordbase.getproperty.html",
    "title": "records.ISeedRecordBase.getProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > getProperty records.ISeedRecordBase.getProperty() method Gets the value of the specified property of the seed record. Signature: getProperty<TItemType extends schema.IItemType, TPropertyName extends PropertyTypeDisplayNames<TItemType>>(itemType: TItemType, displayName: TPropertyName): data.PropertyValueType<PropertyTypeFromDisplayName<TItemType, TPropertyName>> | undefined; Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The item type of the seed record, which is inferred from the itemType parameter. TPropertyName extends PropertyTypeDisplayNames <TItemType> The display name of the property type, which is inferred from the 'displayName' parameter. Parameters Parameter Type Description itemType TItemType The item type of the seed record. displayName TPropertyName The display name of the property type. Returns: data.PropertyValueType <!-- --> < PropertyTypeFromDisplayName <!-- --> <TItemType, TPropertyName>> | undefined The property value. Remarks This method retrieves the value of the property whose type has the specified display name, provided that the seed record is of the specified item type."
  },
  "api/i2connect.records.iseedrecordbase.hasproperty.html": {
    "href": "api/i2connect.records.iseedrecordbase.hasproperty.html",
    "title": "records.ISeedRecordBase.hasProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > hasProperty records.ISeedRecordBase.hasProperty() method Indicates whether the seed record is of the specified item type and, if so, also has a property with the specified display name. Signature: hasProperty<TItemType extends schema.IItemType, TPropertyName extends PropertyTypeDisplayNames<TItemType>>(itemType: TItemType, displayName: TPropertyName): boolean; Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The item type to compare the seed record against, which is inferred from the itemType parameter. TPropertyName extends PropertyTypeDisplayNames <TItemType> The display name of the property type, which is inferred from the 'displayName' parameter. Parameters Parameter Type Description itemType TItemType The item type to compare the seed record against. displayName TPropertyName The display name of the property type. Returns: boolean true if the seed record is of type itemType and has a displayName property; false otherwise."
  },
  "api/i2connect.records.iseedrecordbase.html": {
    "href": "api/i2connect.records.iseedrecordbase.html",
    "title": "records.ISeedRecordBase interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase records.ISeedRecordBase interface A set of information and functionality that is common to all seed records. Signature: interface ISeedRecordBase Introduced: API version 1.0 Properties Property Type Description connectorKeys readonly IConnectorKey <!-- --> [] Gets the keys that came from the current connector, from the source identifiers of the seed record. label string Gets the label of the seed record. seedId SeedId Gets the identifier of the seed record. sourceIdentifiers readonly ISourceIdentifier <!-- --> [] Gets the source identifiers of the seed record. Methods Method Description connectorKeysByType(type) Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. getProperty(itemType, displayName) Gets the value of the specified property of the seed record. hasProperty(itemType, displayName) Indicates whether the seed record is of the specified item type and, if so, also has a property with the specified display name. isType(itemType) Indicates whether the seed record is of the specified item type."
  },
  "api/i2connect.records.iseedrecordbase.istype.html": {
    "href": "api/i2connect.records.iseedrecordbase.istype.html",
    "title": "records.ISeedRecordBase.isType() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > isType records.ISeedRecordBase.isType() method Indicates whether the seed record is of the specified item type. Signature: isType<TItemType extends schema.IItemType>(itemType: TItemType): this is ITypedSeedRecord<TItemType>; Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The item type to compare the seed record against, which is inferred from the itemType parameter. Parameters Parameter Type Description itemType TItemType The item type to compare the seed record against. Returns: this is ITypedSeedRecord <!-- --> <TItemType> true if the seed record is of type itemType <!-- --> ; false otherwise."
  },
  "api/i2connect.records.iseedrecordbase.label.html": {
    "href": "api/i2connect.records.iseedrecordbase.label.html",
    "title": "records.ISeedRecordBase.label property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > label records.ISeedRecordBase.label property Gets the label of the seed record. Signature: readonly label: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedrecordbase.seedid.html": {
    "href": "api/i2connect.records.iseedrecordbase.seedid.html",
    "title": "records.ISeedRecordBase.seedId property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > seedId records.ISeedRecordBase.seedId property Gets the identifier of the seed record. Signature: readonly seedId: SeedId; Returns: SeedId Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedrecordbase.sourceidentifiers.html": {
    "href": "api/i2connect.records.iseedrecordbase.sourceidentifiers.html",
    "title": "records.ISeedRecordBase.sourceIdentifiers property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > sourceIdentifiers records.ISeedRecordBase.sourceIdentifiers property Gets the source identifiers of the seed record. Signature: readonly sourceIdentifiers: readonly ISourceIdentifier[]; Returns: readonly ISourceIdentifier [] Introduced: API version 1.2"
  },
  "api/i2connect.records.isourceidentifier.html": {
    "href": "api/i2connect.records.isourceidentifier.html",
    "title": "records.ISourceIdentifier interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceIdentifier records.ISourceIdentifier interface A source identifier for a record. Signature: interface ISourceIdentifier Introduced: API version 1.2 Properties Property Type Description key readonly string[] Gets the values that make up the source identifier key. type string Gets the type of the source identifier."
  },
  "api/i2connect.records.isourceidentifier.key.html": {
    "href": "api/i2connect.records.isourceidentifier.key.html",
    "title": "records.ISourceIdentifier.key property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceIdentifier > key records.ISourceIdentifier.key property Gets the values that make up the source identifier key. Signature: readonly key: readonly string[]; Returns: readonly string[] Introduced: API version 1.2"
  },
  "api/i2connect.records.isourceidentifier.type.html": {
    "href": "api/i2connect.records.isourceidentifier.type.html",
    "title": "records.ISourceIdentifier.type property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceIdentifier > type records.ISourceIdentifier.type property Gets the type of the source identifier. Signature: readonly type: string; Returns: string Introduced: API version 1.2"
  },
  "api/i2connect.records.isourcereference.description.html": {
    "href": "api/i2connect.records.isourcereference.description.html",
    "title": "records.ISourceReference.description property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > description records.ISourceReference.description property Gets the description of the source that the source reference describes. Signature: readonly description?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.isourcereference.html": {
    "href": "api/i2connect.records.isourcereference.html",
    "title": "records.ISourceReference interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference records.ISourceReference interface A source reference for a record. Signature: interface ISourceReference Introduced: API version 1.0 Properties Property Type Description description? string (Optional) Gets the description of the source that the source reference describes. imageUrl? string (Optional) Gets the URL of an image of the source that the source reference describes. location? string (Optional) Gets the location of the source that the source reference describes. name string Gets the name of the source that the source reference describes. type? string (Optional) Gets the type of the source that the source reference describes."
  },
  "api/i2connect.records.isourcereference.imageurl.html": {
    "href": "api/i2connect.records.isourcereference.imageurl.html",
    "title": "records.ISourceReference.imageUrl property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > imageUrl records.ISourceReference.imageUrl property Gets the URL of an image of the source that the source reference describes. Signature: readonly imageUrl?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.isourcereference.location.html": {
    "href": "api/i2connect.records.isourcereference.location.html",
    "title": "records.ISourceReference.location property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > location records.ISourceReference.location property Gets the location of the source that the source reference describes. Signature: readonly location?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.isourcereference.name.html": {
    "href": "api/i2connect.records.isourcereference.name.html",
    "title": "records.ISourceReference.name property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > name records.ISourceReference.name property Gets the name of the source that the source reference describes. Signature: readonly name: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.isourcereference.type.html": {
    "href": "api/i2connect.records.isourcereference.type.html",
    "title": "records.ISourceReference.type property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > type records.ISourceReference.type property Gets the type of the source that the source reference describes. Signature: readonly type?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.itypedseededresultrecord.html": {
    "href": "api/i2connect.records.itypedseededresultrecord.html",
    "title": "records.ITypedSeededResultRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeededResultRecord records.ITypedSeededResultRecord interface A result record of a specific type that is generated from a seed record. Signature: interface ITypedSeededResultRecord<TItemType extends schema.IItemType = schema.IItemType> Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType (default: schema.IItemType ) The type of the result record. Methods Method Description setProperties(properties) Sets the values of several properties on the result record. setProperty(displayName, value) Sets the value of a property on the result record."
  },
  "api/i2connect.records.itypedseededresultrecord.setproperties.html": {
    "href": "api/i2connect.records.itypedseededresultrecord.setproperties.html",
    "title": "records.ITypedSeededResultRecord.setProperties() method",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeededResultRecord > setProperties records.ITypedSeededResultRecord.setProperties() method Sets the values of several properties on the result record. Signature: setProperties(properties: RecordProperties<TItemType>): void; Introduced: API version 1.0 Parameters Parameter Type Description properties RecordProperties <!-- --> <TItemType> An object that contains name-value pairs, where the names match property type names, and the values are those that you want to set. Returns: void Example Use code like this to set several properties on the seeded result record at once: seededRecord.setProperties({ 'property name 1': 'property value', 'property name 2': 4 });"
  },
  "api/i2connect.records.itypedseededresultrecord.setproperty.html": {
    "href": "api/i2connect.records.itypedseededresultrecord.setproperty.html",
    "title": "records.ITypedSeededResultRecord.setProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeededResultRecord > setProperty records.ITypedSeededResultRecord.setProperty() method Sets the value of a property on the result record. Signature: setProperty<TPropertyName extends PropertyTypeDisplayNames<TItemType>>(displayName: TPropertyName, value: data.PropertyValueType<PropertyTypeFromDisplayName<TItemType, TPropertyName>> | undefined): void; Introduced: API version 1.0 Type Parameters Parameter Type Description TPropertyName extends PropertyTypeDisplayNames <TItemType> The type display name, which is inferred from the displayName parameter. Parameters Parameter Type Description displayName TPropertyName The display name of the property type. value data.PropertyValueType <!-- --> < PropertyTypeFromDisplayName <!-- --> <TItemType, TPropertyName>> | undefined The value for the property. Returns: void Remarks This method allows you to set a property on the record, given the display name of its property type from the schema. Example Use code like this to set an individual property on the seeded result record: seededResultRecord.setProperty('property name 1', 'property value'); seededResultRecord.setProperty('property name 2', 4);"
  },
  "api/i2connect.records.itypedseedrecord.getproperty.html": {
    "href": "api/i2connect.records.itypedseedrecord.getproperty.html",
    "title": "records.ITypedSeedRecord.getProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeedRecord > getProperty records.ITypedSeedRecord.getProperty() method Gets the value of the specified property of the seed record. Signature: getProperty(displayName: PropertyTypeDisplayNames<TItemType>): data.PropertyValue | undefined; Introduced: API version 1.0 Parameters Parameter Type Description displayName PropertyTypeDisplayNames <!-- --> <TItemType> The display name of the property type. Returns: data.PropertyValue | undefined The property value."
  },
  "api/i2connect.records.itypedseedrecord.hasproperty.html": {
    "href": "api/i2connect.records.itypedseedrecord.hasproperty.html",
    "title": "records.ITypedSeedRecord.hasProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeedRecord > hasProperty records.ITypedSeedRecord.hasProperty() method Indicates whether the seed record has a property with the specified display name. Signature: hasProperty(displayName: PropertyTypeDisplayNames<TItemType>): boolean; Introduced: API version 1.0 Parameters Parameter Type Description displayName PropertyTypeDisplayNames <!-- --> <TItemType> The display name of the property type. Returns: boolean true if the seed record has a displayName property; false otherwise."
  },
  "api/i2connect.records.itypedseedrecord.html": {
    "href": "api/i2connect.records.itypedseedrecord.html",
    "title": "records.ITypedSeedRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeedRecord records.ITypedSeedRecord interface A seed record of a specific type. Signature: interface ITypedSeedRecord<TItemType extends schema.IItemType> Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The type of the seed record. Methods Method Description getProperty(displayName) Gets the value of the specified property of the seed record. hasProperty(displayName) Indicates whether the seed record has a property with the specified display name."
  },
  "api/i2connect.records.logicaltypevaluetypemap.html": {
    "href": "api/i2connect.records.logicaltypevaluetypemap.html",
    "title": "records.LogicalTypeValueTypeMap type",
    "keywords": "Home > @i2analyze/i2connect > records > LogicalTypeValueTypeMap records.LogicalTypeValueTypeMap type A map of logical type to value types for a particular property type. Signature: type LogicalTypeValueTypeMap<TPropertyType extends schema.IPropertyType> = { singleLineString: string; multipleLineString: string; suggestedFromList: PropertyValuesFromPossibleValues<TPropertyType> | string; selectedFromList: PropertyValuesFromPossibleValues<TPropertyType>; date: data.ISO8601Date; time: data.ISO8601Time; decimal: data.DecimalString; integer: number; double: number; boolean: boolean; dateAndTime: data.DateTime; geospatial: data.IGeoJsonPoint; }; References: schema.IPropertyType <!-- --> , PropertyValuesFromPossibleValues <!-- --> , data.ISO8601Date <!-- --> , data.ISO8601Time <!-- --> , data.DecimalString <!-- --> , data.DateTime <!-- --> , data.IGeoJsonPoint Introduced: API version 1.0 Type Parameters Parameter Type Description TPropertyType extends schema.IPropertyType The property type for which to look up the types."
  },
  "api/i2connect.records.propertytypedisplaynames.html": {
    "href": "api/i2connect.records.propertytypedisplaynames.html",
    "title": "records.PropertyTypeDisplayNames type",
    "keywords": "Home > @i2analyze/i2connect > records > PropertyTypeDisplayNames records.PropertyTypeDisplayNames type A utility type that represents the display names of the property types of a particular item type. Signature: type PropertyTypeDisplayNames<TItemType extends schema.IItemType> = TItemType extends schema.IItemType<infer PropertyTypes> ? keyof PropertyTypes : never; References: schema.IItemType Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The item type to extract property type display names from."
  },
  "api/i2connect.records.propertytypefromdisplayname.html": {
    "href": "api/i2connect.records.propertytypefromdisplayname.html",
    "title": "records.PropertyTypeFromDisplayName type",
    "keywords": "Home > @i2analyze/i2connect > records > PropertyTypeFromDisplayName records.PropertyTypeFromDisplayName type A utility type that represents a property type with a particular display name from a particular item type. Signature: type PropertyTypeFromDisplayName<TItemType extends schema.IItemType, TDisplayName extends PropertyTypeDisplayNames<TItemType>> = TItemType extends schema.IItemType<infer PropertyTypes> ? PropertyTypes[TDisplayName] : never; References: schema.IItemType <!-- --> , PropertyTypeDisplayNames Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The item type that has the property type. TDisplayName extends PropertyTypeDisplayNames <TItemType>"
  },
  "api/i2connect.records.propertyvaluesfrompossiblevalues.html": {
    "href": "api/i2connect.records.propertyvaluesfrompossiblevalues.html",
    "title": "records.PropertyValuesFromPossibleValues type",
    "keywords": "Home > @i2analyze/i2connect > records > PropertyValuesFromPossibleValues records.PropertyValuesFromPossibleValues type A utility type that represents the values from a property type that has possible values. Signature: type PropertyValuesFromPossibleValues<TPropertyType extends schema.IPropertyType> = TPropertyType['possibleValues'] extends ReadonlyArray<{ value: infer U; displayValue: string; }> ? U extends string ? U : never : never; References: schema.IPropertyType Introduced: API version 1.0 Type Parameters Parameter Type Description TPropertyType extends schema.IPropertyType The property type to extract values from."
  },
  "api/i2connect.records.recordproperties.html": {
    "href": "api/i2connect.records.recordproperties.html",
    "title": "records.RecordProperties type",
    "keywords": "Home > @i2analyze/i2connect > records > RecordProperties records.RecordProperties type A set of name-value pairs that contain the type names and values for the properties of a record that has a specific type. Signature: type RecordProperties<TItemType extends schema.IItemType> = { [key in PropertyTypeDisplayNames<TItemType>]?: data.PropertyValueType<PropertyTypeFromDisplayName<TItemType, key>> | undefined; }; References: schema.IItemType <!-- --> , PropertyTypeDisplayNames <!-- --> , data.PropertyValueType <!-- --> , PropertyTypeFromDisplayName Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The type of the record that has these properties."
  },
  "api/i2connect.records.resultrecordid.html": {
    "href": "api/i2connect.records.resultrecordid.html",
    "title": "records.ResultRecordId type",
    "keywords": "Home > @i2analyze/i2connect > records > ResultRecordId records.ResultRecordId type The identifier of a newly created result record. Signature: type ResultRecordId = string; Introduced: API version 1.0"
  },
  "api/i2connect.records.resultrecordidtype.html": {
    "href": "api/i2connect.records.resultrecordidtype.html",
    "title": "records.ResultRecordIdType type",
    "keywords": "Home > @i2analyze/i2connect > records > ResultRecordIdType records.ResultRecordIdType type The type of an identifier for a newly created result record. Signature: type ResultRecordIdType = ResultRecordId | ISourceIdentifier; References: ResultRecordId <!-- --> , ISourceIdentifier Introduced: API version 1.2"
  },
  "api/i2connect.records.seedid.html": {
    "href": "api/i2connect.records.seedid.html",
    "title": "records.SeedId type",
    "keywords": "Home > @i2analyze/i2connect > records > SeedId records.SeedId type The identifier of a seed record. Signature: type SeedId = string; Introduced: API version 1.0"
  },
  "api/i2connect.result.addentity.html": {
    "href": "api/i2connect.result.addentity.html",
    "title": "Result.addEntity() method",
    "keywords": "Home > @i2analyze/i2connect > Result > addEntity Result.addEntity() method Adds a new entity record to the result, whose identifier is a string that you provide. Signature: addEntity<TEntityType extends schema.IEntityType>(type: TEntityType, id: records.ResultRecordId): records.IResultEntityRecord<TEntityType, records.ResultRecordId>; Introduced: API version 1.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the new entity record. Parameters Parameter Type Description type TEntityType The entity type of the new record. id records.ResultRecordId An identifier for the new record. Returns: records.IResultEntityRecord <!-- --> <TEntityType, records.ResultRecordId <!-- --> > The entity record that was added to the result. Remarks The identifier that you provide needs to be unique only for entities of the specified type, from the connector that owns the service."
  },
  "api/i2connect.result.addentityfromseed.html": {
    "href": "api/i2connect.result.addentityfromseed.html",
    "title": "Result.addEntityFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > Result > addEntityFromSeed Result.addEntityFromSeed() method Adds an entity record that was passed to the service as a seed to the result. Signature: addEntityFromSeed<TEntityType extends schema.IEntityType>(seed: records.ISeedEntityRecord & records.ITypedSeedRecord<TEntityType>): records.ISeededResultEntityRecord & records.ITypedSeededResultRecord<TEntityType>; Introduced: API version 1.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the new entity record. Parameters Parameter Type Description seed records.ISeedEntityRecord & records.ITypedSeedRecord <!-- --> <TEntityType> The record that was passed to the service method as a seed. Returns: records.ISeededResultEntityRecord & records.ITypedSeededResultRecord <!-- --> <TEntityType> The record that was added to the result. Remarks When you want to return a seed entity in your result set, use this method in preference to extracting data from the seed and using Result.addEntity() <!-- --> ."
  },
  "api/i2connect.result.addentityfromseed_1.html": {
    "href": "api/i2connect.result.addentityfromseed_1.html",
    "title": "Result.addEntityFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > Result > addEntityFromSeed Result.addEntityFromSeed() method Adds an entity record that was passed to the service as a seed to the result. Signature: addEntityFromSeed(seed: records.ISeedEntityRecord): records.ISeededResultEntityRecord; Introduced: API version 1.0 Parameters Parameter Type Description seed records.ISeedEntityRecord The record that was passed to the service method as a seed. Returns: records.ISeededResultEntityRecord The record that was added to the result. Remarks When you want to return a seed entity in your result set, use this method in preference to extracting data from the seed and using Result.addEntity() <!-- --> ."
  },
  "api/i2connect.result.addentitywithsourceidentifier.html": {
    "href": "api/i2connect.result.addentitywithsourceidentifier.html",
    "title": "Result.addEntityWithSourceIdentifier() method",
    "keywords": "Home > @i2analyze/i2connect > Result > addEntityWithSourceIdentifier Result.addEntityWithSourceIdentifier() method Adds a new entity record to the result, whose identifier is a source identifier that you create. Signature: addEntityWithSourceIdentifier<TEntityType extends schema.IEntityType>(type: TEntityType, id: records.ISourceIdentifier): records.IResultEntityRecord<TEntityType, records.ISourceIdentifier>; Introduced: API version 1.2 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the new entity record. Parameters Parameter Type Description type TEntityType The entity type of the new record. id records.ISourceIdentifier A source identifier for the new record. Returns: records.IResultEntityRecord <!-- --> <TEntityType, records.ISourceIdentifier <!-- --> > The entity record that was added to the result."
  },
  "api/i2connect.result.addlink.html": {
    "href": "api/i2connect.result.addlink.html",
    "title": "Result.addLink() method",
    "keywords": "Home > @i2analyze/i2connect > Result > addLink Result.addLink() method Adds a new link record to the result, whose identifier is a string that you provide. Signature: addLink<TLinkType extends schema.ILinkType, TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord<schema.IEntityType, records.ResultRecordId> | records.IResultEntityRecord<schema.IEntityType, records.ISourceIdentifier>, TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord<schema.IEntityType, records.ResultRecordId> | records.IResultEntityRecord<schema.IEntityType, records.ISourceIdentifier>>(type: TLinkType, id: records.ResultRecordId, fromEnd: TFromEnd, toEnd: TToEnd, direction?: data.LinkDirection): records.IResultLinkRecord<TLinkType, TFromEnd, TToEnd, records.ResultRecordId>; Introduced: API version 1.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the new link record. TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord < schema.IEntityType , records.ResultRecordId > | records.IResultEntityRecord < schema.IEntityType , records.ISourceIdentifier > The type of the entity record at the \"from\" end of the link. TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord < schema.IEntityType , records.ResultRecordId > | records.IResultEntityRecord < schema.IEntityType , records.ISourceIdentifier > The type of the entity record at the \"to\" end of the link. Parameters Parameter Type Description type TLinkType The link type of the new record. id records.ResultRecordId An identifier for the new record. fromEnd TFromEnd The entity record for the \"from\" end of the link, which was previously returned from Result.addEntity() or Result.addEntityFromSeed() <!-- --> . toEnd TToEnd The entity record for the \"to\" end of the link, which was previously returned from Result.addEntity() or Result.addEntityFromSeed() <!-- --> . direction data.LinkDirection The direction of the new link record, which defaults to \"none\" . Returns: records.IResultLinkRecord <!-- --> <TLinkType, TFromEnd, TToEnd, records.ResultRecordId <!-- --> > The link record that was added to the result. Remarks The identifier that you provide needs to be unique only for links of the specified type, from the connector that owns the service. If there is no suitable identifier for the link in the data source, you can often construct one from the identifiers of the \"from\" and \"to\" ends. If there might be more than one link between the same two entities, you will need to add extra identifying information. For example, for a link that represents a financial transaction, you might include a timestamp and perhaps also the amount."
  },
  "api/i2connect.result.addlinkfromseed.html": {
    "href": "api/i2connect.result.addlinkfromseed.html",
    "title": "Result.addLinkFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > Result > addLinkFromSeed Result.addLinkFromSeed() method Adds a link record that was passed to the service as a seed to the result. Signature: addLinkFromSeed<TLinkType extends schema.ILinkType>(seed: records.ISeedLinkRecord & records.ITypedSeedRecord<TLinkType>): records.ISeededResultLinkRecord & records.ITypedSeededResultRecord<TLinkType>; Introduced: API version 1.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the new link record. Parameters Parameter Type Description seed records.ISeedLinkRecord & records.ITypedSeedRecord <!-- --> <TLinkType> The link record that was passed to the service method as a seed. Returns: records.ISeededResultLinkRecord & records.ITypedSeededResultRecord <!-- --> <TLinkType> The link record that was added to the result."
  },
  "api/i2connect.result.addlinkfromseed_1.html": {
    "href": "api/i2connect.result.addlinkfromseed_1.html",
    "title": "Result.addLinkFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > Result > addLinkFromSeed Result.addLinkFromSeed() method Adds a link record that was passed to the service as a seed to the result. Signature: addLinkFromSeed(seed: records.ISeedLinkRecord): records.ISeededResultLinkRecord; Introduced: API version 1.0 Parameters Parameter Type Description seed records.ISeedLinkRecord The link record that was passed to the service method as a seed. Returns: records.ISeededResultLinkRecord The link record that was added to the result."
  },
  "api/i2connect.result.addlinkwithsourceidentifier.html": {
    "href": "api/i2connect.result.addlinkwithsourceidentifier.html",
    "title": "Result.addLinkWithSourceIdentifier() method",
    "keywords": "Home > @i2analyze/i2connect > Result > addLinkWithSourceIdentifier Result.addLinkWithSourceIdentifier() method Adds a new link record to the result, whose identifier is a source identifier that you create. Signature: addLinkWithSourceIdentifier<TLinkType extends schema.ILinkType, TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord<schema.IEntityType, records.ResultRecordId> | records.IResultEntityRecord<schema.IEntityType, records.ISourceIdentifier>, TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord<schema.IEntityType, records.ResultRecordId> | records.IResultEntityRecord<schema.IEntityType, records.ISourceIdentifier>>(type: TLinkType, id: records.ISourceIdentifier, fromEnd: TFromEnd, toEnd: TToEnd, direction?: data.LinkDirection): records.IResultLinkRecord<TLinkType, TFromEnd, TToEnd, records.ISourceIdentifier>; Introduced: API version 1.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the new link record. TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord < schema.IEntityType , records.ResultRecordId > | records.IResultEntityRecord < schema.IEntityType , records.ISourceIdentifier > The type of the entity record at the \"from\" end of the link. TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord < schema.IEntityType , records.ResultRecordId > | records.IResultEntityRecord < schema.IEntityType , records.ISourceIdentifier > The type of the entity record at the \"to\" end of the link. Parameters Parameter Type Description type TLinkType The link type of the new record. id records.ISourceIdentifier A source identifier for the new record. fromEnd TFromEnd The entity record for the \"from\" end of the link, which was previously returned from Result.addEntity() or Result.addEntityFromSeed() <!-- --> . toEnd TToEnd The entity record for the \"to\" end of the link, which was previously returned from Result.addEntity() or Result.addEntityFromSeed() <!-- --> . direction data.LinkDirection The direction of the new link record, which defaults to \"none\" . Returns: records.IResultLinkRecord <!-- --> <TLinkType, TFromEnd, TToEnd, records.ISourceIdentifier <!-- --> > The link record that was added to the result."
  },
  "api/i2connect.result.html": {
    "href": "api/i2connect.result.html",
    "title": "Result class",
    "keywords": "Home > @i2analyze/i2connect > Result Result class A result from a service method on a connector for the i2 Connect server. Signature: export declare class Result Introduced: API version 1.0 Methods Method Modifiers Description addEntity(type, id) Adds a new entity record to the result, whose identifier is a string that you provide. addEntityFromSeed(seed) Adds an entity record that was passed to the service as a seed to the result. addEntityFromSeed(seed) Adds an entity record that was passed to the service as a seed to the result. addEntityWithSourceIdentifier(type, id) Adds a new entity record to the result, whose identifier is a source identifier that you create. addLink(type, id, fromEnd, toEnd, direction) Adds a new link record to the result, whose identifier is a string that you provide. addLinkFromSeed(seed) Adds a link record that was passed to the service as a seed to the result. addLinkFromSeed(seed) Adds a link record that was passed to the service as a seed to the result. addLinkWithSourceIdentifier(type, id, fromEnd, toEnd, direction) Adds a new link record to the result, whose identifier is a source identifier that you create."
  },
  "api/i2connect.schema.html": {
    "href": "api/i2connect.schema.html",
    "title": "schema namespace",
    "keywords": "Home > @i2analyze/i2connect > schema schema namespace The members of the schema namespace provide access to the specifications that govern the structure of records in an i2 Connect service. Signature: export declare namespace schema Introduced: API version 1.0 Interfaces Interface Description IEntityType An entity type. IItemType A set of information that is common to all entity and link types. ILinkType A link type. IPossibleValue A possible value for a property whose property type has a string-based logical type. IPropertyType A property type. ISchema An i2 Analyze schema."
  },
  "api/i2connect.schema.ientitytype.html": {
    "href": "api/i2connect.schema.ientitytype.html",
    "title": "schema.IEntityType interface",
    "keywords": "Home > @i2analyze/i2connect > schema > IEntityType schema.IEntityType interface An entity type. Signature: interface IEntityType extends IItemType Extends: IItemType Introduced: API version 1.0 Properties Property Type Description id string Gets the identifier of the item type. (Inherited from IItemType <!-- --> ) isLink false Indicates that the item type is an entity type. propertyTypes TPropertyTypes Gets all the property types of the item type. (Inherited from IItemType <!-- --> )"
  },
  "api/i2connect.schema.ientitytype.islink.html": {
    "href": "api/i2connect.schema.ientitytype.islink.html",
    "title": "schema.IEntityType.isLink property",
    "keywords": "Home > @i2analyze/i2connect > schema > IEntityType > isLink schema.IEntityType.isLink property Indicates that the item type is an entity type. Signature: readonly isLink: false; Returns: false Introduced: API version 1.0"
  },
  "api/i2connect.schema.iitemtype.html": {
    "href": "api/i2connect.schema.iitemtype.html",
    "title": "schema.IItemType interface",
    "keywords": "Home > @i2analyze/i2connect > schema > IItemType schema.IItemType interface A set of information that is common to all entity and link types. Signature: interface IItemType<TPropertyTypes = Record<string, IPropertyType>> Introduced: API version 1.0 Type Parameters Parameter Type Description TPropertyTypes any (default: Record<string, IPropertyType >) The types of the properties of a record that has the item type. Properties Property Type Description id string Gets the identifier of the item type. propertyTypes TPropertyTypes Gets all the property types of the item type."
  },
  "api/i2connect.schema.iitemtype.id.html": {
    "href": "api/i2connect.schema.iitemtype.id.html",
    "title": "schema.IItemType.id property",
    "keywords": "Home > @i2analyze/i2connect > schema > IItemType > id schema.IItemType.id property Gets the identifier of the item type. Signature: readonly id: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.schema.iitemtype.propertytypes.html": {
    "href": "api/i2connect.schema.iitemtype.propertytypes.html",
    "title": "schema.IItemType.propertyTypes property",
    "keywords": "Home > @i2analyze/i2connect > schema > IItemType > propertyTypes schema.IItemType.propertyTypes property Gets all the property types of the item type. Signature: readonly propertyTypes: TPropertyTypes; Returns: TPropertyTypes Introduced: API version 1.0"
  },
  "api/i2connect.schema.ilinktype.html": {
    "href": "api/i2connect.schema.ilinktype.html",
    "title": "schema.ILinkType interface",
    "keywords": "Home > @i2analyze/i2connect > schema > ILinkType schema.ILinkType interface A link type. Signature: interface ILinkType extends IItemType Extends: IItemType Introduced: API version 1.0 Properties Property Type Description id string Gets the identifier of the item type. (Inherited from IItemType <!-- --> ) isLink true Indicates that the item type is a link type. propertyTypes TPropertyTypes Gets all the property types of the item type. (Inherited from IItemType <!-- --> )"
  },
  "api/i2connect.schema.ilinktype.islink.html": {
    "href": "api/i2connect.schema.ilinktype.islink.html",
    "title": "schema.ILinkType.isLink property",
    "keywords": "Home > @i2analyze/i2connect > schema > ILinkType > isLink schema.ILinkType.isLink property Indicates that the item type is a link type. Signature: readonly isLink: true; Returns: true Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipossiblevalue.displayvalue.html": {
    "href": "api/i2connect.schema.ipossiblevalue.displayvalue.html",
    "title": "schema.IPossibleValue.displayValue property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPossibleValue > displayValue schema.IPossibleValue.displayValue property Gets the possible value in a form that is suitable for display. Signature: readonly displayValue: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipossiblevalue.html": {
    "href": "api/i2connect.schema.ipossiblevalue.html",
    "title": "schema.IPossibleValue interface",
    "keywords": "Home > @i2analyze/i2connect > schema > IPossibleValue schema.IPossibleValue interface A possible value for a property whose property type has a string-based logical type. Signature: interface IPossibleValue Introduced: API version 1.0 Properties Property Type Description displayValue string Gets the possible value in a form that is suitable for display. value string Gets the possible value."
  },
  "api/i2connect.schema.ipossiblevalue.value.html": {
    "href": "api/i2connect.schema.ipossiblevalue.value.html",
    "title": "schema.IPossibleValue.value property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPossibleValue > value schema.IPossibleValue.value property Gets the possible value. Signature: readonly value: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipropertytype.html": {
    "href": "api/i2connect.schema.ipropertytype.html",
    "title": "schema.IPropertyType interface",
    "keywords": "Home > @i2analyze/i2connect > schema > IPropertyType schema.IPropertyType interface A property type. Signature: interface IPropertyType Introduced: API version 1.0 Properties Property Type Description id string Gets the identifier of the property type. logicalType data.LogicalType Gets the logical type of the value of a property that has the property type. possibleValues? readonly IPossibleValue <!-- --> [] (Optional) Gets the possible values that the property type defines, which are present only when logicalType is suggestedFromList or selectedFromList ."
  },
  "api/i2connect.schema.ipropertytype.id.html": {
    "href": "api/i2connect.schema.ipropertytype.id.html",
    "title": "schema.IPropertyType.id property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPropertyType > id schema.IPropertyType.id property Gets the identifier of the property type. Signature: readonly id: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipropertytype.logicaltype.html": {
    "href": "api/i2connect.schema.ipropertytype.logicaltype.html",
    "title": "schema.IPropertyType.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPropertyType > logicalType schema.IPropertyType.logicalType property Gets the logical type of the value of a property that has the property type. Signature: readonly logicalType: data.LogicalType; Returns: data.LogicalType Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipropertytype.possiblevalues.html": {
    "href": "api/i2connect.schema.ipropertytype.possiblevalues.html",
    "title": "schema.IPropertyType.possibleValues property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPropertyType > possibleValues schema.IPropertyType.possibleValues property Gets the possible values that the property type defines, which are present only when logicalType is suggestedFromList or selectedFromList <!-- --> . Signature: readonly possibleValues?: readonly IPossibleValue[]; Returns: readonly IPossibleValue [] Introduced: API version 1.0"
  },
  "api/i2connect.schema.ischema.entitytypes.html": {
    "href": "api/i2connect.schema.ischema.entitytypes.html",
    "title": "schema.ISchema.entityTypes property",
    "keywords": "Home > @i2analyze/i2connect > schema > ISchema > entityTypes schema.ISchema.entityTypes property Gets the entity types that the schema defines. Signature: readonly entityTypes: Record<string, schema.IEntityType>; Returns: Record<string, schema.IEntityType > Introduced: API version 1.0"
  },
  "api/i2connect.schema.ischema.html": {
    "href": "api/i2connect.schema.ischema.html",
    "title": "schema.ISchema interface",
    "keywords": "Home > @i2analyze/i2connect > schema > ISchema schema.ISchema interface An i2 Analyze schema. Signature: interface ISchema Introduced: API version 1.0 Properties Property Type Description entityTypes Record<string, schema.IEntityType <!-- --> > Gets the entity types that the schema defines. linkTypes Record<string, schema.ILinkType <!-- --> > Gets the link types that the schema defines."
  },
  "api/i2connect.schema.ischema.linktypes.html": {
    "href": "api/i2connect.schema.ischema.linktypes.html",
    "title": "schema.ISchema.linkTypes property",
    "keywords": "Home > @i2analyze/i2connect > schema > ISchema > linkTypes schema.ISchema.linkTypes property Gets the link types that the schema defines. Signature: readonly linkTypes: Record<string, schema.ILinkType>; Returns: Record<string, schema.ILinkType > Introduced: API version 1.0"
  },
  "api/i2connect.seeds.html": {
    "href": "api/i2connect.seeds.html",
    "title": "seeds() function",
    "keywords": "Home > @i2analyze/i2connect > seeds seeds() function The @seeds decorator, which configures a service method parameter to receive records to use as seeds. Signature: export declare function seeds(constraints: services.ISeedConstraints<schema.IEntityType> | services.ISeedConstraints<schema.ILinkType>): ParameterDecorator; Introduced: API version 1.0 Parameters Parameter Type Description constraints services.ISeedConstraints <!-- --> < schema.IEntityType <!-- --> > | services.ISeedConstraints <!-- --> < schema.ILinkType <!-- --> > Constraints on the records that can be passed as seeds to the service. Returns: ParameterDecorator Remarks To make your service code simpler, try to constrain the seeds as strongly as you can."
  },
  "api/i2connect.server.html": {
    "href": "api/i2connect.server.html",
    "title": "Server class",
    "keywords": "Home > @i2analyze/i2connect > Server Server class The i2 Connect server. Signature: export declare class Server Introduced: API version 1.0 Methods Method Modifiers Description start(directory) static Starts the i2 Connect server."
  },
  "api/i2connect.server.start.html": {
    "href": "api/i2connect.server.start.html",
    "title": "Server.start() method",
    "keywords": "Home > @i2analyze/i2connect > Server > start Server.start() method Starts the i2 Connect server. Signature: static start(directory: string): void; Introduced: API version 1.0 Parameters Parameter Type Description directory string The full path of the root directory from which the server serves its content. Returns: void"
  },
  "api/i2connect.service.html": {
    "href": "api/i2connect.service.html",
    "title": "service() function",
    "keywords": "Home > @i2analyze/i2connect > service service() function The @service decorator, which configures a method on the connector class to be an i2 Connect service. Signature: export declare function service(config: services.IServiceConfig): MethodDecorator; Introduced: API version 1.0 Parameters Parameter Type Description config services.IServiceConfig Settings that determine the name and description of the service that users see, and some aspects of its behavior. Returns: MethodDecorator Example @service({ name: \"Find IP address\" }) async findIPAddresses(...)"
  },
  "api/i2connect.services.charlimitunits.html": {
    "href": "api/i2connect.services.charlimitunits.html",
    "title": "services.CharLimitUnits type",
    "keywords": "Home > @i2analyze/i2connect > services > CharLimitUnits services.CharLimitUnits type The units to use in constraints on the length of string values. Signature: type CharLimitUnits = 'utf8bytes' | 'utf16codeunits'; Introduced: API version 1.0"
  },
  "api/i2connect.services.hidepredicate.html": {
    "href": "api/i2connect.services.hidepredicate.html",
    "title": "services.HidePredicate type",
    "keywords": "Home > @i2analyze/i2connect > services > HidePredicate services.HidePredicate type A function that determines whether a service or condition should be hidden, based on the contents of an IRequestInformation object that it receives. Signature: type HidePredicate = (requestInformation: IRequestInformation) => boolean | Promise<boolean>; References: IRequestInformation Introduced: API version 1.2 Parameters Parameter Description requestInformation Information that the function can use to determine whether the service or condition should be hidden."
  },
  "api/i2connect.services.html": {
    "href": "api/i2connect.services.html",
    "title": "services namespace",
    "keywords": "Home > @i2analyze/i2connect > services services namespace The members of the services namespace define the conditions and constraints that you can place on the parameters of i2 Connect service methods. Signature: export declare namespace services Introduced: API version 1.0 Interfaces Interface Description IBooleanCondition A condition that prompts the user for a Boolean value. ICharLimit A constraint on the length of a string value. IConditionBase A set of information that is common to all service conditions. IDateAndTimeCondition A condition that prompts the user for a date-and-time value. IDateCondition A condition that prompts the user for a date value. IDecimalCondition A condition that prompts the user for a decimal value. IGeospatialAreaCondition A condition that prompts the user for a geospatial area value. IGeospatialCondition A condition that prompts the user for a geospatial value. IItemTypeConstraint A set of constraints that apply to seeds that have a particular item type. IMultiLineStringCondition A condition that prompts the user for a multiple-line string value. INumberCondition A condition that prompts the user for a numeric value. IRequiresPossibleValues A type that indicates that a string condition can present a list of possible values. ISeedConstraints A set of constraints on the records that can be passed as seeds to a service. ISelectedFromCondition A condition that prompts the user to select a value from a list. IServiceConfig A collection of properties that provide the name and configuration for a service. ISingleLineStringCondition A condition that prompts the user for a single-line string value. IStringValidator A constraint on the contents of a string value. ISuggestedFromCondition A condition that prompts the user to provide a value or select one from a list. ISupportsMaxLength A type that indicates that a string condition can impose a length constraint on values. ISupportsStringValidation A type that indicates that a string condition can impose a validation constraint on values. ITimeCondition A condition that prompts the user for a time value. Type Aliases Type Alias Description CharLimitUnits The units to use in constraints on the length of string values. HidePredicate A function that determines whether a service or condition should be hidden, based on the contents of an IRequestInformation object that it receives. ICondition A condition for a service on an i2 Connect connector. RequestSpecificValue A function that returns a value of type T based on the contents of an IRequestInformation object that it receives."
  },
  "api/i2connect.services.ibooleancondition.defaultvalue.html": {
    "href": "api/i2connect.services.ibooleancondition.defaultvalue.html",
    "title": "services.IBooleanCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IBooleanCondition > defaultValue services.IBooleanCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: boolean | RequestSpecificValue<boolean>; Returns: boolean | RequestSpecificValue <boolean> Introduced: API version 1.2"
  },
  "api/i2connect.services.ibooleancondition.html": {
    "href": "api/i2connect.services.ibooleancondition.html",
    "title": "services.IBooleanCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IBooleanCondition services.IBooleanCondition interface A condition that prompts the user for a Boolean value. Signature: interface IBooleanCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? boolean | RequestSpecificValue <!-- --> <boolean> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'boolean' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.ibooleancondition.logicaltype.html": {
    "href": "api/i2connect.services.ibooleancondition.logicaltype.html",
    "title": "services.IBooleanCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IBooleanCondition > logicalType services.IBooleanCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'boolean'; Returns: 'boolean' Introduced: API version 1.0"
  },
  "api/i2connect.services.icharlimit.html": {
    "href": "api/i2connect.services.icharlimit.html",
    "title": "services.ICharLimit interface",
    "keywords": "Home > @i2analyze/i2connect > services > ICharLimit services.ICharLimit interface A constraint on the length of a string value. Signature: interface ICharLimit Introduced: API version 1.0 Properties Property Type Description maxLength number Gets the maximum length of the string. maxLengthUnits CharLimitUnits Gets the units in which to interpret maxLength ."
  },
  "api/i2connect.services.icharlimit.maxlength.html": {
    "href": "api/i2connect.services.icharlimit.maxlength.html",
    "title": "services.ICharLimit.maxLength property",
    "keywords": "Home > @i2analyze/i2connect > services > ICharLimit > maxLength services.ICharLimit.maxLength property Gets the maximum length of the string. Signature: readonly maxLength: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.icharlimit.maxlengthunits.html": {
    "href": "api/i2connect.services.icharlimit.maxlengthunits.html",
    "title": "services.ICharLimit.maxLengthUnits property",
    "keywords": "Home > @i2analyze/i2connect > services > ICharLimit > maxLengthUnits services.ICharLimit.maxLengthUnits property Gets the units in which to interpret maxLength <!-- --> . Signature: readonly maxLengthUnits: CharLimitUnits; Returns: CharLimitUnits Introduced: API version 1.0"
  },
  "api/i2connect.services.icondition.html": {
    "href": "api/i2connect.services.icondition.html",
    "title": "services.ICondition type",
    "keywords": "Home > @i2analyze/i2connect > services > ICondition services.ICondition type A condition for a service on an i2 Connect connector. Signature: type ICondition = ISingleLineStringCondition | IMultiLineStringCondition | ISuggestedFromCondition | ISelectedFromCondition | INumberCondition | IDecimalCondition | IDateCondition | IDateAndTimeCondition | ITimeCondition | IBooleanCondition | IGeospatialCondition | IGeospatialAreaCondition; References: ISingleLineStringCondition <!-- --> , IMultiLineStringCondition <!-- --> , ISuggestedFromCondition <!-- --> , ISelectedFromCondition <!-- --> , INumberCondition <!-- --> , IDecimalCondition <!-- --> , IDateCondition <!-- --> , IDateAndTimeCondition <!-- --> , ITimeCondition <!-- --> , IBooleanCondition <!-- --> , IGeospatialCondition <!-- --> , IGeospatialAreaCondition Introduced: API version 1.0"
  },
  "api/i2connect.services.iconditionbase.description.html": {
    "href": "api/i2connect.services.iconditionbase.description.html",
    "title": "services.IConditionBase.description property",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase > description services.IConditionBase.description property Gets a description of the condition, which might be displayed in the user interface. Signature: readonly description?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.0 Remarks This property has supported a string value since version 1.0. A RequestSpecificValue\\<string\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.iconditionbase.hide.html": {
    "href": "api/i2connect.services.iconditionbase.hide.html",
    "title": "services.IConditionBase.hide property",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase > hide services.IConditionBase.hide property Gets whether the condition should be hidden from the current user, based on information in the request. Signature: readonly hide?: HidePredicate; Returns: HidePredicate Introduced: API version 1.2"
  },
  "api/i2connect.services.iconditionbase.html": {
    "href": "api/i2connect.services.iconditionbase.html",
    "title": "services.IConditionBase interface",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase services.IConditionBase interface A set of information that is common to all service conditions. Signature: interface IConditionBase Introduced: API version 1.0 Properties Property Type Description description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface."
  },
  "api/i2connect.services.iconditionbase.ismandatory.html": {
    "href": "api/i2connect.services.iconditionbase.ismandatory.html",
    "title": "services.IConditionBase.isMandatory property",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase > isMandatory services.IConditionBase.isMandatory property Indicates whether the user must provide a value for the condition before they can use the service. Signature: readonly isMandatory?: boolean; Returns: boolean Introduced: API version 1.0"
  },
  "api/i2connect.services.iconditionbase.label.html": {
    "href": "api/i2connect.services.iconditionbase.label.html",
    "title": "services.IConditionBase.label property",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase > label services.IConditionBase.label property Gets the label for the condition, which is displayed in the user interface. Signature: readonly label: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.0 Remarks This property has supported a string value since version 1.0. A RequestSpecificValue\\<string\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.idateandtimecondition.defaultvalue.html": {
    "href": "api/i2connect.services.idateandtimecondition.defaultvalue.html",
    "title": "services.IDateAndTimeCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IDateAndTimeCondition > defaultValue services.IDateAndTimeCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: data.DateTime | RequestSpecificValue<data.DateTime>; Returns: data.DateTime | RequestSpecificValue < data.DateTime > Introduced: API version 1.2"
  },
  "api/i2connect.services.idateandtimecondition.html": {
    "href": "api/i2connect.services.idateandtimecondition.html",
    "title": "services.IDateAndTimeCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IDateAndTimeCondition services.IDateAndTimeCondition interface A condition that prompts the user for a date-and-time value. Signature: interface IDateAndTimeCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? data.DateTime | RequestSpecificValue <!-- --> < data.DateTime <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'dateAndTime' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.idateandtimecondition.logicaltype.html": {
    "href": "api/i2connect.services.idateandtimecondition.logicaltype.html",
    "title": "services.IDateAndTimeCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IDateAndTimeCondition > logicalType services.IDateAndTimeCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'dateAndTime'; Returns: 'dateAndTime' Introduced: API version 1.0"
  },
  "api/i2connect.services.idatecondition.defaultvalue.html": {
    "href": "api/i2connect.services.idatecondition.defaultvalue.html",
    "title": "services.IDateCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IDateCondition > defaultValue services.IDateCondition.defaultValue property Gets the default value for the condition, in the format \"YYYY-MM-DD\". Signature: readonly defaultValue?: data.ISO8601Date | RequestSpecificValue<data.ISO8601Date>; Returns: data.ISO8601Date | RequestSpecificValue < data.ISO8601Date > Introduced: API version 1.2"
  },
  "api/i2connect.services.idatecondition.html": {
    "href": "api/i2connect.services.idatecondition.html",
    "title": "services.IDateCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IDateCondition services.IDateCondition interface A condition that prompts the user for a date value. Signature: interface IDateCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? data.ISO8601Date | RequestSpecificValue <!-- --> < data.ISO8601Date <!-- --> > (Optional) Gets the default value for the condition, in the format \"YYYY-MM-DD\". description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'date' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.idatecondition.logicaltype.html": {
    "href": "api/i2connect.services.idatecondition.logicaltype.html",
    "title": "services.IDateCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IDateCondition > logicalType services.IDateCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'date'; Returns: 'date' Introduced: API version 1.0"
  },
  "api/i2connect.services.idecimalcondition.defaultvalue.html": {
    "href": "api/i2connect.services.idecimalcondition.defaultvalue.html",
    "title": "services.IDecimalCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IDecimalCondition > defaultValue services.IDecimalCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: data.DecimalString | RequestSpecificValue<data.DecimalString>; Returns: data.DecimalString | RequestSpecificValue < data.DecimalString > Introduced: API version 1.2"
  },
  "api/i2connect.services.idecimalcondition.html": {
    "href": "api/i2connect.services.idecimalcondition.html",
    "title": "services.IDecimalCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IDecimalCondition services.IDecimalCondition interface A condition that prompts the user for a decimal value. Signature: interface IDecimalCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? data.DecimalString | RequestSpecificValue <!-- --> < data.DecimalString <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'decimal' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.idecimalcondition.logicaltype.html": {
    "href": "api/i2connect.services.idecimalcondition.logicaltype.html",
    "title": "services.IDecimalCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IDecimalCondition > logicalType services.IDecimalCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'decimal'; Returns: 'decimal' Introduced: API version 1.0"
  },
  "api/i2connect.services.igeospatialareacondition.defaultvalue.html": {
    "href": "api/i2connect.services.igeospatialareacondition.defaultvalue.html",
    "title": "services.IGeospatialAreaCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialAreaCondition > defaultValue services.IGeospatialAreaCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: data.IGeoJsonFeatureCollection | RequestSpecificValue<data.IGeoJsonFeatureCollection>; Returns: data.IGeoJsonFeatureCollection | RequestSpecificValue < data.IGeoJsonFeatureCollection > Introduced: API version 1.2"
  },
  "api/i2connect.services.igeospatialareacondition.html": {
    "href": "api/i2connect.services.igeospatialareacondition.html",
    "title": "services.IGeospatialAreaCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialAreaCondition services.IGeospatialAreaCondition interface A condition that prompts the user for a geospatial area value. Signature: interface IGeospatialAreaCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.2 Properties Property Type Description defaultValue? data.IGeoJsonFeatureCollection | RequestSpecificValue <!-- --> < data.IGeoJsonFeatureCollection <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'geospatialArea' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.igeospatialareacondition.logicaltype.html": {
    "href": "api/i2connect.services.igeospatialareacondition.logicaltype.html",
    "title": "services.IGeospatialAreaCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialAreaCondition > logicalType services.IGeospatialAreaCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'geospatialArea'; Returns: 'geospatialArea' Introduced: API version 1.2"
  },
  "api/i2connect.services.igeospatialcondition.defaultvalue.html": {
    "href": "api/i2connect.services.igeospatialcondition.defaultvalue.html",
    "title": "services.IGeospatialCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialCondition > defaultValue services.IGeospatialCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: data.IGeoJsonPoint | RequestSpecificValue<data.IGeoJsonPoint>; Returns: data.IGeoJsonPoint | RequestSpecificValue < data.IGeoJsonPoint > Introduced: API version 1.2"
  },
  "api/i2connect.services.igeospatialcondition.html": {
    "href": "api/i2connect.services.igeospatialcondition.html",
    "title": "services.IGeospatialCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialCondition services.IGeospatialCondition interface A condition that prompts the user for a geospatial value. Signature: interface IGeospatialCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? data.IGeoJsonPoint | RequestSpecificValue <!-- --> < data.IGeoJsonPoint <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'geospatial' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.igeospatialcondition.logicaltype.html": {
    "href": "api/i2connect.services.igeospatialcondition.logicaltype.html",
    "title": "services.IGeospatialCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialCondition > logicalType services.IGeospatialCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'geospatial'; Returns: 'geospatial' Introduced: API version 1.0"
  },
  "api/i2connect.services.iitemtypeconstraint.html": {
    "href": "api/i2connect.services.iitemtypeconstraint.html",
    "title": "services.IItemTypeConstraint interface",
    "keywords": "Home > @i2analyze/i2connect > services > IItemTypeConstraint services.IItemTypeConstraint interface A set of constraints that apply to seeds that have a particular item type. Signature: interface IItemTypeConstraint<TItemType extends schema.ILinkType | schema.IEntityType> Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.ILinkType | schema.IEntityType The type of records that make up these seeds - that is, whether they are entities or links. Properties Property Type Description max number Gets the maximum number of seed records that have the item type. min number Gets the minimum number of seed records that have the item type. type TItemType Gets the item type of the seeds to which the constraints apply."
  },
  "api/i2connect.services.iitemtypeconstraint.max.html": {
    "href": "api/i2connect.services.iitemtypeconstraint.max.html",
    "title": "services.IItemTypeConstraint.max property",
    "keywords": "Home > @i2analyze/i2connect > services > IItemTypeConstraint > max services.IItemTypeConstraint.max property Gets the maximum number of seed records that have the item type. Signature: readonly max: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.iitemtypeconstraint.min.html": {
    "href": "api/i2connect.services.iitemtypeconstraint.min.html",
    "title": "services.IItemTypeConstraint.min property",
    "keywords": "Home > @i2analyze/i2connect > services > IItemTypeConstraint > min services.IItemTypeConstraint.min property Gets the minimum number of seed records that have the item type. Signature: readonly min: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.iitemtypeconstraint.type.html": {
    "href": "api/i2connect.services.iitemtypeconstraint.type.html",
    "title": "services.IItemTypeConstraint.type property",
    "keywords": "Home > @i2analyze/i2connect > services > IItemTypeConstraint > type services.IItemTypeConstraint.type property Gets the item type of the seeds to which the constraints apply. Signature: type: TItemType; Returns: TItemType Introduced: API version 1.0"
  },
  "api/i2connect.services.imultilinestringcondition.defaultvalue.html": {
    "href": "api/i2connect.services.imultilinestringcondition.defaultvalue.html",
    "title": "services.IMultiLineStringCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IMultiLineStringCondition > defaultValue services.IMultiLineStringCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.2"
  },
  "api/i2connect.services.imultilinestringcondition.html": {
    "href": "api/i2connect.services.imultilinestringcondition.html",
    "title": "services.IMultiLineStringCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IMultiLineStringCondition services.IMultiLineStringCondition interface A condition that prompts the user for a multiple-line string value. Signature: interface IMultiLineStringCondition extends IConditionBase, ISupportsStringValidation, ISupportsMaxLength Extends: IConditionBase <!-- --> , ISupportsStringValidation <!-- --> , ISupportsMaxLength Introduced: API version 1.0 Properties Property Type Description defaultValue? string | RequestSpecificValue <!-- --> <string> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'multipleLineString' Gets the logical type of values that fulfill the condition. maxStringLength? ICharLimit (Optional) Gets the maximum number of characters that the string can contain. (Inherited from ISupportsMaxLength <!-- --> ) validation? IStringValidator (Optional) Gets the validator to use on the string value. (Inherited from ISupportsStringValidation <!-- --> )"
  },
  "api/i2connect.services.imultilinestringcondition.logicaltype.html": {
    "href": "api/i2connect.services.imultilinestringcondition.logicaltype.html",
    "title": "services.IMultiLineStringCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IMultiLineStringCondition > logicalType services.IMultiLineStringCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'multipleLineString'; Returns: 'multipleLineString' Introduced: API version 1.0"
  },
  "api/i2connect.services.inumbercondition.defaultvalue.html": {
    "href": "api/i2connect.services.inumbercondition.defaultvalue.html",
    "title": "services.INumberCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition > defaultValue services.INumberCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: number | RequestSpecificValue<number>; Returns: number | RequestSpecificValue <number> Introduced: API version 1.2"
  },
  "api/i2connect.services.inumbercondition.html": {
    "href": "api/i2connect.services.inumbercondition.html",
    "title": "services.INumberCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition services.INumberCondition interface A condition that prompts the user for a numeric value. Signature: interface INumberCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? number | RequestSpecificValue <!-- --> <number> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'integer' | 'double' Gets the logical types of values that fulfill the condition. maxValue? number (Optional) Gets the highest value that still fulfills the condition. minValue? number (Optional) Gets the lowest value that still fulfills the condition."
  },
  "api/i2connect.services.inumbercondition.logicaltype.html": {
    "href": "api/i2connect.services.inumbercondition.logicaltype.html",
    "title": "services.INumberCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition > logicalType services.INumberCondition.logicalType property Gets the logical types of values that fulfill the condition. Signature: readonly logicalType: 'integer' | 'double'; Returns: 'integer' | 'double' Introduced: API version 1.0"
  },
  "api/i2connect.services.inumbercondition.maxvalue.html": {
    "href": "api/i2connect.services.inumbercondition.maxvalue.html",
    "title": "services.INumberCondition.maxValue property",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition > maxValue services.INumberCondition.maxValue property Gets the highest value that still fulfills the condition. Signature: readonly maxValue?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.inumbercondition.minvalue.html": {
    "href": "api/i2connect.services.inumbercondition.minvalue.html",
    "title": "services.INumberCondition.minValue property",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition > minValue services.INumberCondition.minValue property Gets the lowest value that still fulfills the condition. Signature: readonly minValue?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.irequirespossiblevalues.html": {
    "href": "api/i2connect.services.irequirespossiblevalues.html",
    "title": "services.IRequiresPossibleValues interface",
    "keywords": "Home > @i2analyze/i2connect > services > IRequiresPossibleValues services.IRequiresPossibleValues interface A type that indicates that a string condition can present a list of possible values. Signature: interface IRequiresPossibleValues Introduced: API version 1.0 Properties Property Type Description possibleValues schema.IPossibleValue <!-- --> [] | RequestSpecificValue <!-- --> < schema.IPossibleValue <!-- --> []> Gets the possible values."
  },
  "api/i2connect.services.irequirespossiblevalues.possiblevalues.html": {
    "href": "api/i2connect.services.irequirespossiblevalues.possiblevalues.html",
    "title": "services.IRequiresPossibleValues.possibleValues property",
    "keywords": "Home > @i2analyze/i2connect > services > IRequiresPossibleValues > possibleValues services.IRequiresPossibleValues.possibleValues property Gets the possible values. Signature: readonly possibleValues: schema.IPossibleValue[] | RequestSpecificValue<schema.IPossibleValue[]>; Returns: schema.IPossibleValue [] | RequestSpecificValue < schema.IPossibleValue []> Introduced: API version 1.0 Remarks This property has supported a schema.IPossibleValue[] value since version 1.0. A RequestSpecificValue\\<schema.IPossibleValue[]\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.iseedconstraints.html": {
    "href": "api/i2connect.services.iseedconstraints.html",
    "title": "services.ISeedConstraints interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints services.ISeedConstraints interface A set of constraints on the records that can be passed as seeds to a service. Signature: interface ISeedConstraints<TItemType extends schema.ILinkType | schema.IEntityType> Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.ILinkType | schema.IEntityType The type of records that can be seeds - that is, whether they are entities or links. Properties Property Type Description max? number (Optional) Gets the maximum total number of seeds. min? number (Optional) Gets the minimum total number of seeds. thisConnectorOnly? boolean (Optional) Indicates whether only records that originate from the service's connector can be seeds. typeConstraints? 'anyEntities' | 'anyLinks' | (TItemType | IItemTypeConstraint <!-- --> <TItemType>)[] (Optional) Gets the constraints on the item types that seeds can have."
  },
  "api/i2connect.services.iseedconstraints.max.html": {
    "href": "api/i2connect.services.iseedconstraints.max.html",
    "title": "services.ISeedConstraints.max property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints > max services.ISeedConstraints.max property Gets the maximum total number of seeds. Signature: readonly max?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.iseedconstraints.min.html": {
    "href": "api/i2connect.services.iseedconstraints.min.html",
    "title": "services.ISeedConstraints.min property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints > min services.ISeedConstraints.min property Gets the minimum total number of seeds. Signature: readonly min?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.iseedconstraints.thisconnectoronly.html": {
    "href": "api/i2connect.services.iseedconstraints.thisconnectoronly.html",
    "title": "services.ISeedConstraints.thisConnectorOnly property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints > thisConnectorOnly services.ISeedConstraints.thisConnectorOnly property Indicates whether only records that originate from the service's connector can be seeds. Signature: readonly thisConnectorOnly?: boolean; Returns: boolean Introduced: API version 1.0"
  },
  "api/i2connect.services.iseedconstraints.typeconstraints.html": {
    "href": "api/i2connect.services.iseedconstraints.typeconstraints.html",
    "title": "services.ISeedConstraints.typeConstraints property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints > typeConstraints services.ISeedConstraints.typeConstraints property Gets the constraints on the item types that seeds can have. Signature: readonly typeConstraints?: 'anyEntities' | 'anyLinks' | (TItemType | IItemTypeConstraint<TItemType>)[]; Returns: 'anyEntities' | 'anyLinks' | (TItemType | IItemTypeConstraint <TItemType>)[] Introduced: API version 1.0 Remarks If you provide no value for typeConstraints <!-- --> , then seeds can have any type. Otherwise, 'anyEntities' means that all seeds must be entity records (of any type), while 'anyLinks' means that all seeds must be link records (of any type). The last option allows you to specify exactly which types seed records can have, and to provide additional constraints if necessary."
  },
  "api/i2connect.services.iselectedfromcondition.defaultvalue.html": {
    "href": "api/i2connect.services.iselectedfromcondition.defaultvalue.html",
    "title": "services.ISelectedFromCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > ISelectedFromCondition > defaultValue services.ISelectedFromCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.2"
  },
  "api/i2connect.services.iselectedfromcondition.html": {
    "href": "api/i2connect.services.iselectedfromcondition.html",
    "title": "services.ISelectedFromCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISelectedFromCondition services.ISelectedFromCondition interface A condition that prompts the user to select a value from a list. Signature: interface ISelectedFromCondition extends IConditionBase, IRequiresPossibleValues Extends: IConditionBase <!-- --> , IRequiresPossibleValues Introduced: API version 1.0 Properties Property Type Description defaultValue? string | RequestSpecificValue <!-- --> <string> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'selectedFromList' Gets the logical type of values that fulfill the condition. possibleValues schema.IPossibleValue <!-- --> [] | RequestSpecificValue <!-- --> < schema.IPossibleValue <!-- --> []> Gets the possible values. (Inherited from IRequiresPossibleValues <!-- --> )"
  },
  "api/i2connect.services.iselectedfromcondition.logicaltype.html": {
    "href": "api/i2connect.services.iselectedfromcondition.logicaltype.html",
    "title": "services.ISelectedFromCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > ISelectedFromCondition > logicalType services.ISelectedFromCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'selectedFromList'; Returns: 'selectedFromList' Introduced: API version 1.0"
  },
  "api/i2connect.services.iserviceconfig.async.html": {
    "href": "api/i2connect.services.iserviceconfig.async.html",
    "title": "services.IServiceConfig.async property",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceConfig > async services.IServiceConfig.async property Indicates whether the service involves a long-running operation. Signature: readonly async?: boolean | { pollingIntervalInSeconds?: number; }; Returns: boolean | { pollingIntervalInSeconds?: number; } Introduced: API version 1.0 Remarks When the property contains a Boolean value, true and false have their traditional meanings. When the property contains an object, the service does involve a long-running operation, and the i2 Analyze server polls it for progress information at the specified interval. A service that is configured with the async setting can also specify the asyncState() decorator on one of its parameters."
  },
  "api/i2connect.services.iserviceconfig.description.html": {
    "href": "api/i2connect.services.iserviceconfig.description.html",
    "title": "services.IServiceConfig.description property",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceConfig > description services.IServiceConfig.description property Gets a description of what the service does, which might be displayed to users. Signature: readonly description?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.0 Remarks This property has supported a string value since version 1.0. A RequestSpecificValue\\<string\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.iserviceconfig.haspersistentresultids.html": {
    "href": "api/i2connect.services.iserviceconfig.haspersistentresultids.html",
    "title": "services.IServiceConfig.hasPersistentResultIds property",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceConfig > hasPersistentResultIds services.IServiceConfig.hasPersistentResultIds property Indicates whether the identifiers of result records from the service are persistent from one call to the next. Signature: readonly hasPersistentResultIds?: boolean; Returns: boolean Introduced: API version 1.0"
  },
  "api/i2connect.services.iserviceconfig.hide.html": {
    "href": "api/i2connect.services.iserviceconfig.hide.html",
    "title": "services.IServiceConfig.hide property",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceConfig > hide services.IServiceConfig.hide property Gets whether the service should be hidden from the current user, based on information in the request. Signature: readonly hide?: HidePredicate; Returns: HidePredicate Introduced: API version 1.2"
  },
  "api/i2connect.services.iserviceconfig.html": {
    "href": "api/i2connect.services.iserviceconfig.html",
    "title": "services.IServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceConfig services.IServiceConfig interface A collection of properties that provide the name and configuration for a service. Signature: interface IServiceConfig Introduced: API version 1.0 Properties Property Type Description async? boolean | { pollingIntervalInSeconds?: number; } (Optional) Indicates whether the service involves a long-running operation. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of what the service does, which might be displayed to users. hasPersistentResultIds? boolean (Optional) Indicates whether the identifiers of result records from the service are persistent from one call to the next. hide? HidePredicate (Optional) Gets whether the service should be hidden from the current user, based on information in the request. name string | RequestSpecificValue <!-- --> <string> Gets the name of the service. resultItemTypes? schema.IItemType <!-- --> [] (Optional) Gets the item types that result records from the service can have."
  },
  "api/i2connect.services.iserviceconfig.name.html": {
    "href": "api/i2connect.services.iserviceconfig.name.html",
    "title": "services.IServiceConfig.name property",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceConfig > name services.IServiceConfig.name property Gets the name of the service. Signature: readonly name: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.0 Remarks This property has supported a string value since version 1.0. A RequestSpecificValue\\<string\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.iserviceconfig.resultitemtypes.html": {
    "href": "api/i2connect.services.iserviceconfig.resultitemtypes.html",
    "title": "services.IServiceConfig.resultItemTypes property",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceConfig > resultItemTypes services.IServiceConfig.resultItemTypes property Gets the item types that result records from the service can have. Signature: readonly resultItemTypes?: schema.IItemType[]; Returns: schema.IItemType [] Introduced: API version 1.0"
  },
  "api/i2connect.services.isinglelinestringcondition.defaultvalue.html": {
    "href": "api/i2connect.services.isinglelinestringcondition.defaultvalue.html",
    "title": "services.ISingleLineStringCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > ISingleLineStringCondition > defaultValue services.ISingleLineStringCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.2"
  },
  "api/i2connect.services.isinglelinestringcondition.html": {
    "href": "api/i2connect.services.isinglelinestringcondition.html",
    "title": "services.ISingleLineStringCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISingleLineStringCondition services.ISingleLineStringCondition interface A condition that prompts the user for a single-line string value. Signature: interface ISingleLineStringCondition extends IConditionBase, ISupportsStringValidation, ISupportsMaxLength Extends: IConditionBase <!-- --> , ISupportsStringValidation <!-- --> , ISupportsMaxLength Introduced: API version 1.0 Properties Property Type Description defaultValue? string | RequestSpecificValue <!-- --> <string> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'singleLineString' Gets the logical type of values that fulfill the condition. maxStringLength? ICharLimit (Optional) Gets the maximum number of characters that the string can contain. (Inherited from ISupportsMaxLength <!-- --> ) validation? IStringValidator (Optional) Gets the validator to use on the string value. (Inherited from ISupportsStringValidation <!-- --> )"
  },
  "api/i2connect.services.isinglelinestringcondition.logicaltype.html": {
    "href": "api/i2connect.services.isinglelinestringcondition.logicaltype.html",
    "title": "services.ISingleLineStringCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > ISingleLineStringCondition > logicalType services.ISingleLineStringCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'singleLineString'; Returns: 'singleLineString' Introduced: API version 1.0"
  },
  "api/i2connect.services.istringvalidator.html": {
    "href": "api/i2connect.services.istringvalidator.html",
    "title": "services.IStringValidator interface",
    "keywords": "Home > @i2analyze/i2connect > services > IStringValidator services.IStringValidator interface A constraint on the contents of a string value. Signature: interface IStringValidator Introduced: API version 1.0 Properties Property Type Description message string Gets the message to display if the string does not match regex . regex string Gets the regular expression that the string must match."
  },
  "api/i2connect.services.istringvalidator.message.html": {
    "href": "api/i2connect.services.istringvalidator.message.html",
    "title": "services.IStringValidator.message property",
    "keywords": "Home > @i2analyze/i2connect > services > IStringValidator > message services.IStringValidator.message property Gets the message to display if the string does not match regex <!-- --> . Signature: readonly message: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.services.istringvalidator.regex.html": {
    "href": "api/i2connect.services.istringvalidator.regex.html",
    "title": "services.IStringValidator.regex property",
    "keywords": "Home > @i2analyze/i2connect > services > IStringValidator > regex services.IStringValidator.regex property Gets the regular expression that the string must match. Signature: readonly regex: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.services.isuggestedfromcondition.defaultvalue.html": {
    "href": "api/i2connect.services.isuggestedfromcondition.defaultvalue.html",
    "title": "services.ISuggestedFromCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > ISuggestedFromCondition > defaultValue services.ISuggestedFromCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.2"
  },
  "api/i2connect.services.isuggestedfromcondition.html": {
    "href": "api/i2connect.services.isuggestedfromcondition.html",
    "title": "services.ISuggestedFromCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISuggestedFromCondition services.ISuggestedFromCondition interface A condition that prompts the user to provide a value or select one from a list. Signature: interface ISuggestedFromCondition extends IConditionBase, IRequiresPossibleValues Extends: IConditionBase <!-- --> , IRequiresPossibleValues Introduced: API version 1.0 Properties Property Type Description defaultValue? string | RequestSpecificValue <!-- --> <string> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'suggestedFromList' Gets the logical type of values that fulfill the condition. possibleValues schema.IPossibleValue <!-- --> [] | RequestSpecificValue <!-- --> < schema.IPossibleValue <!-- --> []> Gets the possible values. (Inherited from IRequiresPossibleValues <!-- --> )"
  },
  "api/i2connect.services.isuggestedfromcondition.logicaltype.html": {
    "href": "api/i2connect.services.isuggestedfromcondition.logicaltype.html",
    "title": "services.ISuggestedFromCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > ISuggestedFromCondition > logicalType services.ISuggestedFromCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'suggestedFromList'; Returns: 'suggestedFromList' Introduced: API version 1.0"
  },
  "api/i2connect.services.isupportsmaxlength.html": {
    "href": "api/i2connect.services.isupportsmaxlength.html",
    "title": "services.ISupportsMaxLength interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISupportsMaxLength services.ISupportsMaxLength interface A type that indicates that a string condition can impose a length constraint on values. Signature: interface ISupportsMaxLength Introduced: API version 1.0 Properties Property Type Description maxStringLength? ICharLimit (Optional) Gets the maximum number of characters that the string can contain."
  },
  "api/i2connect.services.isupportsmaxlength.maxstringlength.html": {
    "href": "api/i2connect.services.isupportsmaxlength.maxstringlength.html",
    "title": "services.ISupportsMaxLength.maxStringLength property",
    "keywords": "Home > @i2analyze/i2connect > services > ISupportsMaxLength > maxStringLength services.ISupportsMaxLength.maxStringLength property Gets the maximum number of characters that the string can contain. Signature: readonly maxStringLength?: ICharLimit; Returns: ICharLimit Introduced: API version 1.0"
  },
  "api/i2connect.services.isupportsstringvalidation.html": {
    "href": "api/i2connect.services.isupportsstringvalidation.html",
    "title": "services.ISupportsStringValidation interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISupportsStringValidation services.ISupportsStringValidation interface A type that indicates that a string condition can impose a validation constraint on values. Signature: interface ISupportsStringValidation Introduced: API version 1.0 Properties Property Type Description validation? IStringValidator (Optional) Gets the validator to use on the string value."
  },
  "api/i2connect.services.isupportsstringvalidation.validation.html": {
    "href": "api/i2connect.services.isupportsstringvalidation.validation.html",
    "title": "services.ISupportsStringValidation.validation property",
    "keywords": "Home > @i2analyze/i2connect > services > ISupportsStringValidation > validation services.ISupportsStringValidation.validation property Gets the validator to use on the string value. Signature: readonly validation?: IStringValidator; Returns: IStringValidator Introduced: API version 1.0"
  },
  "api/i2connect.services.itimecondition.defaultvalue.html": {
    "href": "api/i2connect.services.itimecondition.defaultvalue.html",
    "title": "services.ITimeCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > ITimeCondition > defaultValue services.ITimeCondition.defaultValue property Gets the default value for the condition, in the format \"HH:MM:SS.mmm\". Signature: readonly defaultValue?: data.ISO8601Time | RequestSpecificValue<data.ISO8601Time>; Returns: data.ISO8601Time | RequestSpecificValue < data.ISO8601Time > Introduced: API version 1.2"
  },
  "api/i2connect.services.itimecondition.html": {
    "href": "api/i2connect.services.itimecondition.html",
    "title": "services.ITimeCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > ITimeCondition services.ITimeCondition interface A condition that prompts the user for a time value. Signature: interface ITimeCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? data.ISO8601Time | RequestSpecificValue <!-- --> < data.ISO8601Time <!-- --> > (Optional) Gets the default value for the condition, in the format \"HH:MM:SS.mmm\". description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'time' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.itimecondition.logicaltype.html": {
    "href": "api/i2connect.services.itimecondition.logicaltype.html",
    "title": "services.ITimeCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > ITimeCondition > logicalType services.ITimeCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'time'; Returns: 'time' Introduced: API version 1.0"
  },
  "api/i2connect.services.requestspecificvalue.html": {
    "href": "api/i2connect.services.requestspecificvalue.html",
    "title": "services.RequestSpecificValue type",
    "keywords": "Home > @i2analyze/i2connect > services > RequestSpecificValue services.RequestSpecificValue type A function that returns a value of type T based on the contents of an IRequestInformation object that it receives. Signature: type RequestSpecificValue<T> = (requestInformation: IRequestInformation) => T | Promise<T>; References: IRequestInformation Introduced: API version 1.2 Parameters Parameter Description requestInformation Information that the function can use to determine what value to return. Type Parameters Parameter Type Description T any The type of the value."
  },
  "api/i2connect.substatustype.html": {
    "href": "api/i2connect.substatustype.html",
    "title": "SubstatusType type",
    "keywords": "Home > @i2analyze/i2connect > SubstatusType SubstatusType type A type for a piece of substatus information. Signature: export declare type SubstatusType = 'success' | 'information' | 'warning' | 'error'; Introduced: API version 1.0"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference",
    "keywords": "Home API Reference Packages Package Description @i2analyze/i2connect The i2 Connect Server package, which contains all the functionality you need to create connectors for the i2 Connect server."
  },
  "guide/debugging-connectors.html": {
    "href": "guide/debugging-connectors.html",
    "title": "Debugging connectors",
    "keywords": "Debugging connectors During development, you can debug your connector with Visual Studio Code's built-in debugger. The project adds two commands to the user interface. Start i2 Connect development server and debug starts the i2 Connect server and its connector, and launches the debugger at the same time. When you use this command, you don't need to run \" npm start \" before you start debugging. Attach to i2 Connect development server assumes that you have already run \" npm start \", and attaches the debugger to that process. Changing the debug port By default, debugging takes place on port 9229. To override this setting: Add a command-line option to the start script in package.json . For example: \"scripts\": { \"start\": \"i2connect-scripts start --inspect=5858\" } Note: For more details, see https://nodejs.org/en/docs/guides/debugging-getting-started/#command-line-options . In .vscode/launch.json , update the \"port\" field to match the number you specified in the script."
  },
  "guide/deploying-connectors.html": {
    "href": "guide/deploying-connectors.html",
    "title": "Deploying connectors",
    "keywords": "Deploying connectors To deploy your connectors to a production instance of i2 Analyze that includes the i2 Connect gateway, the SDK includes commands for: Building the connectors without starting the server Starting the server and its connectors as they were last built To build the connectors and do nothing else: npm run build To serve connectors that have already been built: npm run serve When you deploy to a production instance of i2 Analyze, you must ensure that the target system's command access control settings are configured so that its users can see your connector. The procedure for doing so is the same as it is during development and testing ."
  },
  "guide/developing-connectors.html": {
    "href": "guide/developing-connectors.html",
    "title": "Developing connectors",
    "keywords": "Developing connectors When you use the create-i2connect-server package to bootstrap a project, the resulting directory contains the i2 Connect server and a skeleton connector that you can use as a starting point for your own connectors. Running the server during development After bootstrapping, the server and its connector are ready to run with no modifications. To run the server in development mode: At a command prompt, navigate to the project directory and install the packages that the server requires: npm install Then, start the server, and build and start its connector: npm start In this mode, the server monitors the project source files for changes, and rebuilds the connector when necessary. Configuring i2 Analyze to use the connector To add your connector to an instance of i2 Analyze that includes the i2 Connect gateway, you can follow the general procedure for modifying the topology.xml file and updating the configuration , with some small modifications: When you add the <connector-id> child element, the identifier that you provide must match the name of the class that implements the connector: <connector-ids> <connector-id value=\"ClassName\"/> </connector-ids> In the <connector> element, the i2 Connect server uses the HTTP protocol and port 3000 by default, and the connector identifier forms part of the configuration URL: <connectors> <connector id=\"ClassName\" name=\"ConnectorName\" base-url=\"http://HostName:3000\" configuration-url=\"ClassName/config\"/> </connectors> When you restart the i2 Analyze server, the i2 Connect gateway retrieves configuration information from this connector in the same way as for any other connector. Note: In order for an user to see the new connector in their web or desktop client application, they must be a member of a group that has appropriate connector permissions under command access control. Adding a connector to the i2 Connect server The create-i2connect-server package generates a single connector alongside the i2 Connect server. You can add another connector to the same project by running this command: npm run i2connect generate connector <name> In a project that contains more than one connector, any build, start, or debug operation applies to all connectors simultaneously. Running lint on connector code The i2 Connect server includes the facility to run lint over your project source files with the following command: npm run i2connect lint"
  },
  "guide/distribute-connector.html": {
    "href": "guide/distribute-connector.html",
    "title": "Targeting a containerized instance of i2 Analyze",
    "keywords": "Targeting a containerized instance of i2 Analyze When your target instance of i2 Analyze is a containerized environment, the connectors that you develop must conform to the following additional requirements: Any connector-specific configuration must take place in a single file named connector.config.json . To separate the configuration from any secrets that your connector requires, store API keys or user credentials in a single file named connector.secrets.json . Containerized instances of i2 Analyze support running only one connector per i2 Connect server. Packaging a connector To package your connector for use with a containerized instance of i2 Analyze, complete the following steps: Build the project for deployment in the usual way : npm run build Then, create a package that contains the connector: npm pack This command creates a .tgz file that you can use to distribute your connector. The name of the file is determined by the name and version declared in the package.json file. Distributing a connector After you package your connector, you must make it available to be deployed with i2 Analyze. The person that deploys i2 Analyze and any connectors might not be the same person that develops the connector, so you must implement a process for providing the person who deploys i2 Analyze with your .tgz file. To maintain a release history of the connector, you might use a source control system such as Github to manage your connector source and also to release the package. The person who deploys the connector also needs to know the path to any configuration or secrets .json files, and whether the connector requires a specific connector identifier when it is deployed. For more information about creating GitHub releases and adding binary files to a release, see Creating a release ."
  },
  "guide/getting-started.html": {
    "href": "guide/getting-started.html",
    "title": "Getting started",
    "keywords": "Getting started The i2 Connect server that hosts your connectors depends on version 14 (or above) of the Node.js run-time environment. You can download and install Node.js from the project website . To create an i2 Connect server, use either of the following commands: npm npm init @i2analyze/i2connect-server <project-directory> yarn yarn create @i2analyze/i2connect-server <project-directory> Both commands create a directory at the specified location, generate the initial project structure, and install the transitive dependencies."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome!",
    "keywords": "Welcome! Welcome to the documentation for the i2 Connect SDK. At this version of the SDK, the documentation includes information on how to start developing and deploying connectors, alongside the sample projects and the API reference. To view the i2 Connect Server API reference documentation, use the Server API tab at the top of the page. You can get started with the sample projects from the main branch of this repository. Compatibility Each new version of the i2 Connect SDK adds features and functionality. The following table shows the relationship between a version of the SDK and the version of i2 Analyze in which its new features are available: <!-- Be sure to update the i2connect/README.md file's version of this compatibility table when you change this one --> i2 Connect SDK version i2 Analyze version 1.1 and earlier 4.3.4.0 1.2 4.3.5.0 Unless features are deprecated, connectors created using earlier versions of the SDK are compatible with later versions of i2 Analyze. For the best experience, try to keep the version of the SDK that you use for development in step with the version of the target i2 Analyze deployment."
  }
}