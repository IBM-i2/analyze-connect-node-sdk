{
  "api/i2connect.addservice.html": {
    "href": "api/i2connect.addservice.html",
    "title": "addService() function",
    "keywords": "Home > @i2analyze/i2connect > addService addService() function Adds a service that provides an acquire callback to the connector. Signature: export declare function addService<TServiceConfig extends services.IServiceConfigType>(config: TServiceConfig, acquire: utility.ServiceAcquireCallback<TServiceConfig>): void; Introduced: API version 2.0 Type Parameters Parameter Type Description TServiceConfig extends services.IServiceConfigType The type of the service configuration. Parameters Parameter Type Description config TServiceConfig The service configuration, which determines the name and description of the service that users see, and some aspects of its behavior. acquire utility.ServiceAcquireCallback <!-- --> <TServiceConfig> The acquire callback. Returns: void"
  },
  "api/i2connect.addservice_1.html": {
    "href": "api/i2connect.addservice_1.html",
    "title": "addService() function",
    "keywords": "Home > @i2analyze/i2connect > addService addService() function Adds a service that provides an acquire callback and an optional validate callback to the connector. Signature: export declare function addService<TServiceConfig extends services.IServiceConfigType>(config: TServiceConfig, callbacks: services.IServiceCallbacks<TServiceConfig>): void; Introduced: API version 2.0 Type Parameters Parameter Type Description TServiceConfig extends services.IServiceConfigType The type of the service configuration. Parameters Parameter Type Description config TServiceConfig The service configuration, which determines the name and description of the service that users see, and some aspects of its behavior. callbacks services.IServiceCallbacks <!-- --> <TServiceConfig> An object that contains the callbacks. Returns: void"
  },
  "api/i2connect.addvisualqueryservice.html": {
    "href": "api/i2connect.addvisualqueryservice.html",
    "title": "addVisualQueryService() function",
    "keywords": "Home > @i2analyze/i2connect > addVisualQueryService addVisualQueryService() function Adds a visual query service that provides an acquire callback to the connector. Signature: export declare function addVisualQueryService<TServiceConfig extends services.IVisualQueryServiceConfig>(config: TServiceConfig, acquire: utility.VisualQueryServiceAcquireCallback<TServiceConfig>): void; Introduced: API version 2.3 Type Parameters Parameter Type Description TServiceConfig extends services.IVisualQueryServiceConfig The type of the service configuration. Parameters Parameter Type Description config TServiceConfig The service configuration, which determines the name and description of the service that users see, and some aspects of its behavior. acquire utility.VisualQueryServiceAcquireCallback <!-- --> <TServiceConfig> The acquire callback. Returns: void"
  },
  "api/i2connect.addvisualqueryservice_1.html": {
    "href": "api/i2connect.addvisualqueryservice_1.html",
    "title": "addVisualQueryService() function",
    "keywords": "Home > @i2analyze/i2connect > addVisualQueryService addVisualQueryService() function Adds a visual query service that provides an acquire callback and an optional validate callback to the connector. Signature: export declare function addVisualQueryService<TServiceConfig extends services.IVisualQueryServiceConfig>(config: TServiceConfig, callbacks: services.IVisualQueryServiceCallbacks<TServiceConfig>): void; Introduced: API version 2.3 Type Parameters Parameter Type Description TServiceConfig extends services.IVisualQueryServiceConfig The type of the service configuration. Parameters Parameter Type Description config TServiceConfig The service configuration, which determines the name and description of the service that users see, and some aspects of its behavior. callbacks services.IVisualQueryServiceCallbacks <!-- --> <TServiceConfig> An object that contains the callbacks. Returns: void"
  },
  "api/i2connect.authenticationrequirederror._constructor_.html": {
    "href": "api/i2connect.authenticationrequirederror._constructor_.html",
    "title": "AuthenticationRequiredError.(constructor)",
    "keywords": "Home > @i2analyze/i2connect > AuthenticationRequiredError > (constructor) AuthenticationRequiredError.(constructor) Constructs a new instance of the AuthenticationRequiredError class. Signature: constructor(data?: Omit<IDetailedErrorData, 'type'>); Introduced: API version 1.0 Parameters Parameter Type Description data Omit< IDetailedErrorData <!-- --> , 'type'> (Optional) Detailed information about the authentication requirement."
  },
  "api/i2connect.authenticationrequirederror.html": {
    "href": "api/i2connect.authenticationrequirederror.html",
    "title": "AuthenticationRequiredError class",
    "keywords": "Home > @i2analyze/i2connect > AuthenticationRequiredError AuthenticationRequiredError class An error indicating that authentication is required. Signature: export declare class AuthenticationRequiredError extends DetailedError Extends: DetailedError Introduced: API version 1.0 Remarks Error objects can optionally be constructed with detailed error information. Constructors Constructor Modifiers Description (constructor)(data) Constructs a new instance of the AuthenticationRequiredError class."
  },
  "api/i2connect.connectors.html": {
    "href": "api/i2connect.connectors.html",
    "title": "connectors namespace",
    "keywords": "Home > @i2analyze/i2connect > connectors connectors namespace The members of the connectors namespace allow you to configure the connectors that you create for the i2 Connect server. Signature: export declare namespace connectors Introduced: API version 1.0 Interfaces Interface Description IConnectorConfig A collection of properties that provide the name and configuration for a connector. IConnectorSchema A connector schema. ISchemas A container for the schemas that a connector uses."
  },
  "api/i2connect.connectors.iconnectorconfig.haspersistentresultids.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.haspersistentresultids.html",
    "title": "connectors.IConnectorConfig.hasPersistentResultIds property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig > hasPersistentResultIds connectors.IConnectorConfig.hasPersistentResultIds property Indicates whether the identifiers of result records are persistent from one query to the next. Signature: readonly hasPersistentResultIds?: boolean; Returns: boolean Default value: false Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorconfig.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.html",
    "title": "connectors.IConnectorConfig interface",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig connectors.IConnectorConfig interface A collection of properties that provide the name and configuration for a connector. Signature: interface IConnectorConfig Introduced: API version 1.0 Properties Property Type Description hasPersistentResultIds? boolean (Optional) Indicates whether the identifiers of result records are persistent from one query to the next. linkDirection? data.LinkDirection (Optional) Gets the link direction that applies to all data from the connector, unless overridden by a service. schemas? ISchemas (Optional) Gets the schemas that define the types of records that appear in results from the connector. timeZoneId? string (Optional) Gets the identifier of the time zone that applies to all data from the connector, unless overridden by a service."
  },
  "api/i2connect.connectors.iconnectorconfig.linkdirection.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.linkdirection.html",
    "title": "connectors.IConnectorConfig.linkDirection property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig > linkDirection connectors.IConnectorConfig.linkDirection property Gets the link direction that applies to all data from the connector, unless overridden by a service. Signature: readonly linkDirection?: data.LinkDirection; Returns: data.LinkDirection Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorconfig.schemas.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.schemas.html",
    "title": "connectors.IConnectorConfig.schemas property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig > schemas connectors.IConnectorConfig.schemas property Gets the schemas that define the types of records that appear in results from the connector. Signature: readonly schemas?: ISchemas; Returns: ISchemas Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorconfig.timezoneid.html": {
    "href": "api/i2connect.connectors.iconnectorconfig.timezoneid.html",
    "title": "connectors.IConnectorConfig.timeZoneId property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorConfig > timeZoneId connectors.IConnectorConfig.timeZoneId property Gets the identifier of the time zone that applies to all data from the connector, unless overridden by a service. Signature: readonly timeZoneId?: string; Returns: string Introduced: API version 1.0 Remarks If not specified the time zone will be set to \"UTC\"."
  },
  "api/i2connect.connectors.iconnectorschema.chartingschemepath.html": {
    "href": "api/i2connect.connectors.iconnectorschema.chartingschemepath.html",
    "title": "connectors.IConnectorSchema.chartingSchemePath property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorSchema > chartingSchemePath connectors.IConnectorSchema.chartingSchemePath property Gets the full path to the charting scheme file. Signature: readonly chartingSchemePath?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorschema.html": {
    "href": "api/i2connect.connectors.iconnectorschema.html",
    "title": "connectors.IConnectorSchema interface",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorSchema connectors.IConnectorSchema interface A connector schema. Signature: interface IConnectorSchema extends schema.ISchema Extends: schema.ISchema Introduced: API version 1.0 Properties Property Type Description chartingSchemePath? string (Optional) Gets the full path to the charting scheme file. entityTypes Record<string, schema.IEntityType <!-- --> > Gets the entity types that the schema defines. (Inherited from ISchema <!-- --> ) linkTypes Record<string, schema.ILinkType <!-- --> > Gets the link types that the schema defines. (Inherited from ISchema <!-- --> ) schemaPath string Gets the full path to the schema file. schemaShortName? string (Optional) Gets the short name for the schema, which the i2 Analyze topology can override."
  },
  "api/i2connect.connectors.iconnectorschema.schemapath.html": {
    "href": "api/i2connect.connectors.iconnectorschema.schemapath.html",
    "title": "connectors.IConnectorSchema.schemaPath property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorSchema > schemaPath connectors.IConnectorSchema.schemaPath property Gets the full path to the schema file. Signature: readonly schemaPath: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.connectors.iconnectorschema.schemashortname.html": {
    "href": "api/i2connect.connectors.iconnectorschema.schemashortname.html",
    "title": "connectors.IConnectorSchema.schemaShortName property",
    "keywords": "Home > @i2analyze/i2connect > connectors > IConnectorSchema > schemaShortName connectors.IConnectorSchema.schemaShortName property Gets the short name for the schema, which the i2 Analyze topology can override. Signature: readonly schemaShortName?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.connectors.ischemas.connector.html": {
    "href": "api/i2connect.connectors.ischemas.connector.html",
    "title": "connectors.ISchemas.connector property",
    "keywords": "Home > @i2analyze/i2connect > connectors > ISchemas > connector connectors.ISchemas.connector property Gets the connector schema. Signature: readonly connector?: IConnectorSchema; Returns: IConnectorSchema Introduced: API version 1.0"
  },
  "api/i2connect.connectors.ischemas.gateway.html": {
    "href": "api/i2connect.connectors.ischemas.gateway.html",
    "title": "connectors.ISchemas.gateway property",
    "keywords": "Home > @i2analyze/i2connect > connectors > ISchemas > gateway connectors.ISchemas.gateway property Gets the gateway schema. Signature: readonly gateway?: schema.ISchema; Returns: schema.ISchema Introduced: API version 1.0"
  },
  "api/i2connect.connectors.ischemas.html": {
    "href": "api/i2connect.connectors.ischemas.html",
    "title": "connectors.ISchemas interface",
    "keywords": "Home > @i2analyze/i2connect > connectors > ISchemas connectors.ISchemas interface A container for the schemas that a connector uses. Signature: interface ISchemas Introduced: API version 1.0 Properties Property Type Description connector? IConnectorSchema (Optional) Gets the connector schema. gateway? schema.ISchema (Optional) Gets the gateway schema. infoStore? schema.ISchema (Optional) Gets the Information Store schema."
  },
  "api/i2connect.connectors.ischemas.infostore.html": {
    "href": "api/i2connect.connectors.ischemas.infostore.html",
    "title": "connectors.ISchemas.infoStore property",
    "keywords": "Home > @i2analyze/i2connect > connectors > ISchemas > infoStore connectors.ISchemas.infoStore property Gets the Information Store schema. Signature: readonly infoStore?: schema.ISchema; Returns: schema.ISchema Introduced: API version 1.0"
  },
  "api/i2connect.createauthenticator.html": {
    "href": "api/i2connect.createauthenticator.html",
    "title": "createAuthenticator() function",
    "keywords": "Home > @i2analyze/i2connect > createAuthenticator createAuthenticator() function Creates an authenticator, which performs user authentication. Signature: export declare function createAuthenticator<TAuthForm extends services.AuthForm>(config: services.IAuthenticatorConfig<TAuthForm>, authenticate: (params: utility.AuthenticateCallbackParameters<TAuthForm>) => string | Promise<string>): services.IAuthenticator; Introduced: API version 2.0 Type Parameters Parameter Type Description TAuthForm extends services.AuthForm The type of the authentication form. Parameters Parameter Type Description config services.IAuthenticatorConfig <!-- --> <TAuthForm> The authenticator configuration, which determines what users see when asked to authenticate. authenticate (params: utility.AuthenticateCallbackParameters <!-- --> <TAuthForm>) => string | Promise<string> The authentication callback. Returns: services.IAuthenticator The authenticator. Remarks You can use the created authenticator when you configure a service that requires authentication. Example const authenticator = createAuthenticator( { description: 'Please provide an API key', form: { apiKey: { label: 'API key', type: 'password', }, }, }, ({ conditions: { apiKey } }) => { // In this example, we test whether the key matches \"Example\" and reject the request if it does not. if (apiKey !== 'Example') { throw new AuthenticationRequiredError({ title: 'Authentication failed' }); } return 'Example authentication token'; } ); addService( { name: 'Sample', authenticator, }, ({ authToken }) => { ... } );"
  },
  "api/i2connect.createlogger.html": {
    "href": "api/i2connect.createlogger.html",
    "title": "createLogger() function",
    "keywords": "Home > @i2analyze/i2connect > createLogger createLogger() function Creates or retrieves a logger object with the specified identifier. Signature: export declare function createLogger(id?: string): ILogger; Introduced: API version 1.0 Parameters Parameter Type Description id string (Optional) The identifier of the logger, which is used to find configuration settings, and also to name any resulting log file. Returns: ILogger The specified logger object, or the default logger for the i2 Connect server if no identifier was provided."
  },
  "api/i2connect.data.createdecimal.html": {
    "href": "api/i2connect.data.createdecimal.html",
    "title": "data.createDecimal() function",
    "keywords": "Home > @i2analyze/i2connect > data > createDecimal data.createDecimal() function Creates a decimal value from a number or a string. Signature: function createDecimal(value: number | string): IDecimal; Introduced: API version 2.0 Parameters Parameter Type Description value number | string The number or string to initialize the decimal value from. Returns: IDecimal The new decimal value. Exceptions Error if the value was NaN <!-- --> , or too large to be a decimal, or an invalid string."
  },
  "api/i2connect.data.creategeopoint.html": {
    "href": "api/i2connect.data.creategeopoint.html",
    "title": "data.createGeoPoint() function",
    "keywords": "Home > @i2analyze/i2connect > data > createGeoPoint data.createGeoPoint() function Creates a data.IGeoPoint object from a pair of latitude and longitude values. Signature: function createGeoPoint(latitude: number, longitude: number): IGeoPoint; Introduced: API version 2.0 Parameters Parameter Type Description latitude number The latitude of the geospatial point, in the range from -90 to +90 degrees. longitude number The longitude of the geospatial point, in the range from -180 to 180 degrees. Returns: IGeoPoint The new data.IGeoPoint object. Exceptions Error if either latitude or longitude was out of range."
  },
  "api/i2connect.data.creategeopoint_1.html": {
    "href": "api/i2connect.data.creategeopoint_1.html",
    "title": "data.createGeoPoint() function",
    "keywords": "Home > @i2analyze/i2connect > data > createGeoPoint data.createGeoPoint() function Creates a data.IGeoPoint object from a data.IGeoJsonPoint object. Signature: function createGeoPoint(data: IGeoJsonPoint): IGeoPoint; Introduced: API version 2.0 Parameters Parameter Type Description data IGeoJsonPoint A data.IGeoJsonPoint object that specifies the geospatial point. Returns: IGeoPoint The new data.IGeoPoint object. Exceptions Error if the specified object contained out-of-range data or was otherwise not valid."
  },
  "api/i2connect.data.creategeopoint_2.html": {
    "href": "api/i2connect.data.creategeopoint_2.html",
    "title": "data.createGeoPoint() function",
    "keywords": "Home > @i2analyze/i2connect > data > createGeoPoint data.createGeoPoint() function Creates a data.IGeoPoint object from a data.IGeoPointData object. Signature: function createGeoPoint(data: IGeoPointData): IGeoPoint; Introduced: API version 2.0 Parameters Parameter Type Description data IGeoPointData A set of data that specifies the geospatial point. Returns: IGeoPoint The new data.IGeoPoint object. Exceptions Error if either the latitude or the longitude in data was out of range."
  },
  "api/i2connect.data.createlocaldate.html": {
    "href": "api/i2connect.data.createlocaldate.html",
    "title": "data.createLocalDate() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalDate data.createLocalDate() function Creates a local date object (that does not have a time or a time zone) from year/month/day information. Signature: function createLocalDate(year: number, month: number, day: number): ILocalDate; Introduced: API version 2.0 Parameters Parameter Type Description year number The full year of the date; for example, 1973 . month number The (1-based) month of the year (1-12). day number The (1-based) day of the month (1-31). Returns: ILocalDate The new local date object."
  },
  "api/i2connect.data.createlocaldate_1.html": {
    "href": "api/i2connect.data.createlocaldate_1.html",
    "title": "data.createLocalDate() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalDate data.createLocalDate() function Creates a local date object (that does not have a time or a time zone) from a JavaScript Date object. Signature: function createLocalDate(jsDate: Date): ILocalDate; Introduced: API version 2.0 Parameters Parameter Type Description jsDate Date A JavaScript Date , from which the 'local' (not UTC) date values are used. Returns: ILocalDate The new local date object."
  },
  "api/i2connect.data.createlocaldate_2.html": {
    "href": "api/i2connect.data.createlocaldate_2.html",
    "title": "data.createLocalDate() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalDate data.createLocalDate() function Creates a local date object (that does not have a time or a time zone) from an ISO 8601 string ('yyyy-mm-dd'). Signature: function createLocalDate(iso8601: ISO8601Date): ILocalDate; Introduced: API version 2.0 Parameters Parameter Type Description iso8601 ISO8601Date An ISO 8601-formatted string that represents the date. Returns: ILocalDate The new local date object. Exceptions Error if the string was not in valid ISO 8601 format."
  },
  "api/i2connect.data.createlocaldatetime.html": {
    "href": "api/i2connect.data.createlocaldatetime.html",
    "title": "data.createLocalDateTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalDateTime data.createLocalDateTime() function Creates a local date-time object, which does not have a time zone, from year/month/day/hour/minute/second/milli information. Signature: function createLocalDateTime(year: number, month: number, day: number, hour: number, minute: number, second: number, milli?: number): ILocalDateTime; Introduced: API version 2.0 Parameters Parameter Type Description year number The full year of the date; for example, 1973. month number The (1-based) month of the year (1-12). day number The (1-based) day of the month (1-31). hour number The hour of the day (0-23). minute number The minutes of the hour (0-59). second number The seconds of the minute (0-59). milli number (Optional) The milliseconds of the second (0-999). Returns: ILocalDateTime The new local date-time object."
  },
  "api/i2connect.data.createlocaldatetime_1.html": {
    "href": "api/i2connect.data.createlocaldatetime_1.html",
    "title": "data.createLocalDateTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalDateTime data.createLocalDateTime() function Creates a local date-time object, which does not have a time zone, from a JavaScript Date object. Signature: function createLocalDateTime(jsDate: Date): ILocalDateTime; Introduced: API version 2.0 Parameters Parameter Type Description jsDate Date A JavaScript Date , from which the 'local' (not UTC) date and time values are used. Returns: ILocalDateTime The new local date-time object."
  },
  "api/i2connect.data.createlocaldatetime_2.html": {
    "href": "api/i2connect.data.createlocaldatetime_2.html",
    "title": "data.createLocalDateTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalDateTime data.createLocalDateTime() function Creates a local date-time object, which does not have a time zone, from local date and local time objects. Signature: function createLocalDateTime(date: ILocalDate, time: ILocalTime): ILocalDateTime; Introduced: API version 2.0 Parameters Parameter Type Description date ILocalDate A local date. time ILocalTime A local time. Returns: ILocalDateTime The new local date-time object."
  },
  "api/i2connect.data.createlocaldatetime_3.html": {
    "href": "api/i2connect.data.createlocaldatetime_3.html",
    "title": "data.createLocalDateTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalDateTime data.createLocalDateTime() function Creates a local date-time object, which does not have a time zone, from an ISO 8601 string ('yyyy-mm-ddThh:mm:ss' or 'yyyy-mm-ddThh:mm:ss.sss'). Signature: function createLocalDateTime(iso8601: ISO8601LocalDateTime): ILocalDateTime; Introduced: API version 2.0 Parameters Parameter Type Description iso8601 ISO8601LocalDateTime An ISO 8601-formatted string that represents the date and time. Returns: ILocalDateTime The new local date-time object. Exceptions Error if the string was not in valid ISO 8601 format."
  },
  "api/i2connect.data.createlocaltime.html": {
    "href": "api/i2connect.data.createlocaltime.html",
    "title": "data.createLocalTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalTime data.createLocalTime() function Creates a local time object (that does not have a date or a time zone) from hour/minute/second information. Signature: function createLocalTime(hour: number, minute: number, second: number, milli?: number): ILocalTime; Introduced: API version 2.0 Parameters Parameter Type Description hour number The hour of the day (0-23). minute number The minutes of the hour (0-59). second number The seconds of the minute (0-59). milli number (Optional) The milliseconds of the second (0-999). Returns: ILocalTime The new local time object."
  },
  "api/i2connect.data.createlocaltime_1.html": {
    "href": "api/i2connect.data.createlocaltime_1.html",
    "title": "data.createLocalTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalTime data.createLocalTime() function Creates a local time object (that does not have a date or a time zone) from a JavaScript Date object. Signature: function createLocalTime(jsDate: Date): ILocalTime; Introduced: API version 2.0 Parameters Parameter Type Description jsDate Date A JavaScript Date , from which the 'local' (not UTC) time values are used. Returns: ILocalTime The new local time object."
  },
  "api/i2connect.data.createlocaltime_2.html": {
    "href": "api/i2connect.data.createlocaltime_2.html",
    "title": "data.createLocalTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createLocalTime data.createLocalTime() function Creates a local time object (that does not have a date or a time zone) from an ISO 8601 string ('hh:mm:ss' or 'hh:mm:ss.sss'). Signature: function createLocalTime(iso8601: ISO8601Time): ILocalTime; Introduced: API version 2.0 Parameters Parameter Type Description iso8601 ISO8601Time An ISO 8601-formatted string that represents the time. Returns: ILocalTime The new local time object. Exceptions Error if the string was not in valid ISO 8601 format."
  },
  "api/i2connect.data.createzoneddatetime.html": {
    "href": "api/i2connect.data.createzoneddatetime.html",
    "title": "data.createZonedDateTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createZonedDateTime data.createZonedDateTime() function Creates a date-time object that has a time zone from a local date, a local time, and a time zone identifier. Signature: function createZonedDateTime(date: ILocalDate, time: ILocalTime, timeZoneId: TimeZoneId, isDst: boolean): IZonedDateTime; Introduced: API version 2.0 Parameters Parameter Type Description date ILocalDate A local date. time ILocalTime A local time. timeZoneId TimeZoneId A time zone identifier. isDst boolean true if the date-time is in daylight saving time for the specified time zone; false otherwise. This value is especially important for date-time values that are ambiguous, such as during the period when clocks go back from DST to not-DST and the same local time occurs twice. Returns: IZonedDateTime The new date-time object. Exceptions Error if timeZoneId did not specify a valid time zone."
  },
  "api/i2connect.data.createzoneddatetime_1.html": {
    "href": "api/i2connect.data.createzoneddatetime_1.html",
    "title": "data.createZonedDateTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createZonedDateTime data.createZonedDateTime() function Creates a date-time object that has a time zone from a local date-time (or a JavaScript Date object) and a time zone identifier. Signature: function createZonedDateTime(dateTime: Date | ILocalDateTime, timeZoneId: TimeZoneId, isDst: boolean): IZonedDateTime; Introduced: API version 2.0 Parameters Parameter Type Description dateTime Date | ILocalDateTime A local date-time, or a JavaScript Date . timeZoneId TimeZoneId A time zone identifier. isDst boolean true if the date-time is in daylight saving time for the specified time zone; false otherwise. This value is especially important for date-time values that are ambiguous, such as during the period when clocks go back from DST to not-DST and the same local time occurs twice. Returns: IZonedDateTime The new date-time object. Exceptions Error if timeZoneId did not specify a valid time zone."
  },
  "api/i2connect.data.createzoneddatetime_2.html": {
    "href": "api/i2connect.data.createzoneddatetime_2.html",
    "title": "data.createZonedDateTime() function",
    "keywords": "Home > @i2analyze/i2connect > data > createZonedDateTime data.createZonedDateTime() function Creates a date-time object that has a time zone from an ISO 8601 string ('yyyy-mm-ddThh:mm:ss' or 'yyyy-mm-ddThh:mm:ss.sss') and a time zone identifier. Signature: function createZonedDateTime(iso8601: ISO8601LocalDateTime, timeZoneId: TimeZoneId, isDst: boolean): IZonedDateTime; Introduced: API version 2.0 Parameters Parameter Type Description iso8601 ISO8601LocalDateTime An ISO 8601-formatted string that represents the date and time. timeZoneId TimeZoneId A time zone identifier. isDst boolean true if the date-time is in daylight saving time for the specified time zone; false otherwise. This value is especially important for date-time values that are ambiguous, such as during the period when clocks go back from DST to not-DST and the same local time occurs twice. Returns: IZonedDateTime The new date-time object. Exceptions Error if the string was not in valid ISO 8601 format, or timeZoneId did not specify a valid time zone."
  },
  "api/i2connect.data.decimalstring.html": {
    "href": "api/i2connect.data.decimalstring.html",
    "title": "data.DecimalString type",
    "keywords": "Home > @i2analyze/i2connect > data > DecimalString data.DecimalString type A decimal in string format. Signature: type DecimalString = string; Introduced: API version 1.2 Remarks A valid transport string is a number with up to 18 digits before the decimal separator, and up to four digits after the decimal separator. A leading minus sign is valid, but exponent (E) notation is not."
  },
  "api/i2connect.data.geojsonposition.html": {
    "href": "api/i2connect.data.geojsonposition.html",
    "title": "data.GeoJsonPosition type",
    "keywords": "Home > @i2analyze/i2connect > data > GeoJsonPosition data.GeoJsonPosition type A pair of geospatial coordinates, as described in RFC 7946 <!-- --> . Signature: type GeoJsonPosition = [number, number]; Introduced: API version 1.2"
  },
  "api/i2connect.data.html": {
    "href": "api/i2connect.data.html",
    "title": "data namespace",
    "keywords": "Home > @i2analyze/i2connect > data data namespace The members of the data namespace provide access to the property values of records that an i2 Connect service operates on. Signature: export declare namespace data Introduced: API version 1.0 Functions Function Description createDecimal(value) Creates a decimal value from a number or a string. createGeoPoint(latitude, longitude) Creates a data.IGeoPoint object from a pair of latitude and longitude values. createGeoPoint(data) Creates a data.IGeoPoint object from a data.IGeoJsonPoint object. createGeoPoint(data) Creates a data.IGeoPoint object from a data.IGeoPointData object. createLocalDate(year, month, day) Creates a local date object (that does not have a time or a time zone) from year/month/day information. createLocalDate(jsDate) Creates a local date object (that does not have a time or a time zone) from a JavaScript Date object. createLocalDate(iso8601) Creates a local date object (that does not have a time or a time zone) from an ISO 8601 string ('yyyy-mm-dd'). createLocalDateTime(year, month, day, hour, minute, second, milli) Creates a local date-time object, which does not have a time zone, from year/month/day/hour/minute/second/milli information. createLocalDateTime(jsDate) Creates a local date-time object, which does not have a time zone, from a JavaScript Date object. createLocalDateTime(date, time) Creates a local date-time object, which does not have a time zone, from local date and local time objects. createLocalDateTime(iso8601) Creates a local date-time object, which does not have a time zone, from an ISO 8601 string ('yyyy-mm-ddThh:mm:ss' or 'yyyy-mm-ddThh:mm:ss.sss'). createLocalTime(hour, minute, second, milli) Creates a local time object (that does not have a date or a time zone) from hour/minute/second information. createLocalTime(jsDate) Creates a local time object (that does not have a date or a time zone) from a JavaScript Date object. createLocalTime(iso8601) Creates a local time object (that does not have a date or a time zone) from an ISO 8601 string ('hh:mm:ss' or 'hh:mm:ss.sss'). createZonedDateTime(date, time, timeZoneId, isDst) Creates a date-time object that has a time zone from a local date, a local time, and a time zone identifier. createZonedDateTime(dateTime, timeZoneId, isDst) Creates a date-time object that has a time zone from a local date-time (or a JavaScript Date object) and a time zone identifier. createZonedDateTime(iso8601, timeZoneId, isDst) Creates a date-time object that has a time zone from an ISO 8601 string ('yyyy-mm-ddThh:mm:ss' or 'yyyy-mm-ddThh:mm:ss.sss') and a time zone identifier. Interfaces Interface Description IDecimal A decimal value. IGeoJsonFeature A geospatial feature, containing a geometry object and its associated properties. IGeoJsonFeatureCollection An area on a map, which comprises one or more geospatial features. IGeoJsonMultiPolygon A geospatial \"multi-polygon\", as described in RFC 7946 <!-- --> . IGeoJsonPoint A position on a map, as described in RFC 7946 <!-- --> . IGeoJsonPolygon A geospatial polygon, as described in RFC 7946 <!-- --> . IGeoPoint A geospatial point. IGeoPointData A set of data for creating a geospatial point. ILocalDate A date without an accompanying time or time zone. ILocalDateTime A date and a time without an accompanying time zone. ILocalTime A time without an accompanying date or time zone. IZonedDateTime A date and time with an accompanying time zone. Type Aliases Type Alias Description DecimalString A decimal in string format. GeoJsonPosition A pair of geospatial coordinates, as described in RFC 7946 <!-- --> . IGeoJsonGeometry A geospatial geometry object, as described in RFC 7946 <!-- --> . ISO8601Date A date in ISO 8601 format. For example, 1976-10-23 . ISO8601LocalDateTime A local date and time in ISO 8601 format. For example, 1976-10-23T11:22:33.123 . ISO8601Time A time in ISO 8601 format. For example, 11:22:33.123 . LinkDirection The direction of a link. LogicalType A logical type for the value of a property of a record. TimeZoneId An identifier of a time zone."
  },
  "api/i2connect.data.idecimal.asapproximatenumber.html": {
    "href": "api/i2connect.data.idecimal.asapproximatenumber.html",
    "title": "data.IDecimal.asApproximateNumber() method",
    "keywords": "Home > @i2analyze/i2connect > data > IDecimal > asApproximateNumber data.IDecimal.asApproximateNumber() method Converts the decimal value to an approximate JavaScript number. Signature: asApproximateNumber(): number; Returns: number A number that approximates the original value. Introduced: API version 2.0 Remarks Significant precision can be lost in the conversion process."
  },
  "api/i2connect.data.idecimal.html": {
    "href": "api/i2connect.data.idecimal.html",
    "title": "data.IDecimal interface",
    "keywords": "Home > @i2analyze/i2connect > data > IDecimal data.IDecimal interface A decimal value. Signature: interface IDecimal Introduced: API version 2.0 Remarks Decimals are large numbers represented with greater accuracy than floating point numbers. They can have up to 18 digits before the decimal separator, and up to four digits after it. Methods Method Description asApproximateNumber() Converts the decimal value to an approximate JavaScript number. toTransportString() Gets the decimal value as a string to be transported."
  },
  "api/i2connect.data.idecimal.totransportstring.html": {
    "href": "api/i2connect.data.idecimal.totransportstring.html",
    "title": "data.IDecimal.toTransportString() method",
    "keywords": "Home > @i2analyze/i2connect > data > IDecimal > toTransportString data.IDecimal.toTransportString() method Gets the decimal value as a string to be transported. Signature: toTransportString(): string; Returns: string A string representation of the value. Introduced: API version 2.0 Remarks The string is intended for transport, not display."
  },
  "api/i2connect.data.igeojsonfeature.geometry.html": {
    "href": "api/i2connect.data.igeojsonfeature.geometry.html",
    "title": "data.IGeoJsonFeature.geometry property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeature > geometry data.IGeoJsonFeature.geometry property Gets the feature's geometry object. Signature: geometry: IGeoJsonGeometry; Returns: IGeoJsonGeometry Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonfeature.html": {
    "href": "api/i2connect.data.igeojsonfeature.html",
    "title": "data.IGeoJsonFeature interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeature data.IGeoJsonFeature interface A geospatial feature, containing a geometry object and its associated properties. Signature: interface IGeoJsonFeature<P = Record<string, unknown> | null> Introduced: API version 1.2 Type Parameters Parameter Type Description P any (default: Record<string, unknown> | null) The type of the associated properties. Remarks As described in RFC 7946 <!-- --> . Properties Property Type Description geometry IGeoJsonGeometry Gets the feature's geometry object. properties P Gets the properties associated with the geometry object. type 'Feature' Gets the type of the object, which is always 'Feature'."
  },
  "api/i2connect.data.igeojsonfeature.properties.html": {
    "href": "api/i2connect.data.igeojsonfeature.properties.html",
    "title": "data.IGeoJsonFeature.properties property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeature > properties data.IGeoJsonFeature.properties property Gets the properties associated with the geometry object. Signature: properties: P; Returns: P Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonfeature.type.html": {
    "href": "api/i2connect.data.igeojsonfeature.type.html",
    "title": "data.IGeoJsonFeature.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeature > type data.IGeoJsonFeature.type property Gets the type of the object, which is always 'Feature'. Signature: type: 'Feature'; Returns: 'Feature' Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonfeaturecollection.features.html": {
    "href": "api/i2connect.data.igeojsonfeaturecollection.features.html",
    "title": "data.IGeoJsonFeatureCollection.features property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeatureCollection > features data.IGeoJsonFeatureCollection.features property Gets the features that the area comprises. Signature: features: IGeoJsonFeature[]; Returns: IGeoJsonFeature [] Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonfeaturecollection.html": {
    "href": "api/i2connect.data.igeojsonfeaturecollection.html",
    "title": "data.IGeoJsonFeatureCollection interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeatureCollection data.IGeoJsonFeatureCollection interface An area on a map, which comprises one or more geospatial features. Signature: interface IGeoJsonFeatureCollection Introduced: API version 1.2 Properties Property Type Description features IGeoJsonFeature <!-- --> [] Gets the features that the area comprises. type 'FeatureCollection' Gets the type of the area, which is always 'FeatureCollection'."
  },
  "api/i2connect.data.igeojsonfeaturecollection.type.html": {
    "href": "api/i2connect.data.igeojsonfeaturecollection.type.html",
    "title": "data.IGeoJsonFeatureCollection.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonFeatureCollection > type data.IGeoJsonFeatureCollection.type property Gets the type of the area, which is always 'FeatureCollection'. Signature: type: 'FeatureCollection'; Returns: 'FeatureCollection' Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsongeometry.html": {
    "href": "api/i2connect.data.igeojsongeometry.html",
    "title": "data.IGeoJsonGeometry type",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonGeometry data.IGeoJsonGeometry type A geospatial geometry object, as described in RFC 7946 <!-- --> . Signature: type IGeoJsonGeometry = IGeoJsonPolygon | IGeoJsonMultiPolygon; References: IGeoJsonPolygon <!-- --> , IGeoJsonMultiPolygon Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonmultipolygon.coordinates.html": {
    "href": "api/i2connect.data.igeojsonmultipolygon.coordinates.html",
    "title": "data.IGeoJsonMultiPolygon.coordinates property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonMultiPolygon > coordinates data.IGeoJsonMultiPolygon.coordinates property Gets the geospatial coordinates of the polygons' vertices. Signature: coordinates: GeoJsonPosition[][][]; Returns: GeoJsonPosition [][][] Introduced: API version 1.2 Remarks The coordinates are an array of arrays of (longitude, latitude), where longitude is in degrees east and latitude is in degrees north."
  },
  "api/i2connect.data.igeojsonmultipolygon.html": {
    "href": "api/i2connect.data.igeojsonmultipolygon.html",
    "title": "data.IGeoJsonMultiPolygon interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonMultiPolygon data.IGeoJsonMultiPolygon interface A geospatial \"multi-polygon\", as described in RFC 7946 <!-- --> . Signature: interface IGeoJsonMultiPolygon Introduced: API version 1.2 Properties Property Type Description coordinates GeoJsonPosition <!-- --> [][][] Gets the geospatial coordinates of the polygons' vertices. type 'MultiPolygon' Gets the type of the object, which is always 'MultiPolygon' in this case."
  },
  "api/i2connect.data.igeojsonmultipolygon.type.html": {
    "href": "api/i2connect.data.igeojsonmultipolygon.type.html",
    "title": "data.IGeoJsonMultiPolygon.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonMultiPolygon > type data.IGeoJsonMultiPolygon.type property Gets the type of the object, which is always 'MultiPolygon' in this case. Signature: type: 'MultiPolygon'; Returns: 'MultiPolygon' Introduced: API version 1.2"
  },
  "api/i2connect.data.igeojsonpoint.coordinates.html": {
    "href": "api/i2connect.data.igeojsonpoint.coordinates.html",
    "title": "data.IGeoJsonPoint.coordinates property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPoint > coordinates data.IGeoJsonPoint.coordinates property Gets the geospatial coordinates of the position. Signature: coordinates: GeoJsonPosition; Returns: GeoJsonPosition Introduced: API version 1.0 Remarks The coordinates are in the form (longitude, latitude), where longitude is in degrees east and latitude is in degrees north."
  },
  "api/i2connect.data.igeojsonpoint.html": {
    "href": "api/i2connect.data.igeojsonpoint.html",
    "title": "data.IGeoJsonPoint interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPoint data.IGeoJsonPoint interface A position on a map, as described in RFC 7946 <!-- --> . Signature: interface IGeoJsonPoint Introduced: API version 1.0 Properties Property Type Description coordinates GeoJsonPosition Gets the geospatial coordinates of the position. type 'Point' Gets the type of the position."
  },
  "api/i2connect.data.igeojsonpoint.type.html": {
    "href": "api/i2connect.data.igeojsonpoint.type.html",
    "title": "data.IGeoJsonPoint.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPoint > type data.IGeoJsonPoint.type property Gets the type of the position. Signature: type: 'Point'; Returns: 'Point' Introduced: API version 1.0"
  },
  "api/i2connect.data.igeojsonpolygon.coordinates.html": {
    "href": "api/i2connect.data.igeojsonpolygon.coordinates.html",
    "title": "data.IGeoJsonPolygon.coordinates property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPolygon > coordinates data.IGeoJsonPolygon.coordinates property Gets the geospatial coordinates of the polygon's vertices. Signature: coordinates: GeoJsonPosition[][]; Returns: GeoJsonPosition [][] Introduced: API version 1.2 Remarks The coordinates are an array of (longitude, latitude) pairs, where longitude is in degrees east and latitude is in degrees north."
  },
  "api/i2connect.data.igeojsonpolygon.html": {
    "href": "api/i2connect.data.igeojsonpolygon.html",
    "title": "data.IGeoJsonPolygon interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPolygon data.IGeoJsonPolygon interface A geospatial polygon, as described in RFC 7946 <!-- --> . Signature: interface IGeoJsonPolygon Introduced: API version 1.2 Properties Property Type Description coordinates GeoJsonPosition <!-- --> [][] Gets the geospatial coordinates of the polygon's vertices. type 'Polygon' Gets the type of the object, which is always 'Polygon' in this case."
  },
  "api/i2connect.data.igeojsonpolygon.type.html": {
    "href": "api/i2connect.data.igeojsonpolygon.type.html",
    "title": "data.IGeoJsonPolygon.type property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoJsonPolygon > type data.IGeoJsonPolygon.type property Gets the type of the object, which is always 'Polygon' in this case. Signature: type: 'Polygon'; Returns: 'Polygon' Introduced: API version 1.2"
  },
  "api/i2connect.data.igeopoint.html": {
    "href": "api/i2connect.data.igeopoint.html",
    "title": "data.IGeoPoint interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoPoint data.IGeoPoint interface A geospatial point. Signature: interface IGeoPoint Introduced: API version 2.0 Properties Property Type Description latitude number Gets the latitude of the point, in degrees north. longitude number Gets the longitude of the point, in degrees east. Methods Method Description toGeoJsonPoint() Gets the geospatial point as an IGeoJsonPoint ."
  },
  "api/i2connect.data.igeopoint.latitude.html": {
    "href": "api/i2connect.data.igeopoint.latitude.html",
    "title": "data.IGeoPoint.latitude property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoPoint > latitude data.IGeoPoint.latitude property Gets the latitude of the point, in degrees north. Signature: readonly latitude: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.igeopoint.longitude.html": {
    "href": "api/i2connect.data.igeopoint.longitude.html",
    "title": "data.IGeoPoint.longitude property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoPoint > longitude data.IGeoPoint.longitude property Gets the longitude of the point, in degrees east. Signature: readonly longitude: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.igeopoint.togeojsonpoint.html": {
    "href": "api/i2connect.data.igeopoint.togeojsonpoint.html",
    "title": "data.IGeoPoint.toGeoJsonPoint() method",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoPoint > toGeoJsonPoint data.IGeoPoint.toGeoJsonPoint() method Gets the geospatial point as an IGeoJsonPoint <!-- --> . Signature: toGeoJsonPoint(): IGeoJsonPoint; Returns: IGeoJsonPoint The geospatial point, as an IGeoJsonPoint <!-- --> . Introduced: API version 2.0"
  },
  "api/i2connect.data.igeopointdata.html": {
    "href": "api/i2connect.data.igeopointdata.html",
    "title": "data.IGeoPointData interface",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoPointData data.IGeoPointData interface A set of data for creating a geospatial point. Signature: interface IGeoPointData Introduced: API version 2.0 Properties Property Type Description latitude number Gets the latitude of the point, in degrees north. longitude number Gets the longitude of the point, in degrees east."
  },
  "api/i2connect.data.igeopointdata.latitude.html": {
    "href": "api/i2connect.data.igeopointdata.latitude.html",
    "title": "data.IGeoPointData.latitude property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoPointData > latitude data.IGeoPointData.latitude property Gets the latitude of the point, in degrees north. Signature: readonly latitude: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.igeopointdata.longitude.html": {
    "href": "api/i2connect.data.igeopointdata.longitude.html",
    "title": "data.IGeoPointData.longitude property",
    "keywords": "Home > @i2analyze/i2connect > data > IGeoPointData > longitude data.IGeoPointData.longitude property Gets the longitude of the point, in degrees east. Signature: readonly longitude: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaldate.day.html": {
    "href": "api/i2connect.data.ilocaldate.day.html",
    "title": "data.ILocalDate.day property",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDate > day data.ILocalDate.day property Gets the day of the month as a value from 1 to 31. Signature: readonly day: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaldate.html": {
    "href": "api/i2connect.data.ilocaldate.html",
    "title": "data.ILocalDate interface",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDate data.ILocalDate interface A date without an accompanying time or time zone. Signature: interface ILocalDate Introduced: API version 2.0 Properties Property Type Description day number Gets the day of the month as a value from 1 to 31. month number Gets the month of the year as a value from 1 to 12. year number Gets the year. Methods Method Description toISOString() Gets the date in ISO 8601 format. toJSDate() Gets the date as a JavaScript Date object."
  },
  "api/i2connect.data.ilocaldate.month.html": {
    "href": "api/i2connect.data.ilocaldate.month.html",
    "title": "data.ILocalDate.month property",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDate > month data.ILocalDate.month property Gets the month of the year as a value from 1 to 12. Signature: readonly month: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaldate.toisostring.html": {
    "href": "api/i2connect.data.ilocaldate.toisostring.html",
    "title": "data.ILocalDate.toISOString() method",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDate > toISOString data.ILocalDate.toISOString() method Gets the date in ISO 8601 format. Signature: toISOString(): ISO8601Date; Returns: ISO8601Date The date, in ISO 8601 format. Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaldate.tojsdate.html": {
    "href": "api/i2connect.data.ilocaldate.tojsdate.html",
    "title": "data.ILocalDate.toJSDate() method",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDate > toJSDate data.ILocalDate.toJSDate() method Gets the date as a JavaScript Date object. Signature: toJSDate(): Date; Returns: Date The date, as a Date <!-- --> . Introduced: API version 2.0 Remarks The time in the Date object is set to midnight on the date in question, in the local time zone. This behavior is equivalent to the expression new Date(year, month, day) in JavaScript."
  },
  "api/i2connect.data.ilocaldate.year.html": {
    "href": "api/i2connect.data.ilocaldate.year.html",
    "title": "data.ILocalDate.year property",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDate > year data.ILocalDate.year property Gets the year. Signature: readonly year: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaldatetime.date.html": {
    "href": "api/i2connect.data.ilocaldatetime.date.html",
    "title": "data.ILocalDateTime.date property",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDateTime > date data.ILocalDateTime.date property Gets the date. Signature: readonly date: ILocalDate; Returns: ILocalDate Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaldatetime.html": {
    "href": "api/i2connect.data.ilocaldatetime.html",
    "title": "data.ILocalDateTime interface",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDateTime data.ILocalDateTime interface A date and a time without an accompanying time zone. Signature: interface ILocalDateTime Introduced: API version 2.0 Properties Property Type Description date ILocalDate Gets the date. time ILocalTime Gets the time. Methods Method Description toISOString() Gets the date and time in ISO 8601 format. toJSDate() Gets the date and time as a JavaScript Date object."
  },
  "api/i2connect.data.ilocaldatetime.time.html": {
    "href": "api/i2connect.data.ilocaldatetime.time.html",
    "title": "data.ILocalDateTime.time property",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDateTime > time data.ILocalDateTime.time property Gets the time. Signature: readonly time: ILocalTime; Returns: ILocalTime Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaldatetime.toisostring.html": {
    "href": "api/i2connect.data.ilocaldatetime.toisostring.html",
    "title": "data.ILocalDateTime.toISOString() method",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDateTime > toISOString data.ILocalDateTime.toISOString() method Gets the date and time in ISO 8601 format. Signature: toISOString(): ISO8601LocalDateTime; Returns: ISO8601LocalDateTime The date and time, in ISO 8601 format. Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaldatetime.tojsdate.html": {
    "href": "api/i2connect.data.ilocaldatetime.tojsdate.html",
    "title": "data.ILocalDateTime.toJSDate() method",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalDateTime > toJSDate data.ILocalDateTime.toJSDate() method Gets the date and time as a JavaScript Date object. Signature: toJSDate(): Date; Returns: Date The date and time, as a Date <!-- --> . Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaltime.hour.html": {
    "href": "api/i2connect.data.ilocaltime.hour.html",
    "title": "data.ILocalTime.hour property",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalTime > hour data.ILocalTime.hour property Gets the hour as an integer from 0 to 23. Signature: readonly hour: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaltime.html": {
    "href": "api/i2connect.data.ilocaltime.html",
    "title": "data.ILocalTime interface",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalTime data.ILocalTime interface A time without an accompanying date or time zone. Signature: interface ILocalTime Introduced: API version 2.0 Properties Property Type Description hour number Gets the hour as an integer from 0 to 23. milli number Gets the milliseconds of the second as an integer from 0 to 999. minute number Gets the minutes of the hour as an integer from 0 to 59. second number Gets the seconds of the minute as an integer from 0 to 59. Methods Method Description toISOString() Gets the time in ISO 8601 format. toJSDate() Gets the time as a JavaScript Date object."
  },
  "api/i2connect.data.ilocaltime.milli.html": {
    "href": "api/i2connect.data.ilocaltime.milli.html",
    "title": "data.ILocalTime.milli property",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalTime > milli data.ILocalTime.milli property Gets the milliseconds of the second as an integer from 0 to 999. Signature: readonly milli: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaltime.minute.html": {
    "href": "api/i2connect.data.ilocaltime.minute.html",
    "title": "data.ILocalTime.minute property",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalTime > minute data.ILocalTime.minute property Gets the minutes of the hour as an integer from 0 to 59. Signature: readonly minute: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaltime.second.html": {
    "href": "api/i2connect.data.ilocaltime.second.html",
    "title": "data.ILocalTime.second property",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalTime > second data.ILocalTime.second property Gets the seconds of the minute as an integer from 0 to 59. Signature: readonly second: number; Returns: number Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaltime.toisostring.html": {
    "href": "api/i2connect.data.ilocaltime.toisostring.html",
    "title": "data.ILocalTime.toISOString() method",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalTime > toISOString data.ILocalTime.toISOString() method Gets the time in ISO 8601 format. Signature: toISOString(): ISO8601Time; Returns: ISO8601Time The time, in ISO 8601 format. Introduced: API version 2.0"
  },
  "api/i2connect.data.ilocaltime.tojsdate.html": {
    "href": "api/i2connect.data.ilocaltime.tojsdate.html",
    "title": "data.ILocalTime.toJSDate() method",
    "keywords": "Home > @i2analyze/i2connect > data > ILocalTime > toJSDate data.ILocalTime.toJSDate() method Gets the time as a JavaScript Date object. Signature: toJSDate(): Date; Returns: Date The time, as a Date <!-- --> . Introduced: API version 2.0 Remarks The date in the Date object is set to the start of the UNIX epoch: January 1st, 1970. This behavior is equivalent to the expression new Date(1970, 0, 1, hour, minute, second, milli) in JavaScript."
  },
  "api/i2connect.data.iso8601date.html": {
    "href": "api/i2connect.data.iso8601date.html",
    "title": "data.ISO8601Date type",
    "keywords": "Home > @i2analyze/i2connect > data > ISO8601Date data.ISO8601Date type A date in ISO 8601 format. For example, 1976-10-23 <!-- --> . Signature: type ISO8601Date = string; Introduced: API version 1.2"
  },
  "api/i2connect.data.iso8601localdatetime.html": {
    "href": "api/i2connect.data.iso8601localdatetime.html",
    "title": "data.ISO8601LocalDateTime type",
    "keywords": "Home > @i2analyze/i2connect > data > ISO8601LocalDateTime data.ISO8601LocalDateTime type A local date and time in ISO 8601 format. For example, 1976-10-23T11:22:33.123 <!-- --> . Signature: type ISO8601LocalDateTime = string; Introduced: API version 1.2"
  },
  "api/i2connect.data.iso8601time.html": {
    "href": "api/i2connect.data.iso8601time.html",
    "title": "data.ISO8601Time type",
    "keywords": "Home > @i2analyze/i2connect > data > ISO8601Time data.ISO8601Time type A time in ISO 8601 format. For example, 11:22:33.123 <!-- --> . Signature: type ISO8601Time = string; Introduced: API version 1.2"
  },
  "api/i2connect.data.izoneddatetime.datetime.html": {
    "href": "api/i2connect.data.izoneddatetime.datetime.html",
    "title": "data.IZonedDateTime.dateTime property",
    "keywords": "Home > @i2analyze/i2connect > data > IZonedDateTime > dateTime data.IZonedDateTime.dateTime property Gets the date and time. Signature: readonly dateTime: ILocalDateTime; Returns: ILocalDateTime Introduced: API version 2.0"
  },
  "api/i2connect.data.izoneddatetime.html": {
    "href": "api/i2connect.data.izoneddatetime.html",
    "title": "data.IZonedDateTime interface",
    "keywords": "Home > @i2analyze/i2connect > data > IZonedDateTime data.IZonedDateTime interface A date and time with an accompanying time zone. Signature: interface IZonedDateTime Introduced: API version 1.0 Properties Property Type Description dateTime ILocalDateTime Gets the date and time. isDST boolean Indicates whether daylight saving time is in operation. timeZoneId TimeZoneId Gets the identifier of the time zone."
  },
  "api/i2connect.data.izoneddatetime.isdst.html": {
    "href": "api/i2connect.data.izoneddatetime.isdst.html",
    "title": "data.IZonedDateTime.isDST property",
    "keywords": "Home > @i2analyze/i2connect > data > IZonedDateTime > isDST data.IZonedDateTime.isDST property Indicates whether daylight saving time is in operation. Signature: readonly isDST: boolean; Returns: boolean Introduced: API version 1.0"
  },
  "api/i2connect.data.izoneddatetime.timezoneid.html": {
    "href": "api/i2connect.data.izoneddatetime.timezoneid.html",
    "title": "data.IZonedDateTime.timeZoneId property",
    "keywords": "Home > @i2analyze/i2connect > data > IZonedDateTime > timeZoneId data.IZonedDateTime.timeZoneId property Gets the identifier of the time zone. Signature: readonly timeZoneId: TimeZoneId; Returns: TimeZoneId Introduced: API version 1.0"
  },
  "api/i2connect.data.linkdirection.html": {
    "href": "api/i2connect.data.linkdirection.html",
    "title": "data.LinkDirection type",
    "keywords": "Home > @i2analyze/i2connect > data > LinkDirection data.LinkDirection type The direction of a link. Signature: type LinkDirection = 'none' | 'with' | 'against' | 'both'; Introduced: API version 1.0"
  },
  "api/i2connect.data.logicaltype.html": {
    "href": "api/i2connect.data.logicaltype.html",
    "title": "data.LogicalType type",
    "keywords": "Home > @i2analyze/i2connect > data > LogicalType data.LogicalType type A logical type for the value of a property of a record. Signature: type LogicalType = /** A single-line text string. */ 'singleLineString' /** A date with no associated time. */ | 'date' /** A time with no associated date. */ | 'time' /** A date-and-time value. */ | 'dateAndTime' /** A true/false value. */ | 'boolean' /** An integer value. */ | 'integer' /** A double-precision (64-bit) floating point value. */ | 'double' /** A decimal value that is stored accurately without rounding. */ | 'decimal' /** A multiple-line text string. */ | 'multipleLineString' /** A value that is selected from a list. */ | 'selectedFromList' /** A value that is suggested from a list. */ | 'suggestedFromList' /** A geospatial value. */ | 'geospatial'; Introduced: API version 1.0"
  },
  "api/i2connect.data.timezoneid.html": {
    "href": "api/i2connect.data.timezoneid.html",
    "title": "data.TimeZoneId type",
    "keywords": "Home > @i2analyze/i2connect > data > TimeZoneId data.TimeZoneId type An identifier of a time zone. Signature: type TimeZoneId = string; Introduced: API version 2.0"
  },
  "api/i2connect.detailederror._constructor_.html": {
    "href": "api/i2connect.detailederror._constructor_.html",
    "title": "DetailedError.(constructor)",
    "keywords": "Home > @i2analyze/i2connect > DetailedError > (constructor) DetailedError.(constructor) Constructs a new instance of the DetailedError class. Signature: constructor(data: IDetailedErrorData); Introduced: API version 1.0 Parameters Parameter Type Description data IDetailedErrorData The detailed information about the problem that caused the error, which can contain all the properties of IDetailedErrorData except type ."
  },
  "api/i2connect.detailederror.data.html": {
    "href": "api/i2connect.detailederror.data.html",
    "title": "DetailedError.data property",
    "keywords": "Home > @i2analyze/i2connect > DetailedError > data DetailedError.data property Gets detailed information about the problem that caused the error. Signature: readonly data: IDetailedErrorData; Introduced: API version 1.0"
  },
  "api/i2connect.detailederror.html": {
    "href": "api/i2connect.detailederror.html",
    "title": "DetailedError class",
    "keywords": "Home > @i2analyze/i2connect > DetailedError DetailedError class An error indicating that a problem occurred during a service call. Signature: export declare class DetailedError extends Error Extends: Error Introduced: API version 1.0 Remarks Error objects can optionally be constructed with detailed error information. Constructors Constructor Modifiers Description (constructor)(data) Constructs a new instance of the DetailedError class. Properties Property Modifiers Type Description data IDetailedErrorData Gets detailed information about the problem that caused the error."
  },
  "api/i2connect.html": {
    "href": "api/i2connect.html",
    "title": "i2connect package",
    "keywords": "Home > @i2analyze/i2connect i2connect package The i2 Connect package, which contains all the functionality you need to create connectors for i2 Analyze. Classes Class Description AuthenticationRequiredError An error indicating that authentication is required. DetailedError An error indicating that a problem occurred during a service call. Functions Function Description addService(config, acquire) Adds a service that provides an acquire callback to the connector. addService(config, callbacks) Adds a service that provides an acquire callback and an optional validate callback to the connector. addVisualQueryService(config, acquire) Adds a visual query service that provides an acquire callback to the connector. addVisualQueryService(config, callbacks) Adds a visual query service that provides an acquire callback and an optional validate callback to the connector. createAuthenticator(config, authenticate) Creates an authenticator, which performs user authentication. createLogger(id) Creates or retrieves a logger object with the specified identifier. startConnector(config) Starts the connector. You must add all the services you need before you call this function. Interfaces Interface Description IDetailedErrorData A set of detailed error information for a DetailedError object. ILogger A diagnostic logger that i2 Connect services can use. Namespaces Namespace Description connectors The members of the connectors namespace allow you to configure the connectors that you create for the i2 Connect server. data The members of the data namespace provide access to the property values of records that an i2 Connect service operates on. records The members of the records namespace provide access to the contents of seed and result records in an i2 Connect service. schema The members of the schema namespace provide access to the specifications that govern the structure of records in an i2 Connect service. services The members of the services namespace allow you to configure and implement the services in a connector. settings The members of the settings namespace allow you to retrieve connector settings from environment variables and the configuration file. spi A JavaScript representation of the objects in the raw i2 Connect gateway REST SPI . utility The members of the utility namespace improve the TypeScript type information that's based on service configuration. You will rarely need to use the members of this namespace directly in your connector code. Type Aliases Type Alias Description LogLevel The logging level, or severity, of log messages."
  },
  "api/i2connect.idetailederrordata.detail.html": {
    "href": "api/i2connect.idetailederrordata.detail.html",
    "title": "IDetailedErrorData.detail property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > detail IDetailedErrorData.detail property Gets addition detail about the problem, specific to this instance of it. Signature: readonly detail?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.idetailederrordata.html": {
    "href": "api/i2connect.idetailederrordata.html",
    "title": "IDetailedErrorData interface",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData IDetailedErrorData interface A set of detailed error information for a DetailedError object. Signature: export interface IDetailedErrorData Introduced: API version 1.0 Properties Property Type Description detail? string (Optional) Gets addition detail about the problem, specific to this instance of it. instance? string (Optional) Gets a URL for a resource that is specific to this instance of the problem. status? number (Optional) Gets the HTTP status code that was generated by the server for this occurrence of the problem. title? string (Optional) Gets the title of the problem, which might be displayed to the user. type? string (Optional) Gets a URL for a resource that describes the type of the problem."
  },
  "api/i2connect.idetailederrordata.instance.html": {
    "href": "api/i2connect.idetailederrordata.instance.html",
    "title": "IDetailedErrorData.instance property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > instance IDetailedErrorData.instance property Gets a URL for a resource that is specific to this instance of the problem. Signature: readonly instance?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.idetailederrordata.status.html": {
    "href": "api/i2connect.idetailederrordata.status.html",
    "title": "IDetailedErrorData.status property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > status IDetailedErrorData.status property Gets the HTTP status code that was generated by the server for this occurrence of the problem. Signature: readonly status?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.idetailederrordata.title.html": {
    "href": "api/i2connect.idetailederrordata.title.html",
    "title": "IDetailedErrorData.title property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > title IDetailedErrorData.title property Gets the title of the problem, which might be displayed to the user. Signature: readonly title?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.idetailederrordata.type.html": {
    "href": "api/i2connect.idetailederrordata.type.html",
    "title": "IDetailedErrorData.type property",
    "keywords": "Home > @i2analyze/i2connect > IDetailedErrorData > type IDetailedErrorData.type property Gets a URL for a resource that describes the type of the problem. Signature: readonly type?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.ilogger.debug.html": {
    "href": "api/i2connect.ilogger.debug.html",
    "title": "ILogger.debug() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > debug ILogger.debug() method Logs a message at 'debug' level. Signature: debug(message: string): void; Introduced: API version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/i2connect.ilogger.debug_1.html": {
    "href": "api/i2connect.ilogger.debug_1.html",
    "title": "ILogger.debug() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > debug ILogger.debug() method Logs a formatted message at 'debug' level. Signature: debug(format: string, ...args: unknown[]): void; Introduced: API version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/i2connect.ilogger.error.html": {
    "href": "api/i2connect.ilogger.error.html",
    "title": "ILogger.error() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > error ILogger.error() method Logs a message at 'error' level. Signature: error(message: string): void; Introduced: API version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/i2connect.ilogger.error_1.html": {
    "href": "api/i2connect.ilogger.error_1.html",
    "title": "ILogger.error() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > error ILogger.error() method Logs a formatted message at 'error' level. Signature: error(format: string, ...args: unknown[]): void; Introduced: API version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/i2connect.ilogger.error_2.html": {
    "href": "api/i2connect.ilogger.error_2.html",
    "title": "ILogger.error() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > error ILogger.error() method Logs an Error object at 'error' level. Signature: error(error: Error): void; Introduced: API version 1.0 Parameters Parameter Type Description error Error An Error object to log. Returns: void"
  },
  "api/i2connect.ilogger.html": {
    "href": "api/i2connect.ilogger.html",
    "title": "ILogger interface",
    "keywords": "Home > @i2analyze/i2connect > ILogger ILogger interface A diagnostic logger that i2 Connect services can use. Signature: export interface ILogger Introduced: API version 1.0 Remarks In formatted message strings, ' %d <!-- --> ' is a numeric representation of the parameter, ' %j <!-- --> ' is a JSON representation of the parameter, and ' %s <!-- --> ' is a string representation of the parameter. Any extra parameters are interpreted automatically as ' %s <!-- --> '. The default logging level is info <!-- --> . Methods Method Description debug(message) Logs a message at 'debug' level. debug(format, args) Logs a formatted message at 'debug' level. error(message) Logs a message at 'error' level. error(format, args) Logs a formatted message at 'error' level. error(error) Logs an Error object at 'error' level. info(message) Logs a message at 'info' level. info(format, args) Logs a formatted message at 'info' level. setLogLevel(level) Sets the minimum level, or severity, of messages that will be emitted. warn(message) Logs a message at 'warn' level. warn(format, args) Logs a formatted message at 'warn' level."
  },
  "api/i2connect.ilogger.info.html": {
    "href": "api/i2connect.ilogger.info.html",
    "title": "ILogger.info() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > info ILogger.info() method Logs a message at 'info' level. Signature: info(message: string): void; Introduced: API version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/i2connect.ilogger.info_1.html": {
    "href": "api/i2connect.ilogger.info_1.html",
    "title": "ILogger.info() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > info ILogger.info() method Logs a formatted message at 'info' level. Signature: info(format: string, ...args: unknown[]): void; Introduced: API version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/i2connect.ilogger.setloglevel.html": {
    "href": "api/i2connect.ilogger.setloglevel.html",
    "title": "ILogger.setLogLevel() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > setLogLevel ILogger.setLogLevel() method Warning: This API is now obsolete. Version 2 of the API introduced support for controlling the log level from a configuration file or an environment variable . This function will be removed in the next major version of the API. Sets the minimum level, or severity, of messages that will be emitted. Signature: setLogLevel(level: LogLevel): void; Introduced: API version 1.0 Parameters Parameter Type Description level LogLevel The minimum logging level to set. Returns: void Remarks Be aware that calling this method overrides any other setting for the log level."
  },
  "api/i2connect.ilogger.warn.html": {
    "href": "api/i2connect.ilogger.warn.html",
    "title": "ILogger.warn() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > warn ILogger.warn() method Logs a message at 'warn' level. Signature: warn(message: string): void; Introduced: API version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/i2connect.ilogger.warn_1.html": {
    "href": "api/i2connect.ilogger.warn_1.html",
    "title": "ILogger.warn() method",
    "keywords": "Home > @i2analyze/i2connect > ILogger > warn ILogger.warn() method Logs a formatted message at 'warn' level. Signature: warn(format: string, ...args: unknown[]): void; Introduced: API version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/i2connect.loglevel.html": {
    "href": "api/i2connect.loglevel.html",
    "title": "LogLevel type",
    "keywords": "Home > @i2analyze/i2connect > LogLevel LogLevel type The logging level, or severity, of log messages. Signature: export declare type LogLevel = 'error' | 'warn' | 'info' | 'debug'; Introduced: API version 1.0 Remarks The possible values for the logging level are hierarchical. The default logging level is info <!-- --> ."
  },
  "api/i2connect.records.html": {
    "href": "api/i2connect.records.html",
    "title": "records namespace",
    "keywords": "Home > @i2analyze/i2connect > records records namespace The members of the records namespace provide access to the contents of seed and result records in an i2 Connect service. Signature: export declare namespace records Introduced: API version 1.0 Interfaces Interface Description IConnectorKey A key from a source identifier of a record that was returned by the current connector. IRecordProperties A set of properties in a result record. IResultEntityRecord A new result entity record. IResultLinkRecord A new result link record. IResultRecordBase A set of information and functionality that is common to all result records. ISeededResultEntityRecord A result entity record that is generated from a seed record. ISeededResultLinkRecord A result link record that is generated from a seed record. ISeededResultRecordBase A set of information and functionality that is common to all result records that are generated from seed records. ISeedEntityRecord A seed entity record. ISeedLinkRecord A seed link record. ISeedRecordBase A set of information and functionality that is common to all seed records. ISourceIdentifier A source identifier for a record. ISourceReference A source reference for a record. ITypedSeededResultRecord A result record of a specific type that is generated from a seed record. ITypedSeedEntityRecord A seed record of a specific entity type. ITypedSeedLinkRecord A seed record of a specific link type. ITypedSeedRecord A seed record of a specific type. Type Aliases Type Alias Description IResultLinkRecordEnd A record that can be a link end for a records.IResultLinkRecord <!-- --> . ResultRecordId The identifier of a newly created result record. ResultRecordIdType The type of an identifier for a newly created result record. SeedId The identifier of a seed record."
  },
  "api/i2connect.records.iconnectorkey.html": {
    "href": "api/i2connect.records.iconnectorkey.html",
    "title": "records.IConnectorKey interface",
    "keywords": "Home > @i2analyze/i2connect > records > IConnectorKey records.IConnectorKey interface A key from a source identifier of a record that was returned by the current connector. Signature: interface IConnectorKey Introduced: API version 1.0 Properties Property Type Description id string Gets the identifier of the data that the key represents. itemTypeId string Gets the item type identifier of the data that the key represents."
  },
  "api/i2connect.records.iconnectorkey.id.html": {
    "href": "api/i2connect.records.iconnectorkey.id.html",
    "title": "records.IConnectorKey.id property",
    "keywords": "Home > @i2analyze/i2connect > records > IConnectorKey > id records.IConnectorKey.id property Gets the identifier of the data that the key represents. Signature: readonly id: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.iconnectorkey.itemtypeid.html": {
    "href": "api/i2connect.records.iconnectorkey.itemtypeid.html",
    "title": "records.IConnectorKey.itemTypeId property",
    "keywords": "Home > @i2analyze/i2connect > records > IConnectorKey > itemTypeId records.IConnectorKey.itemTypeId property Gets the item type identifier of the data that the key represents. Signature: readonly itemTypeId: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.irecordproperties.html": {
    "href": "api/i2connect.records.irecordproperties.html",
    "title": "records.IRecordProperties interface",
    "keywords": "Home > @i2analyze/i2connect > records > IRecordProperties records.IRecordProperties interface A set of properties in a result record. Signature: interface IRecordProperties<TItemType extends schema.IItemType = schema.IItemType> Introduced: API version 1.2 Type Parameters Parameter Type Description TItemType extends schema.IItemType (default: schema.IItemType ) The type of the result record. Methods Method Description setProperties(properties) Sets the values of several properties on the result record. setProperty(displayName, value) Sets the value of a property on the result record. setSourceReference(sourceReference) Adds a source reference to the result record."
  },
  "api/i2connect.records.irecordproperties.setproperties.html": {
    "href": "api/i2connect.records.irecordproperties.setproperties.html",
    "title": "records.IRecordProperties.setProperties() method",
    "keywords": "Home > @i2analyze/i2connect > records > IRecordProperties > setProperties records.IRecordProperties.setProperties() method Sets the values of several properties on the result record. Signature: setProperties(properties: utility.SetRecordProperties<TItemType>): void; Introduced: API version 2.0 Parameters Parameter Type Description properties utility.SetRecordProperties <!-- --> <TItemType> An object that contains name-value pairs, where the names match property type names, and the values are those that you want to set. Returns: void Example Use code like this to set several properties on the seeded result record at once: seededRecord.setProperties({ 'property name 1': 'property value', 'property name 2': 4 });"
  },
  "api/i2connect.records.irecordproperties.setproperty.html": {
    "href": "api/i2connect.records.irecordproperties.setproperty.html",
    "title": "records.IRecordProperties.setProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > IRecordProperties > setProperty records.IRecordProperties.setProperty() method Sets the value of a property on the result record. Signature: setProperty<TPropertyName extends utility.PropertyTypeDisplayNames<TItemType>>(displayName: TPropertyName, value: utility.SetPropertyValueType<utility.PropertyTypeFromDisplayName<TItemType, TPropertyName>> | undefined): void; Introduced: API version 2.0 Type Parameters Parameter Type Description TPropertyName extends utility.PropertyTypeDisplayNames <TItemType> The type display name, which is inferred from the displayName parameter. Parameters Parameter Type Description displayName TPropertyName The display name of the property type. value utility.SetPropertyValueType <!-- --> < utility.PropertyTypeFromDisplayName <!-- --> <TItemType, TPropertyName>> | undefined The value for the property. Returns: void Remarks This method allows you to set a property on the record, given the display name of its property type from the schema. Example Use code like this to set an individual property on the seeded result record: seededResultRecord.setProperty('property name 1', 'property value'); seededResultRecord.setProperty('property name 2', 4);"
  },
  "api/i2connect.records.irecordproperties.setsourcereference.html": {
    "href": "api/i2connect.records.irecordproperties.setsourcereference.html",
    "title": "records.IRecordProperties.setSourceReference() method",
    "keywords": "Home > @i2analyze/i2connect > records > IRecordProperties > setSourceReference records.IRecordProperties.setSourceReference() method Adds a source reference to the result record. Signature: setSourceReference(sourceReference: ISourceReference): void; Introduced: API version 1.2 Parameters Parameter Type Description sourceReference ISourceReference The source reference to add. Returns: void"
  },
  "api/i2connect.records.iresultentityrecord.html": {
    "href": "api/i2connect.records.iresultentityrecord.html",
    "title": "records.IResultEntityRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > IResultEntityRecord records.IResultEntityRecord interface A new result entity record. Signature: interface IResultEntityRecord<TItemType extends schema.IEntityType = schema.IEntityType, TIdType extends ResultRecordIdType = ResultRecordIdType> extends IResultRecordBase<TItemType, TIdType> Extends: IResultRecordBase Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IEntityType (default: schema.IEntityType ) The type of the result record. TIdType extends ResultRecordIdType (default: ResultRecordIdType ) The type of the identifier for the result record. Properties Property Type Description id TIdType Gets the identifier of the result record. (Inherited from IResultRecordBase <!-- --> ) Methods Method Description setProperties(properties) Sets the values of several properties on the result record. (Inherited from IRecordProperties <!-- --> ) setProperty(displayName, value) Sets the value of a property on the result record. (Inherited from IRecordProperties <!-- --> ) setSourceReference(sourceReference) Adds a source reference to the result record. (Inherited from IRecordProperties <!-- --> )"
  },
  "api/i2connect.records.iresultlinkrecord.fromend.html": {
    "href": "api/i2connect.records.iresultlinkrecord.fromend.html",
    "title": "records.IResultLinkRecord.fromEnd property",
    "keywords": "Home > @i2analyze/i2connect > records > IResultLinkRecord > fromEnd records.IResultLinkRecord.fromEnd property Gets the entity record at the \"from\" end of the link. Signature: readonly fromEnd: TFromEnd; Returns: TFromEnd Introduced: API version 1.0"
  },
  "api/i2connect.records.iresultlinkrecord.html": {
    "href": "api/i2connect.records.iresultlinkrecord.html",
    "title": "records.IResultLinkRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > IResultLinkRecord records.IResultLinkRecord interface A new result link record. Signature: interface IResultLinkRecord<TLinkType extends schema.ILinkType = schema.ILinkType, TFromEnd extends IResultLinkRecordEnd = IResultLinkRecordEnd, TToEnd extends IResultLinkRecordEnd = IResultLinkRecordEnd, TIdType extends ResultRecordIdType = ResultRecordIdType> extends IResultRecordBase<TLinkType, TIdType> Extends: IResultRecordBase Introduced: API version 1.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType (default: schema.ILinkType ) The type of the result record. TFromEnd extends IResultLinkRecordEnd (default: IResultLinkRecordEnd ) The type of the entity record at the \"from\" end of the link. TToEnd extends IResultLinkRecordEnd (default: IResultLinkRecordEnd ) The type of the entity record at the \"to\" end of the link. TIdType extends ResultRecordIdType (default: ResultRecordIdType ) The type of the identifier for the result record. Properties Property Type Description fromEnd TFromEnd Gets the entity record at the \"from\" end of the link. id TIdType Gets the identifier of the result record. (Inherited from IResultRecordBase <!-- --> ) linkDirection data.LinkDirection Gets the direction of the link. toEnd TToEnd Gets the entity record at the \"to\" end of the link. Methods Method Description setProperties(properties) Sets the values of several properties on the result record. (Inherited from IRecordProperties <!-- --> ) setProperty(displayName, value) Sets the value of a property on the result record. (Inherited from IRecordProperties <!-- --> ) setSourceReference(sourceReference) Adds a source reference to the result record. (Inherited from IRecordProperties <!-- --> )"
  },
  "api/i2connect.records.iresultlinkrecord.linkdirection.html": {
    "href": "api/i2connect.records.iresultlinkrecord.linkdirection.html",
    "title": "records.IResultLinkRecord.linkDirection property",
    "keywords": "Home > @i2analyze/i2connect > records > IResultLinkRecord > linkDirection records.IResultLinkRecord.linkDirection property Gets the direction of the link. Signature: readonly linkDirection: data.LinkDirection; Returns: data.LinkDirection Introduced: API version 1.0"
  },
  "api/i2connect.records.iresultlinkrecord.toend.html": {
    "href": "api/i2connect.records.iresultlinkrecord.toend.html",
    "title": "records.IResultLinkRecord.toEnd property",
    "keywords": "Home > @i2analyze/i2connect > records > IResultLinkRecord > toEnd records.IResultLinkRecord.toEnd property Gets the entity record at the \"to\" end of the link. Signature: readonly toEnd: TToEnd; Returns: TToEnd Introduced: API version 1.0"
  },
  "api/i2connect.records.iresultlinkrecordend.html": {
    "href": "api/i2connect.records.iresultlinkrecordend.html",
    "title": "records.IResultLinkRecordEnd type",
    "keywords": "Home > @i2analyze/i2connect > records > IResultLinkRecordEnd records.IResultLinkRecordEnd type A record that can be a link end for a records.IResultLinkRecord <!-- --> . Signature: type IResultLinkRecordEnd = ISeededResultEntityRecord | IResultEntityRecord; References: ISeededResultEntityRecord <!-- --> , IResultEntityRecord Introduced: API version 2.0"
  },
  "api/i2connect.records.iresultrecordbase.html": {
    "href": "api/i2connect.records.iresultrecordbase.html",
    "title": "records.IResultRecordBase interface",
    "keywords": "Home > @i2analyze/i2connect > records > IResultRecordBase records.IResultRecordBase interface A set of information and functionality that is common to all result records. Signature: interface IResultRecordBase<TItemType extends schema.IItemType = schema.IItemType, TIdType extends ResultRecordIdType = ResultRecordIdType> extends IRecordProperties<TItemType> Extends: IRecordProperties Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType (default: schema.IItemType ) The type of the result record. TIdType extends ResultRecordIdType (default: ResultRecordIdType ) The type of the identifier for the result record. Properties Property Type Description id TIdType Gets the identifier of the result record. Methods Method Description setProperties(properties) Sets the values of several properties on the result record. (Inherited from IRecordProperties <!-- --> ) setProperty(displayName, value) Sets the value of a property on the result record. (Inherited from IRecordProperties <!-- --> ) setSourceReference(sourceReference) Adds a source reference to the result record. (Inherited from IRecordProperties <!-- --> )"
  },
  "api/i2connect.records.iresultrecordbase.id.html": {
    "href": "api/i2connect.records.iresultrecordbase.id.html",
    "title": "records.IResultRecordBase.id property",
    "keywords": "Home > @i2analyze/i2connect > records > IResultRecordBase > id records.IResultRecordBase.id property Gets the identifier of the result record. Signature: readonly id: TIdType; Returns: TIdType Introduced: API version 1.2"
  },
  "api/i2connect.records.iseededresultentityrecord.html": {
    "href": "api/i2connect.records.iseededresultentityrecord.html",
    "title": "records.ISeededResultEntityRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultEntityRecord records.ISeededResultEntityRecord interface A result entity record that is generated from a seed record. Signature: interface ISeededResultEntityRecord extends ISeededResultRecordBase Extends: ISeededResultRecordBase Introduced: API version 1.0 Properties Property Type Description id SeedId Gets the identifier of the result record, which is also the identifier of the seed record. (Inherited from ISeededResultRecordBase <!-- --> ) Methods Method Description isType(entityType) Indicates whether the entity record has the specified type. setSourceReference(sourceReference) Adds a source reference to the result record. (Inherited from ISeededResultRecordBase <!-- --> )"
  },
  "api/i2connect.records.iseededresultentityrecord.istype.html": {
    "href": "api/i2connect.records.iseededresultentityrecord.istype.html",
    "title": "records.ISeededResultEntityRecord.isType() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultEntityRecord > isType records.ISeededResultEntityRecord.isType() method Indicates whether the entity record has the specified type. Signature: isType<TEntityType extends schema.IEntityType>(entityType: TEntityType): this is ITypedSeededResultRecord<TEntityType>; Introduced: API version 2.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the entity type, which is inferred from the entityType parameter. Parameters Parameter Type Description entityType TEntityType The entity type to compare the result record against. Returns: this is ITypedSeededResultRecord <!-- --> <TEntityType> true if the result record has the specified type; false otherwise."
  },
  "api/i2connect.records.iseededresultlinkrecord.html": {
    "href": "api/i2connect.records.iseededresultlinkrecord.html",
    "title": "records.ISeededResultLinkRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultLinkRecord records.ISeededResultLinkRecord interface A result link record that is generated from a seed record. Signature: interface ISeededResultLinkRecord extends ISeededResultRecordBase Extends: ISeededResultRecordBase Introduced: API version 1.0 Properties Property Type Description id SeedId Gets the identifier of the result record, which is also the identifier of the seed record. (Inherited from ISeededResultRecordBase <!-- --> ) Methods Method Description isType(linkType) Indicates whether the link record has the specified type. setSourceReference(sourceReference) Adds a source reference to the result record. (Inherited from ISeededResultRecordBase <!-- --> )"
  },
  "api/i2connect.records.iseededresultlinkrecord.istype.html": {
    "href": "api/i2connect.records.iseededresultlinkrecord.istype.html",
    "title": "records.ISeededResultLinkRecord.isType() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultLinkRecord > isType records.ISeededResultLinkRecord.isType() method Indicates whether the link record has the specified type. Signature: isType<TLinkType extends schema.ILinkType>(linkType: TLinkType): this is ITypedSeededResultRecord<TLinkType>; Introduced: API version 2.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the link type, which is inferred from the linkType parameter. Parameters Parameter Type Description linkType TLinkType The link type to compare the result record against. Returns: this is ITypedSeededResultRecord <!-- --> <TLinkType> true if the result record has the specified type; false otherwise."
  },
  "api/i2connect.records.iseededresultrecordbase.html": {
    "href": "api/i2connect.records.iseededresultrecordbase.html",
    "title": "records.ISeededResultRecordBase interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultRecordBase records.ISeededResultRecordBase interface A set of information and functionality that is common to all result records that are generated from seed records. Signature: interface ISeededResultRecordBase Introduced: API version 1.0 Properties Property Type Description id SeedId Gets the identifier of the result record, which is also the identifier of the seed record. Methods Method Description setSourceReference(sourceReference) Adds a source reference to the result record."
  },
  "api/i2connect.records.iseededresultrecordbase.id.html": {
    "href": "api/i2connect.records.iseededresultrecordbase.id.html",
    "title": "records.ISeededResultRecordBase.id property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultRecordBase > id records.ISeededResultRecordBase.id property Gets the identifier of the result record, which is also the identifier of the seed record. Signature: readonly id: SeedId; Returns: SeedId Introduced: API version 1.0"
  },
  "api/i2connect.records.iseededresultrecordbase.setsourcereference.html": {
    "href": "api/i2connect.records.iseededresultrecordbase.setsourcereference.html",
    "title": "records.ISeededResultRecordBase.setSourceReference() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeededResultRecordBase > setSourceReference records.ISeededResultRecordBase.setSourceReference() method Adds a source reference to the result record. Signature: setSourceReference(sourceReference: ISourceReference): void; Introduced: API version 1.0 Parameters Parameter Type Description sourceReference ISourceReference The source reference to add. Returns: void"
  },
  "api/i2connect.records.iseedentityrecord.html": {
    "href": "api/i2connect.records.iseedentityrecord.html",
    "title": "records.ISeedEntityRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedEntityRecord records.ISeedEntityRecord interface A seed entity record. Signature: interface ISeedEntityRecord extends ISeedRecordBase Extends: ISeedRecordBase Introduced: API version 1.0 Properties Property Type Description connectorKeys readonly IConnectorKey <!-- --> [] Gets the keys that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) isLink false Indicates that the seed is an entity record. label string Gets the label of the seed record. (Inherited from ISeedRecordBase <!-- --> ) seedId SeedId Gets the identifier of the seed record. (Inherited from ISeedRecordBase <!-- --> ) sourceIdentifiers readonly ISourceIdentifier <!-- --> [] Gets the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) Methods Method Description connectorKeysByType(type) Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) isType(entityType) Indicates whether the entity record has the specified type."
  },
  "api/i2connect.records.iseedentityrecord.islink.html": {
    "href": "api/i2connect.records.iseedentityrecord.islink.html",
    "title": "records.ISeedEntityRecord.isLink property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedEntityRecord > isLink records.ISeedEntityRecord.isLink property Indicates that the seed is an entity record. Signature: isLink: false; Returns: false Introduced: API version 2.2"
  },
  "api/i2connect.records.iseedentityrecord.istype.html": {
    "href": "api/i2connect.records.iseedentityrecord.istype.html",
    "title": "records.ISeedEntityRecord.isType() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedEntityRecord > isType records.ISeedEntityRecord.isType() method Indicates whether the entity record has the specified type. Signature: isType<TEntityType extends schema.IEntityType>(entityType: TEntityType): this is ITypedSeedEntityRecord<TEntityType>; Introduced: API version 2.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the entity type, which is inferred from the entityType parameter. Parameters Parameter Type Description entityType TEntityType The entity type to compare the seed record against. Returns: this is ITypedSeedEntityRecord <!-- --> <TEntityType> true if the seed record has the specified type; false otherwise."
  },
  "api/i2connect.records.iseedlinkrecord.direction.html": {
    "href": "api/i2connect.records.iseedlinkrecord.direction.html",
    "title": "records.ISeedLinkRecord.direction property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord > direction records.ISeedLinkRecord.direction property Gets the direction of the link record. Signature: readonly direction: data.LinkDirection; Returns: data.LinkDirection Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedlinkrecord.fromend.html": {
    "href": "api/i2connect.records.iseedlinkrecord.fromend.html",
    "title": "records.ISeedLinkRecord.fromEnd property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord > fromEnd records.ISeedLinkRecord.fromEnd property Gets the seed entity record at the \"from\" end of the link record. Signature: readonly fromEnd: ISeedEntityRecord; Returns: ISeedEntityRecord Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedlinkrecord.html": {
    "href": "api/i2connect.records.iseedlinkrecord.html",
    "title": "records.ISeedLinkRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord records.ISeedLinkRecord interface A seed link record. Signature: interface ISeedLinkRecord extends ISeedRecordBase Extends: ISeedRecordBase Introduced: API version 1.0 Properties Property Type Description connectorKeys readonly IConnectorKey <!-- --> [] Gets the keys that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) direction data.LinkDirection Gets the direction of the link record. fromEnd ISeedEntityRecord Gets the seed entity record at the \"from\" end of the link record. isLink true Indicates that the seed is a link record. label string Gets the label of the seed record. (Inherited from ISeedRecordBase <!-- --> ) seedId SeedId Gets the identifier of the seed record. (Inherited from ISeedRecordBase <!-- --> ) sourceIdentifiers readonly ISourceIdentifier <!-- --> [] Gets the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) toEnd ISeedEntityRecord Gets the seed entity record at the \"to\" end of the link record. Methods Method Description connectorKeysByType(type) Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) isType(linkType) Indicates whether the link record has the specified type."
  },
  "api/i2connect.records.iseedlinkrecord.islink.html": {
    "href": "api/i2connect.records.iseedlinkrecord.islink.html",
    "title": "records.ISeedLinkRecord.isLink property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord > isLink records.ISeedLinkRecord.isLink property Indicates that the seed is a link record. Signature: isLink: true; Returns: true Introduced: API version 2.2"
  },
  "api/i2connect.records.iseedlinkrecord.istype.html": {
    "href": "api/i2connect.records.iseedlinkrecord.istype.html",
    "title": "records.ISeedLinkRecord.isType() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord > isType records.ISeedLinkRecord.isType() method Indicates whether the link record has the specified type. Signature: isType<TLinkType extends schema.ILinkType>(linkType: TLinkType): this is ITypedSeedLinkRecord<TLinkType>; Introduced: API version 2.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the link type, which is inferred from the linkType parameter. Parameters Parameter Type Description linkType TLinkType The link type to compare the seed record against. Returns: this is ITypedSeedLinkRecord <!-- --> <TLinkType> true if the seed record has the specified type; false otherwise."
  },
  "api/i2connect.records.iseedlinkrecord.toend.html": {
    "href": "api/i2connect.records.iseedlinkrecord.toend.html",
    "title": "records.ISeedLinkRecord.toEnd property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedLinkRecord > toEnd records.ISeedLinkRecord.toEnd property Gets the seed entity record at the \"to\" end of the link record. Signature: readonly toEnd: ISeedEntityRecord; Returns: ISeedEntityRecord Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedrecordbase.connectorkeys.html": {
    "href": "api/i2connect.records.iseedrecordbase.connectorkeys.html",
    "title": "records.ISeedRecordBase.connectorKeys property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > connectorKeys records.ISeedRecordBase.connectorKeys property Gets the keys that came from the current connector, from the source identifiers of the seed record. Signature: readonly connectorKeys: readonly IConnectorKey[]; Returns: readonly IConnectorKey [] Introduced: API version 1.0 Remarks Each key contains the identifier and type of some data that originated from the current connector. This array contains more than one key only if multiple records have been merged on the chart. If the identifiers are unique in your source system, you must iterate over each key in this array. Note: Your seed constraints are no guarantee of the types of these keys. If the user has merged different types of record, you will get different key types. Use the connectorKeysByType() method to get keys only of the type that you are interested in."
  },
  "api/i2connect.records.iseedrecordbase.connectorkeysbytype.html": {
    "href": "api/i2connect.records.iseedrecordbase.connectorkeysbytype.html",
    "title": "records.ISeedRecordBase.connectorKeysByType() method",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > connectorKeysByType records.ISeedRecordBase.connectorKeysByType() method Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. Signature: connectorKeysByType(type: schema.IItemType): readonly IConnectorKey[]; Introduced: API version 1.0 Parameters Parameter Type Description type schema.IItemType The item type of the keys to retrieve. Returns: readonly IConnectorKey <!-- --> [] Remarks See the documentation for connectorKeys for more information."
  },
  "api/i2connect.records.iseedrecordbase.html": {
    "href": "api/i2connect.records.iseedrecordbase.html",
    "title": "records.ISeedRecordBase interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase records.ISeedRecordBase interface A set of information and functionality that is common to all seed records. Signature: interface ISeedRecordBase Introduced: API version 1.0 Properties Property Type Description connectorKeys readonly IConnectorKey <!-- --> [] Gets the keys that came from the current connector, from the source identifiers of the seed record. label string Gets the label of the seed record. seedId SeedId Gets the identifier of the seed record. sourceIdentifiers readonly ISourceIdentifier <!-- --> [] Gets the source identifiers of the seed record. Methods Method Description connectorKeysByType(type) Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record."
  },
  "api/i2connect.records.iseedrecordbase.label.html": {
    "href": "api/i2connect.records.iseedrecordbase.label.html",
    "title": "records.ISeedRecordBase.label property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > label records.ISeedRecordBase.label property Gets the label of the seed record. Signature: readonly label: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedrecordbase.seedid.html": {
    "href": "api/i2connect.records.iseedrecordbase.seedid.html",
    "title": "records.ISeedRecordBase.seedId property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > seedId records.ISeedRecordBase.seedId property Gets the identifier of the seed record. Signature: readonly seedId: SeedId; Returns: SeedId Introduced: API version 1.0"
  },
  "api/i2connect.records.iseedrecordbase.sourceidentifiers.html": {
    "href": "api/i2connect.records.iseedrecordbase.sourceidentifiers.html",
    "title": "records.ISeedRecordBase.sourceIdentifiers property",
    "keywords": "Home > @i2analyze/i2connect > records > ISeedRecordBase > sourceIdentifiers records.ISeedRecordBase.sourceIdentifiers property Gets the source identifiers of the seed record. Signature: readonly sourceIdentifiers: readonly ISourceIdentifier[]; Returns: readonly ISourceIdentifier [] Introduced: API version 1.2"
  },
  "api/i2connect.records.isourceidentifier.html": {
    "href": "api/i2connect.records.isourceidentifier.html",
    "title": "records.ISourceIdentifier interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceIdentifier records.ISourceIdentifier interface A source identifier for a record. Signature: interface ISourceIdentifier Introduced: API version 1.2 Properties Property Type Description key readonly string[] Gets the values that make up the source identifier key. type string Gets the type of the source identifier."
  },
  "api/i2connect.records.isourceidentifier.key.html": {
    "href": "api/i2connect.records.isourceidentifier.key.html",
    "title": "records.ISourceIdentifier.key property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceIdentifier > key records.ISourceIdentifier.key property Gets the values that make up the source identifier key. Signature: readonly key: readonly string[]; Returns: readonly string[] Introduced: API version 1.2"
  },
  "api/i2connect.records.isourceidentifier.type.html": {
    "href": "api/i2connect.records.isourceidentifier.type.html",
    "title": "records.ISourceIdentifier.type property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceIdentifier > type records.ISourceIdentifier.type property Gets the type of the source identifier. Signature: readonly type: string; Returns: string Introduced: API version 1.2"
  },
  "api/i2connect.records.isourcereference.description.html": {
    "href": "api/i2connect.records.isourcereference.description.html",
    "title": "records.ISourceReference.description property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > description records.ISourceReference.description property Gets the description of the source that the source reference describes. Signature: readonly description?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.isourcereference.html": {
    "href": "api/i2connect.records.isourcereference.html",
    "title": "records.ISourceReference interface",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference records.ISourceReference interface A source reference for a record. Signature: interface ISourceReference Introduced: API version 1.0 Properties Property Type Description description? string (Optional) Gets the description of the source that the source reference describes. imageUrl? string (Optional) Gets the URL of an image of the source that the source reference describes. location? string (Optional) Gets the location of the source that the source reference describes. name string Gets the name of the source that the source reference describes. type? string (Optional) Gets the type of the source that the source reference describes."
  },
  "api/i2connect.records.isourcereference.imageurl.html": {
    "href": "api/i2connect.records.isourcereference.imageurl.html",
    "title": "records.ISourceReference.imageUrl property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > imageUrl records.ISourceReference.imageUrl property Gets the URL of an image of the source that the source reference describes. Signature: readonly imageUrl?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.isourcereference.location.html": {
    "href": "api/i2connect.records.isourcereference.location.html",
    "title": "records.ISourceReference.location property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > location records.ISourceReference.location property Gets the location of the source that the source reference describes. Signature: readonly location?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.isourcereference.name.html": {
    "href": "api/i2connect.records.isourcereference.name.html",
    "title": "records.ISourceReference.name property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > name records.ISourceReference.name property Gets the name of the source that the source reference describes. Signature: readonly name: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.isourcereference.type.html": {
    "href": "api/i2connect.records.isourcereference.type.html",
    "title": "records.ISourceReference.type property",
    "keywords": "Home > @i2analyze/i2connect > records > ISourceReference > type records.ISourceReference.type property Gets the type of the source that the source reference describes. Signature: readonly type?: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.records.itypedseededresultrecord.html": {
    "href": "api/i2connect.records.itypedseededresultrecord.html",
    "title": "records.ITypedSeededResultRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeededResultRecord records.ITypedSeededResultRecord interface A result record of a specific type that is generated from a seed record. Signature: interface ITypedSeededResultRecord<TItemType extends schema.IItemType = schema.IItemType> extends ISeededResultRecordBase Extends: ISeededResultRecordBase Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType (default: schema.IItemType ) The type of the result record. Properties Property Type Description id SeedId Gets the identifier of the result record, which is also the identifier of the seed record. (Inherited from ISeededResultRecordBase <!-- --> ) Methods Method Description setProperties(properties) Sets the values of several properties on the result record. setProperty(displayName, value) Sets the value of a property on the result record. setSourceReference(sourceReference) Adds a source reference to the result record. (Inherited from ISeededResultRecordBase <!-- --> )"
  },
  "api/i2connect.records.itypedseededresultrecord.setproperties.html": {
    "href": "api/i2connect.records.itypedseededresultrecord.setproperties.html",
    "title": "records.ITypedSeededResultRecord.setProperties() method",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeededResultRecord > setProperties records.ITypedSeededResultRecord.setProperties() method Sets the values of several properties on the result record. Signature: setProperties(properties: utility.SetRecordProperties<TItemType>): void; Introduced: API version 2.0 Parameters Parameter Type Description properties utility.SetRecordProperties <!-- --> <TItemType> An object that contains name-value pairs, where the names match property type names, and the values are those that you want to set. Returns: void Example Use code like this to set several properties on the seeded result record at once: seededRecord.setProperties({ 'property name 1': 'property value', 'property name 2': 4 });"
  },
  "api/i2connect.records.itypedseededresultrecord.setproperty.html": {
    "href": "api/i2connect.records.itypedseededresultrecord.setproperty.html",
    "title": "records.ITypedSeededResultRecord.setProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeededResultRecord > setProperty records.ITypedSeededResultRecord.setProperty() method Sets the value of a property on the result record. Signature: setProperty<TPropertyName extends utility.PropertyTypeDisplayNames<TItemType>>(displayName: TPropertyName, value: utility.PropertyValueType<utility.PropertyTypeFromDisplayName<TItemType, TPropertyName>> | undefined): void; Introduced: API version 1.0 Type Parameters Parameter Type Description TPropertyName extends utility.PropertyTypeDisplayNames <TItemType> The type display name, which is inferred from the displayName parameter. Parameters Parameter Type Description displayName TPropertyName The display name of the property type. value utility.PropertyValueType <!-- --> < utility.PropertyTypeFromDisplayName <!-- --> <TItemType, TPropertyName>> | undefined The value for the property. Returns: void Remarks This method allows you to set a property on the record, given the display name of its property type from the schema. Example Use code like this to set an individual property on the seeded result record: seededResultRecord.setProperty('property name 1', 'property value'); seededResultRecord.setProperty('property name 2', 4);"
  },
  "api/i2connect.records.itypedseedentityrecord.html": {
    "href": "api/i2connect.records.itypedseedentityrecord.html",
    "title": "records.ITypedSeedEntityRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeedEntityRecord records.ITypedSeedEntityRecord interface A seed record of a specific entity type. Signature: interface ITypedSeedEntityRecord<TEntityType extends schema.IEntityType> extends ITypedSeedRecord<TEntityType>, ISeedEntityRecord Extends: ITypedSeedRecord <!-- --> <TEntityType>, ISeedEntityRecord Introduced: API version 2.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the seed record. Properties Property Type Description connectorKeys readonly IConnectorKey <!-- --> [] Gets the keys that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) isLink false Indicates that the seed is an entity record. (Inherited from ISeedEntityRecord <!-- --> ) label string Gets the label of the seed record. (Inherited from ISeedRecordBase <!-- --> ) seedId SeedId Gets the identifier of the seed record. (Inherited from ISeedRecordBase <!-- --> ) sourceIdentifiers readonly ISourceIdentifier <!-- --> [] Gets the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) Methods Method Description connectorKeysByType(type) Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) getProperty(displayName) Gets the value of the specified property of the seed record. (Inherited from ITypedSeedRecord <!-- --> ) hasProperty(displayName) Indicates whether the seed record has a property with the specified display name. (Inherited from ITypedSeedRecord <!-- --> ) isType(entityType) Indicates whether the entity record has the specified type. (Inherited from ISeedEntityRecord <!-- --> )"
  },
  "api/i2connect.records.itypedseedlinkrecord.html": {
    "href": "api/i2connect.records.itypedseedlinkrecord.html",
    "title": "records.ITypedSeedLinkRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeedLinkRecord records.ITypedSeedLinkRecord interface A seed record of a specific link type. Signature: interface ITypedSeedLinkRecord<TLinkType extends schema.ILinkType> extends ITypedSeedRecord<TLinkType>, ISeedLinkRecord Extends: ITypedSeedRecord <!-- --> <TLinkType>, ISeedLinkRecord Introduced: API version 2.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the seed record. Properties Property Type Description connectorKeys readonly IConnectorKey <!-- --> [] Gets the keys that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) direction data.LinkDirection Gets the direction of the link record. (Inherited from ISeedLinkRecord <!-- --> ) fromEnd ISeedEntityRecord Gets the seed entity record at the \"from\" end of the link record. (Inherited from ISeedLinkRecord <!-- --> ) isLink true Indicates that the seed is a link record. (Inherited from ISeedLinkRecord <!-- --> ) label string Gets the label of the seed record. (Inherited from ISeedRecordBase <!-- --> ) seedId SeedId Gets the identifier of the seed record. (Inherited from ISeedRecordBase <!-- --> ) sourceIdentifiers readonly ISourceIdentifier <!-- --> [] Gets the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) toEnd ISeedEntityRecord Gets the seed entity record at the \"to\" end of the link record. (Inherited from ISeedLinkRecord <!-- --> ) Methods Method Description connectorKeysByType(type) Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) getProperty(displayName) Gets the value of the specified property of the seed record. (Inherited from ITypedSeedRecord <!-- --> ) hasProperty(displayName) Indicates whether the seed record has a property with the specified display name. (Inherited from ITypedSeedRecord <!-- --> ) isType(linkType) Indicates whether the link record has the specified type. (Inherited from ISeedLinkRecord <!-- --> )"
  },
  "api/i2connect.records.itypedseedrecord.getproperty.html": {
    "href": "api/i2connect.records.itypedseedrecord.getproperty.html",
    "title": "records.ITypedSeedRecord.getProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeedRecord > getProperty records.ITypedSeedRecord.getProperty() method Gets the value of the specified property of the seed record. Signature: getProperty<TPropertyName extends utility.PropertyTypeDisplayNames<TItemType>>(displayName: TPropertyName): utility.PropertyValueType<utility.PropertyTypeFromDisplayName<TItemType, TPropertyName>> | undefined; Introduced: API version 1.0 Type Parameters Parameter Type Description TPropertyName extends utility.PropertyTypeDisplayNames <TItemType> The type of the display name of the property type, which is inferred from the 'displayName' parameter. Parameters Parameter Type Description displayName TPropertyName The display name of the property type. Returns: utility.PropertyValueType <!-- --> < utility.PropertyTypeFromDisplayName <!-- --> <TItemType, TPropertyName>> | undefined The property value."
  },
  "api/i2connect.records.itypedseedrecord.hasproperty.html": {
    "href": "api/i2connect.records.itypedseedrecord.hasproperty.html",
    "title": "records.ITypedSeedRecord.hasProperty() method",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeedRecord > hasProperty records.ITypedSeedRecord.hasProperty() method Indicates whether the seed record has a property with the specified display name. Signature: hasProperty<TPropertyName extends utility.PropertyTypeDisplayNames<TItemType>>(displayName: TPropertyName): boolean; Introduced: API version 1.0 Type Parameters Parameter Type Description TPropertyName extends utility.PropertyTypeDisplayNames <TItemType> The type of display names of the property type, which is inferred from the 'displayName' parameter. Parameters Parameter Type Description displayName TPropertyName The display name of the property type. Returns: boolean true if the seed record has a displayName property; false otherwise."
  },
  "api/i2connect.records.itypedseedrecord.html": {
    "href": "api/i2connect.records.itypedseedrecord.html",
    "title": "records.ITypedSeedRecord interface",
    "keywords": "Home > @i2analyze/i2connect > records > ITypedSeedRecord records.ITypedSeedRecord interface A seed record of a specific type. Signature: interface ITypedSeedRecord<TItemType extends schema.IItemType> extends ISeedRecordBase Extends: ISeedRecordBase Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The type of the seed record. Properties Property Type Description connectorKeys readonly IConnectorKey <!-- --> [] Gets the keys that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) label string Gets the label of the seed record. (Inherited from ISeedRecordBase <!-- --> ) seedId SeedId Gets the identifier of the seed record. (Inherited from ISeedRecordBase <!-- --> ) sourceIdentifiers readonly ISourceIdentifier <!-- --> [] Gets the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) Methods Method Description connectorKeysByType(type) Gets the keys of the specified type that came from the current connector, from the source identifiers of the seed record. (Inherited from ISeedRecordBase <!-- --> ) getProperty(displayName) Gets the value of the specified property of the seed record. hasProperty(displayName) Indicates whether the seed record has a property with the specified display name."
  },
  "api/i2connect.records.resultrecordid.html": {
    "href": "api/i2connect.records.resultrecordid.html",
    "title": "records.ResultRecordId type",
    "keywords": "Home > @i2analyze/i2connect > records > ResultRecordId records.ResultRecordId type The identifier of a newly created result record. Signature: type ResultRecordId = string; Introduced: API version 1.0"
  },
  "api/i2connect.records.resultrecordidtype.html": {
    "href": "api/i2connect.records.resultrecordidtype.html",
    "title": "records.ResultRecordIdType type",
    "keywords": "Home > @i2analyze/i2connect > records > ResultRecordIdType records.ResultRecordIdType type The type of an identifier for a newly created result record. Signature: type ResultRecordIdType = ResultRecordId | ISourceIdentifier; References: ResultRecordId <!-- --> , ISourceIdentifier Introduced: API version 1.2"
  },
  "api/i2connect.records.seedid.html": {
    "href": "api/i2connect.records.seedid.html",
    "title": "records.SeedId type",
    "keywords": "Home > @i2analyze/i2connect > records > SeedId records.SeedId type The identifier of a seed record. Signature: type SeedId = string; Introduced: API version 1.0"
  },
  "api/i2connect.schema.html": {
    "href": "api/i2connect.schema.html",
    "title": "schema namespace",
    "keywords": "Home > @i2analyze/i2connect > schema schema namespace The members of the schema namespace provide access to the specifications that govern the structure of records in an i2 Connect service. Signature: export declare namespace schema Introduced: API version 1.0 Interfaces Interface Description IEntityType An entity type. IItemType A set of information that is common to all entity and link types. ILinkType A link type. IPossibleValue A possible value for a property whose property type has a string-based logical type. IPropertyType A property type. ISchema An i2 Analyze schema."
  },
  "api/i2connect.schema.ientitytype.html": {
    "href": "api/i2connect.schema.ientitytype.html",
    "title": "schema.IEntityType interface",
    "keywords": "Home > @i2analyze/i2connect > schema > IEntityType schema.IEntityType interface An entity type. Signature: interface IEntityType extends IItemType Extends: IItemType Introduced: API version 1.0 Properties Property Type Description id string Gets the identifier of the item type. (Inherited from IItemType <!-- --> ) isLink false Indicates that the item type is an entity type. propertyTypes TPropertyTypes Gets all the property types of the item type. (Inherited from IItemType <!-- --> )"
  },
  "api/i2connect.schema.ientitytype.islink.html": {
    "href": "api/i2connect.schema.ientitytype.islink.html",
    "title": "schema.IEntityType.isLink property",
    "keywords": "Home > @i2analyze/i2connect > schema > IEntityType > isLink schema.IEntityType.isLink property Indicates that the item type is an entity type. Signature: readonly isLink: false; Returns: false Introduced: API version 1.0"
  },
  "api/i2connect.schema.iitemtype.html": {
    "href": "api/i2connect.schema.iitemtype.html",
    "title": "schema.IItemType interface",
    "keywords": "Home > @i2analyze/i2connect > schema > IItemType schema.IItemType interface A set of information that is common to all entity and link types. Signature: interface IItemType<TPropertyTypes = Record<string, IPropertyType>> Introduced: API version 1.0 Type Parameters Parameter Type Description TPropertyTypes any (default: Record<string, IPropertyType >) The types of the properties of a record that has the item type. Properties Property Type Description id string Gets the identifier of the item type. propertyTypes TPropertyTypes Gets all the property types of the item type."
  },
  "api/i2connect.schema.iitemtype.id.html": {
    "href": "api/i2connect.schema.iitemtype.id.html",
    "title": "schema.IItemType.id property",
    "keywords": "Home > @i2analyze/i2connect > schema > IItemType > id schema.IItemType.id property Gets the identifier of the item type. Signature: readonly id: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.schema.iitemtype.propertytypes.html": {
    "href": "api/i2connect.schema.iitemtype.propertytypes.html",
    "title": "schema.IItemType.propertyTypes property",
    "keywords": "Home > @i2analyze/i2connect > schema > IItemType > propertyTypes schema.IItemType.propertyTypes property Gets all the property types of the item type. Signature: readonly propertyTypes: TPropertyTypes; Returns: TPropertyTypes Introduced: API version 1.0"
  },
  "api/i2connect.schema.ilinktype.html": {
    "href": "api/i2connect.schema.ilinktype.html",
    "title": "schema.ILinkType interface",
    "keywords": "Home > @i2analyze/i2connect > schema > ILinkType schema.ILinkType interface A link type. Signature: interface ILinkType extends IItemType Extends: IItemType Introduced: API version 1.0 Properties Property Type Description id string Gets the identifier of the item type. (Inherited from IItemType <!-- --> ) isLink true Indicates that the item type is a link type. propertyTypes TPropertyTypes Gets all the property types of the item type. (Inherited from IItemType <!-- --> )"
  },
  "api/i2connect.schema.ilinktype.islink.html": {
    "href": "api/i2connect.schema.ilinktype.islink.html",
    "title": "schema.ILinkType.isLink property",
    "keywords": "Home > @i2analyze/i2connect > schema > ILinkType > isLink schema.ILinkType.isLink property Indicates that the item type is a link type. Signature: readonly isLink: true; Returns: true Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipossiblevalue.displayvalue.html": {
    "href": "api/i2connect.schema.ipossiblevalue.displayvalue.html",
    "title": "schema.IPossibleValue.displayValue property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPossibleValue > displayValue schema.IPossibleValue.displayValue property Gets the possible value in a form that is suitable for display. Signature: readonly displayValue: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipossiblevalue.html": {
    "href": "api/i2connect.schema.ipossiblevalue.html",
    "title": "schema.IPossibleValue interface",
    "keywords": "Home > @i2analyze/i2connect > schema > IPossibleValue schema.IPossibleValue interface A possible value for a property whose property type has a string-based logical type. Signature: interface IPossibleValue Introduced: API version 1.0 Properties Property Type Description displayValue string Gets the possible value in a form that is suitable for display. value string Gets the possible value."
  },
  "api/i2connect.schema.ipossiblevalue.value.html": {
    "href": "api/i2connect.schema.ipossiblevalue.value.html",
    "title": "schema.IPossibleValue.value property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPossibleValue > value schema.IPossibleValue.value property Gets the possible value. Signature: readonly value: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipropertytype.html": {
    "href": "api/i2connect.schema.ipropertytype.html",
    "title": "schema.IPropertyType interface",
    "keywords": "Home > @i2analyze/i2connect > schema > IPropertyType schema.IPropertyType interface A property type. Signature: interface IPropertyType Introduced: API version 1.0 Properties Property Type Description id string Gets the identifier of the property type. logicalType data.LogicalType Gets the logical type of the value of a property that has the property type. possibleValues? readonly IPossibleValue <!-- --> [] (Optional) Gets the possible values that the property type defines, which are present only when logicalType is suggestedFromList or selectedFromList ."
  },
  "api/i2connect.schema.ipropertytype.id.html": {
    "href": "api/i2connect.schema.ipropertytype.id.html",
    "title": "schema.IPropertyType.id property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPropertyType > id schema.IPropertyType.id property Gets the identifier of the property type. Signature: readonly id: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipropertytype.logicaltype.html": {
    "href": "api/i2connect.schema.ipropertytype.logicaltype.html",
    "title": "schema.IPropertyType.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPropertyType > logicalType schema.IPropertyType.logicalType property Gets the logical type of the value of a property that has the property type. Signature: readonly logicalType: data.LogicalType; Returns: data.LogicalType Introduced: API version 1.0"
  },
  "api/i2connect.schema.ipropertytype.possiblevalues.html": {
    "href": "api/i2connect.schema.ipropertytype.possiblevalues.html",
    "title": "schema.IPropertyType.possibleValues property",
    "keywords": "Home > @i2analyze/i2connect > schema > IPropertyType > possibleValues schema.IPropertyType.possibleValues property Gets the possible values that the property type defines, which are present only when logicalType is suggestedFromList or selectedFromList <!-- --> . Signature: readonly possibleValues?: readonly IPossibleValue[]; Returns: readonly IPossibleValue [] Introduced: API version 1.0"
  },
  "api/i2connect.schema.ischema.entitytypes.html": {
    "href": "api/i2connect.schema.ischema.entitytypes.html",
    "title": "schema.ISchema.entityTypes property",
    "keywords": "Home > @i2analyze/i2connect > schema > ISchema > entityTypes schema.ISchema.entityTypes property Gets the entity types that the schema defines. Signature: readonly entityTypes: Record<string, schema.IEntityType>; Returns: Record<string, schema.IEntityType > Introduced: API version 1.0"
  },
  "api/i2connect.schema.ischema.html": {
    "href": "api/i2connect.schema.ischema.html",
    "title": "schema.ISchema interface",
    "keywords": "Home > @i2analyze/i2connect > schema > ISchema schema.ISchema interface An i2 Analyze schema. Signature: interface ISchema Introduced: API version 1.0 Properties Property Type Description entityTypes Record<string, schema.IEntityType <!-- --> > Gets the entity types that the schema defines. linkTypes Record<string, schema.ILinkType <!-- --> > Gets the link types that the schema defines."
  },
  "api/i2connect.schema.ischema.linktypes.html": {
    "href": "api/i2connect.schema.ischema.linktypes.html",
    "title": "schema.ISchema.linkTypes property",
    "keywords": "Home > @i2analyze/i2connect > schema > ISchema > linkTypes schema.ISchema.linkTypes property Gets the link types that the schema defines. Signature: readonly linkTypes: Record<string, schema.ILinkType>; Returns: Record<string, schema.ILinkType > Introduced: API version 1.0"
  },
  "api/i2connect.services.accesslevel.html": {
    "href": "api/i2connect.services.accesslevel.html",
    "title": "services.AccessLevel type",
    "keywords": "Home > @i2analyze/i2connect > services > AccessLevel services.AccessLevel type The level of access that a user has to some data. Signature: type AccessLevel = 'none' | 'update' | 'readOnly'; Introduced: API version 1.2"
  },
  "api/i2connect.services.authenticationfieldtype.html": {
    "href": "api/i2connect.services.authenticationfieldtype.html",
    "title": "services.AuthenticationFieldType type",
    "keywords": "Home > @i2analyze/i2connect > services > AuthenticationFieldType services.AuthenticationFieldType type A type for an authentication field, which can be 'text' or 'password' <!-- --> . Signature: type AuthenticationFieldType = 'text' | 'password'; Introduced: API version 2.0"
  },
  "api/i2connect.services.authform.html": {
    "href": "api/i2connect.services.authform.html",
    "title": "services.AuthForm type",
    "keywords": "Home > @i2analyze/i2connect > services > AuthForm services.AuthForm type An authentication form. Signature: type AuthForm = Record<string, IAuthenticationField>; References: IAuthenticationField Introduced: API version 2.0"
  },
  "api/i2connect.services.basicform.html": {
    "href": "api/i2connect.services.basicform.html",
    "title": "services.BasicForm type",
    "keywords": "Home > @i2analyze/i2connect > services > BasicForm services.BasicForm type A basic form for an i2 Connect service. Signature: type BasicForm = Record<string, ICondition>; References: ICondition Introduced: API version 2.0"
  },
  "api/i2connect.services.charlimitunits.html": {
    "href": "api/i2connect.services.charlimitunits.html",
    "title": "services.CharLimitUnits type",
    "keywords": "Home > @i2analyze/i2connect > services > CharLimitUnits services.CharLimitUnits type The units to use in constraints on the length of string values. Signature: type CharLimitUnits = 'utf8bytes' | 'utf16codeunits'; Introduced: API version 1.0"
  },
  "api/i2connect.services.hidepredicate.html": {
    "href": "api/i2connect.services.hidepredicate.html",
    "title": "services.HidePredicate type",
    "keywords": "Home > @i2analyze/i2connect > services > HidePredicate services.HidePredicate type A function that determines whether a service or condition should be hidden, based on the contents of an services.IRequestInformation object that it receives. Signature: type HidePredicate = (requestInformation: IRequestInformation) => boolean | Promise<boolean>; References: IRequestInformation Introduced: API version 1.2 Parameters Parameter Description requestInformation Information that the function can use to determine whether the service or condition should be hidden."
  },
  "api/i2connect.services.html": {
    "href": "api/i2connect.services.html",
    "title": "services namespace",
    "keywords": "Home > @i2analyze/i2connect > services services namespace The members of the services namespace allow you to configure and implement the services in a connector. Signature: export declare namespace services Introduced: API version 1.0 Interfaces Interface Description IAuthenticationField A field on an authentication dialog. IAuthenticator An authenticator, which provides a service with user authentication functionality. IAuthenticatorConfig A collection of properties that provide configuration for an authenticator. IAuthenticatorServiceConfig A collection of properties that define whether a service requires user authentication, and how it behaves if so. IBooleanCondition A condition that prompts the user for a Boolean value. ICharLimit A constraint on the length of a string value. IConditionBase A set of information that is common to all service conditions. ICoreServiceConfig A collection of properties that provide the name and configuration for a service. IDateAndTimeCondition A condition that prompts the user for a date-and-time value. IDateCondition A condition that prompts the user for a date value. IDecimalCondition A condition that prompts the user for a decimal value. IFormSection A section of a form for an i2 Connect service. IFormServiceConfig A collection of properties that define whether a service requires user input, and how that input looks. IGeospatialAreaCondition A condition that prompts the user for a geospatial area value. IGeospatialCondition A condition that prompts the user for a geospatial value. IItemTypeConstraint A set of constraints that apply to seeds that have a particular item type. ILongRunningServiceConfig A collection of properties that define whether a service involves a long-running operation. ILongRunningState A collection of methods through which an i2 Connect service can communicate with a user who initiated a long-running operation. IMultiLineStringCondition A condition that prompts the user for a multiple-line string value. INumberCondition A condition that prompts the user for a numeric value. IRequestInformation A set of information from an incoming HTTP request. IRequiresPossibleValues A type that indicates that a string condition can present a list of possible values. IResult A result from a service method on a connector for the i2 Connect server. ISecurityPermission A set of access levels associated with the values of a particular security dimension. ISeedConstraints A set of constraints on the records that can be passed as seeds to a service. ISeededServiceConfig A collection of properties that provide the name and configuration for a service that might have item type seed constraints. ISeeds A set of seed records that the i2 Connect server passes to a service method. ISeedServiceConfig A collection of properties that define whether a service supports seeds, and the constraints on them. ISelectedFromCondition A condition that prompts the user to select a value from a list. ISemanticSeed A semantic seed for a search operation, which contains the seed record and the semantic property values. ISemanticSeedConstraints A set of semantic property type constraints on the records that can be passed as seeds to a service. ISemanticSeededServiceConfig A collection of properties that provide the name and configuration for a service that has semantic property type seed constraints. ISemanticSeedServiceConfig A collection of properties that define whether a service supports seeds with semantic property type constraints. IServiceCallbacks A set of methods that the server calls when it uses a service. ISingleLineStringCondition A condition that prompts the user for a single-line string value. IStringValidator A constraint on the contents of a string value. ISubstatus A piece of information about the progress of a long-running service method call. ISuggestedFromCondition A condition that prompts the user to provide a value or select one from a list. ISupportsMaxLength A type that indicates that a string condition can impose a length constraint on values. ISupportsStringValidation A type that indicates that a string condition can impose a validation constraint on values. ITimeCondition A condition that prompts the user for a time value. IVisualQueryServiceCallbacks A set of methods that the server calls when it uses a visual query service. IVisualQueryServiceConfig A collection of properties that provide the name and configuration for a visual query service. Type Aliases Type Alias Description AccessLevel The level of access that a user has to some data. AuthenticationFieldType A type for an authentication field, which can be 'text' or 'password' . AuthForm An authentication form. BasicForm A basic form for an i2 Connect service. CharLimitUnits The units to use in constraints on the length of string values. HidePredicate A function that determines whether a service or condition should be hidden, based on the contents of an services.IRequestInformation object that it receives. ICondition A condition for a service on an i2 Connect connector. IServiceConfig A collection of properties that provide the name and configuration for a service that might have item type seed constraints. IServiceConfigType The configuration information for a service on an i2 Connect connector. RequestSpecificValue A function that returns a value of type T based on the contents of an services.IRequestInformation object that it receives. SectionedForm A form with sections for an i2 Connect service. SemanticPropertyTypeIds Sets of semantic property type identifiers, keyed by strings that identify each set. SemanticSeeds A set of semantic seeds, keyed by the string identifiers of the constraints that they passed. SubstatusType A type for a piece of substatus information."
  },
  "api/i2connect.services.iauthenticationfield.html": {
    "href": "api/i2connect.services.iauthenticationfield.html",
    "title": "services.IAuthenticationField interface",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticationField services.IAuthenticationField interface A field on an authentication dialog. Signature: interface IAuthenticationField Introduced: API version 2.0 Properties Property Type Description label string Gets the label of the field. type AuthenticationFieldType Gets the type of the field."
  },
  "api/i2connect.services.iauthenticationfield.label.html": {
    "href": "api/i2connect.services.iauthenticationfield.label.html",
    "title": "services.IAuthenticationField.label property",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticationField > label services.IAuthenticationField.label property Gets the label of the field. Signature: readonly label: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.services.iauthenticationfield.type.html": {
    "href": "api/i2connect.services.iauthenticationfield.type.html",
    "title": "services.IAuthenticationField.type property",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticationField > type services.IAuthenticationField.type property Gets the type of the field. Signature: readonly type: AuthenticationFieldType; Returns: AuthenticationFieldType Introduced: API version 1.0"
  },
  "api/i2connect.services.iauthenticator.html": {
    "href": "api/i2connect.services.iauthenticator.html",
    "title": "services.IAuthenticator interface",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticator services.IAuthenticator interface An authenticator, which provides a service with user authentication functionality. Signature: interface IAuthenticator Introduced: API version 2.0"
  },
  "api/i2connect.services.iauthenticatorconfig.description.html": {
    "href": "api/i2connect.services.iauthenticatorconfig.description.html",
    "title": "services.IAuthenticatorConfig.description property",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticatorConfig > description services.IAuthenticatorConfig.description property Gets a description that the authenticator displays to tell users what to do in order to authenticate. Signature: readonly description: string; Returns: string Introduced: API version 1.0 Remarks The description string can contain simple markup that enables the inclusion of hyperlinks. Example A description that contains a hyperlink might look like this: Enter a user name and a password. In this example, the password must match the user name. For more information, [hyperlink]http://example.com/passwords click here[/hyperlink]."
  },
  "api/i2connect.services.iauthenticatorconfig.form.html": {
    "href": "api/i2connect.services.iauthenticatorconfig.form.html",
    "title": "services.IAuthenticatorConfig.form property",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticatorConfig > form services.IAuthenticatorConfig.form property Gets the authentication form to present to users. Signature: readonly form: TAuthForm; Returns: TAuthForm Introduced: API version 2.0"
  },
  "api/i2connect.services.iauthenticatorconfig.html": {
    "href": "api/i2connect.services.iauthenticatorconfig.html",
    "title": "services.IAuthenticatorConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticatorConfig services.IAuthenticatorConfig interface A collection of properties that provide configuration for an authenticator. Signature: interface IAuthenticatorConfig<TAuthForm extends Record<string, IAuthenticationField>> Introduced: API version 2.0 Type Parameters Parameter Type Description TAuthForm extends Record<string, IAuthenticationField > The type of the form that the authenticator uses. Properties Property Type Description description string Gets a description that the authenticator displays to tell users what to do in order to authenticate. form TAuthForm Gets the authentication form to present to users. id string Gets the identifier of the authenticator, which can be referenced by services."
  },
  "api/i2connect.services.iauthenticatorconfig.id.html": {
    "href": "api/i2connect.services.iauthenticatorconfig.id.html",
    "title": "services.IAuthenticatorConfig.id property",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticatorConfig > id services.IAuthenticatorConfig.id property Gets the identifier of the authenticator, which can be referenced by services. Signature: readonly id: string; Returns: string Introduced: API version 2.0"
  },
  "api/i2connect.services.iauthenticatorserviceconfig.authenticator.html": {
    "href": "api/i2connect.services.iauthenticatorserviceconfig.authenticator.html",
    "title": "services.IAuthenticatorServiceConfig.authenticator property",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticatorServiceConfig > authenticator services.IAuthenticatorServiceConfig.authenticator property Gets the authenticator to use, or undefined if authentication is not required. Signature: readonly authenticator?: IAuthenticator | undefined; Returns: IAuthenticator | undefined Introduced: API version 2.0"
  },
  "api/i2connect.services.iauthenticatorserviceconfig.html": {
    "href": "api/i2connect.services.iauthenticatorserviceconfig.html",
    "title": "services.IAuthenticatorServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > IAuthenticatorServiceConfig services.IAuthenticatorServiceConfig interface A collection of properties that define whether a service requires user authentication, and how it behaves if so. Signature: interface IAuthenticatorServiceConfig Introduced: API version 2.0 Properties Property Type Description authenticator? IAuthenticator | undefined (Optional) Gets the authenticator to use, or undefined if authentication is not required."
  },
  "api/i2connect.services.ibooleancondition.defaultvalue.html": {
    "href": "api/i2connect.services.ibooleancondition.defaultvalue.html",
    "title": "services.IBooleanCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IBooleanCondition > defaultValue services.IBooleanCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: boolean | RequestSpecificValue<boolean>; Returns: boolean | RequestSpecificValue <boolean> Introduced: API version 1.2"
  },
  "api/i2connect.services.ibooleancondition.html": {
    "href": "api/i2connect.services.ibooleancondition.html",
    "title": "services.IBooleanCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IBooleanCondition services.IBooleanCondition interface A condition that prompts the user for a Boolean value. Signature: interface IBooleanCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? boolean | RequestSpecificValue <!-- --> <boolean> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'boolean' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.ibooleancondition.logicaltype.html": {
    "href": "api/i2connect.services.ibooleancondition.logicaltype.html",
    "title": "services.IBooleanCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IBooleanCondition > logicalType services.IBooleanCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'boolean'; Returns: 'boolean' Introduced: API version 1.0"
  },
  "api/i2connect.services.icharlimit.html": {
    "href": "api/i2connect.services.icharlimit.html",
    "title": "services.ICharLimit interface",
    "keywords": "Home > @i2analyze/i2connect > services > ICharLimit services.ICharLimit interface A constraint on the length of a string value. Signature: interface ICharLimit Introduced: API version 1.0 Properties Property Type Description maxLength number Gets the maximum length of the string. maxLengthUnits CharLimitUnits Gets the units in which to interpret maxLength ."
  },
  "api/i2connect.services.icharlimit.maxlength.html": {
    "href": "api/i2connect.services.icharlimit.maxlength.html",
    "title": "services.ICharLimit.maxLength property",
    "keywords": "Home > @i2analyze/i2connect > services > ICharLimit > maxLength services.ICharLimit.maxLength property Gets the maximum length of the string. Signature: readonly maxLength: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.icharlimit.maxlengthunits.html": {
    "href": "api/i2connect.services.icharlimit.maxlengthunits.html",
    "title": "services.ICharLimit.maxLengthUnits property",
    "keywords": "Home > @i2analyze/i2connect > services > ICharLimit > maxLengthUnits services.ICharLimit.maxLengthUnits property Gets the units in which to interpret maxLength <!-- --> . Signature: readonly maxLengthUnits: CharLimitUnits; Returns: CharLimitUnits Introduced: API version 1.0"
  },
  "api/i2connect.services.icondition.html": {
    "href": "api/i2connect.services.icondition.html",
    "title": "services.ICondition type",
    "keywords": "Home > @i2analyze/i2connect > services > ICondition services.ICondition type A condition for a service on an i2 Connect connector. Signature: type ICondition = ISingleLineStringCondition | IMultiLineStringCondition | ISuggestedFromCondition | ISelectedFromCondition | INumberCondition | IDecimalCondition | IDateCondition | IDateAndTimeCondition | ITimeCondition | IBooleanCondition | IGeospatialCondition | IGeospatialAreaCondition; References: ISingleLineStringCondition <!-- --> , IMultiLineStringCondition <!-- --> , ISuggestedFromCondition <!-- --> , ISelectedFromCondition <!-- --> , INumberCondition <!-- --> , IDecimalCondition <!-- --> , IDateCondition <!-- --> , IDateAndTimeCondition <!-- --> , ITimeCondition <!-- --> , IBooleanCondition <!-- --> , IGeospatialCondition <!-- --> , IGeospatialAreaCondition Introduced: API version 1.0"
  },
  "api/i2connect.services.iconditionbase.description.html": {
    "href": "api/i2connect.services.iconditionbase.description.html",
    "title": "services.IConditionBase.description property",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase > description services.IConditionBase.description property Gets a description of the condition, which might be displayed in the user interface. Signature: readonly description?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.0 Remarks This property has supported a string value since version 1.0. A RequestSpecificValue\\<string\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.iconditionbase.hide.html": {
    "href": "api/i2connect.services.iconditionbase.hide.html",
    "title": "services.IConditionBase.hide property",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase > hide services.IConditionBase.hide property Gets whether the condition should be hidden from the current user, based on information in the request. Signature: readonly hide?: HidePredicate; Returns: HidePredicate Introduced: API version 1.2"
  },
  "api/i2connect.services.iconditionbase.html": {
    "href": "api/i2connect.services.iconditionbase.html",
    "title": "services.IConditionBase interface",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase services.IConditionBase interface A set of information that is common to all service conditions. Signature: interface IConditionBase Introduced: API version 1.0 Properties Property Type Description description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface."
  },
  "api/i2connect.services.iconditionbase.ismandatory.html": {
    "href": "api/i2connect.services.iconditionbase.ismandatory.html",
    "title": "services.IConditionBase.isMandatory property",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase > isMandatory services.IConditionBase.isMandatory property Indicates whether the user must provide a value for the condition before they can use the service. Signature: readonly isMandatory?: boolean; Returns: boolean Introduced: API version 1.0"
  },
  "api/i2connect.services.iconditionbase.label.html": {
    "href": "api/i2connect.services.iconditionbase.label.html",
    "title": "services.IConditionBase.label property",
    "keywords": "Home > @i2analyze/i2connect > services > IConditionBase > label services.IConditionBase.label property Gets the label for the condition, which is displayed in the user interface. Signature: readonly label: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.0 Remarks This property has supported a string value since version 1.0. A RequestSpecificValue\\<string\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.icoreserviceconfig.description.html": {
    "href": "api/i2connect.services.icoreserviceconfig.description.html",
    "title": "services.ICoreServiceConfig.description property",
    "keywords": "Home > @i2analyze/i2connect > services > ICoreServiceConfig > description services.ICoreServiceConfig.description property Gets a description of what the service does, which might be displayed to users. Signature: readonly description?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.0 Remarks This property has supported a string value since version 1.0. A RequestSpecificValue\\<string\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.icoreserviceconfig.haspersistentresultids.html": {
    "href": "api/i2connect.services.icoreserviceconfig.haspersistentresultids.html",
    "title": "services.ICoreServiceConfig.hasPersistentResultIds property",
    "keywords": "Home > @i2analyze/i2connect > services > ICoreServiceConfig > hasPersistentResultIds services.ICoreServiceConfig.hasPersistentResultIds property Indicates whether the identifiers of result records from the service are persistent from one call to the next. Signature: readonly hasPersistentResultIds?: boolean; Returns: boolean Introduced: API version 1.0"
  },
  "api/i2connect.services.icoreserviceconfig.hide.html": {
    "href": "api/i2connect.services.icoreserviceconfig.hide.html",
    "title": "services.ICoreServiceConfig.hide property",
    "keywords": "Home > @i2analyze/i2connect > services > ICoreServiceConfig > hide services.ICoreServiceConfig.hide property Gets whether the service should be hidden from the current user, based on information in the request. Signature: readonly hide?: HidePredicate; Returns: HidePredicate Introduced: API version 1.2"
  },
  "api/i2connect.services.icoreserviceconfig.html": {
    "href": "api/i2connect.services.icoreserviceconfig.html",
    "title": "services.ICoreServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > ICoreServiceConfig services.ICoreServiceConfig interface A collection of properties that provide the name and configuration for a service. Signature: interface ICoreServiceConfig Introduced: API version 2.2 Properties Property Type Description description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of what the service does, which might be displayed to users. hasPersistentResultIds? boolean (Optional) Indicates whether the identifiers of result records from the service are persistent from one call to the next. hide? HidePredicate (Optional) Gets whether the service should be hidden from the current user, based on information in the request. id string Gets the identifier of the service. name string | RequestSpecificValue <!-- --> <string> Gets the name of the service. resultItemTypes? schema.IItemType <!-- --> [] (Optional) Gets the item types that result records from the service can have."
  },
  "api/i2connect.services.icoreserviceconfig.id.html": {
    "href": "api/i2connect.services.icoreserviceconfig.id.html",
    "title": "services.ICoreServiceConfig.id property",
    "keywords": "Home > @i2analyze/i2connect > services > ICoreServiceConfig > id services.ICoreServiceConfig.id property Gets the identifier of the service. Signature: readonly id: string; Returns: string Introduced: API version 2.0"
  },
  "api/i2connect.services.icoreserviceconfig.name.html": {
    "href": "api/i2connect.services.icoreserviceconfig.name.html",
    "title": "services.ICoreServiceConfig.name property",
    "keywords": "Home > @i2analyze/i2connect > services > ICoreServiceConfig > name services.ICoreServiceConfig.name property Gets the name of the service. Signature: readonly name: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.0 Remarks This property has supported a string value since version 1.0. A RequestSpecificValue\\<string\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.icoreserviceconfig.resultitemtypes.html": {
    "href": "api/i2connect.services.icoreserviceconfig.resultitemtypes.html",
    "title": "services.ICoreServiceConfig.resultItemTypes property",
    "keywords": "Home > @i2analyze/i2connect > services > ICoreServiceConfig > resultItemTypes services.ICoreServiceConfig.resultItemTypes property Gets the item types that result records from the service can have. Signature: readonly resultItemTypes?: schema.IItemType[]; Returns: schema.IItemType [] Introduced: API version 1.0"
  },
  "api/i2connect.services.idateandtimecondition.defaultvalue.html": {
    "href": "api/i2connect.services.idateandtimecondition.defaultvalue.html",
    "title": "services.IDateAndTimeCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IDateAndTimeCondition > defaultValue services.IDateAndTimeCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: utility.WritableDateTime | RequestSpecificValue<utility.WritableDateTime>; Returns: utility.WritableDateTime | RequestSpecificValue < utility.WritableDateTime > Introduced: API version 2.0"
  },
  "api/i2connect.services.idateandtimecondition.html": {
    "href": "api/i2connect.services.idateandtimecondition.html",
    "title": "services.IDateAndTimeCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IDateAndTimeCondition services.IDateAndTimeCondition interface A condition that prompts the user for a date-and-time value. Signature: interface IDateAndTimeCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? utility.WritableDateTime | RequestSpecificValue <!-- --> < utility.WritableDateTime <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'dateAndTime' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.idateandtimecondition.logicaltype.html": {
    "href": "api/i2connect.services.idateandtimecondition.logicaltype.html",
    "title": "services.IDateAndTimeCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IDateAndTimeCondition > logicalType services.IDateAndTimeCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'dateAndTime'; Returns: 'dateAndTime' Introduced: API version 1.0"
  },
  "api/i2connect.services.idatecondition.defaultvalue.html": {
    "href": "api/i2connect.services.idatecondition.defaultvalue.html",
    "title": "services.IDateCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IDateCondition > defaultValue services.IDateCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: utility.WritableDate | RequestSpecificValue<utility.WritableDate>; Returns: utility.WritableDate | RequestSpecificValue < utility.WritableDate > Introduced: API version 2.0"
  },
  "api/i2connect.services.idatecondition.html": {
    "href": "api/i2connect.services.idatecondition.html",
    "title": "services.IDateCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IDateCondition services.IDateCondition interface A condition that prompts the user for a date value. Signature: interface IDateCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? utility.WritableDate | RequestSpecificValue <!-- --> < utility.WritableDate <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'date' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.idatecondition.logicaltype.html": {
    "href": "api/i2connect.services.idatecondition.logicaltype.html",
    "title": "services.IDateCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IDateCondition > logicalType services.IDateCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'date'; Returns: 'date' Introduced: API version 1.0"
  },
  "api/i2connect.services.idecimalcondition.defaultvalue.html": {
    "href": "api/i2connect.services.idecimalcondition.defaultvalue.html",
    "title": "services.IDecimalCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IDecimalCondition > defaultValue services.IDecimalCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: utility.WritableDecimal | RequestSpecificValue<utility.WritableDecimal>; Returns: utility.WritableDecimal | RequestSpecificValue < utility.WritableDecimal > Introduced: API version 2.0"
  },
  "api/i2connect.services.idecimalcondition.html": {
    "href": "api/i2connect.services.idecimalcondition.html",
    "title": "services.IDecimalCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IDecimalCondition services.IDecimalCondition interface A condition that prompts the user for a decimal value. Signature: interface IDecimalCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? utility.WritableDecimal | RequestSpecificValue <!-- --> < utility.WritableDecimal <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'decimal' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.idecimalcondition.logicaltype.html": {
    "href": "api/i2connect.services.idecimalcondition.logicaltype.html",
    "title": "services.IDecimalCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IDecimalCondition > logicalType services.IDecimalCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'decimal'; Returns: 'decimal' Introduced: API version 1.0"
  },
  "api/i2connect.services.iformsection.conditions.html": {
    "href": "api/i2connect.services.iformsection.conditions.html",
    "title": "services.IFormSection.conditions property",
    "keywords": "Home > @i2analyze/i2connect > services > IFormSection > conditions services.IFormSection.conditions property Gets the basic form that this section of the form contains. Signature: readonly conditions: BasicForm; Returns: BasicForm Introduced: API version 2.0"
  },
  "api/i2connect.services.iformsection.hide.html": {
    "href": "api/i2connect.services.iformsection.hide.html",
    "title": "services.IFormSection.hide property",
    "keywords": "Home > @i2analyze/i2connect > services > IFormSection > hide services.IFormSection.hide property Gets whether this section is to be hidden from the user, based on information in the request. Signature: readonly hide?: HidePredicate; Returns: HidePredicate Introduced: API version 2.0"
  },
  "api/i2connect.services.iformsection.html": {
    "href": "api/i2connect.services.iformsection.html",
    "title": "services.IFormSection interface",
    "keywords": "Home > @i2analyze/i2connect > services > IFormSection services.IFormSection interface A section of a form for an i2 Connect service. Signature: interface IFormSection Introduced: API version 2.0 Properties Property Type Description conditions BasicForm Gets the basic form that this section of the form contains. hide? HidePredicate (Optional) Gets whether this section is to be hidden from the user, based on information in the request. title string | RequestSpecificValue <!-- --> <string> Gets the title of this section of the form, to present to the user."
  },
  "api/i2connect.services.iformsection.title.html": {
    "href": "api/i2connect.services.iformsection.title.html",
    "title": "services.IFormSection.title property",
    "keywords": "Home > @i2analyze/i2connect > services > IFormSection > title services.IFormSection.title property Gets the title of this section of the form, to present to the user. Signature: readonly title: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 2.0"
  },
  "api/i2connect.services.iformserviceconfig.form.html": {
    "href": "api/i2connect.services.iformserviceconfig.form.html",
    "title": "services.IFormServiceConfig.form property",
    "keywords": "Home > @i2analyze/i2connect > services > IFormServiceConfig > form services.IFormServiceConfig.form property Gets the form definition, which configures a service to prompt for values that a user provides, subject to conditions that you specify. Signature: form?: BasicForm | SectionedForm; Returns: BasicForm | SectionedForm Introduced: API version 2.0 Example The form in the following service results in users seeing an input field that guarantees the value of the octet parameter to be in the configured range. The value that the user provides is available in the acquire callback from the conditions object. addService( { name: 'Sample', form: { octet: { label: 'IP address octet number', description: 'A mandatory integer between 0 and 255', logicalType: 'integer', minValue: 0, maxValue: 255, mandatory: true, }, }, }, ({ conditions }) => { console.log(conditions.octet); ... } );"
  },
  "api/i2connect.services.iformserviceconfig.formismandatory.html": {
    "href": "api/i2connect.services.iformserviceconfig.formismandatory.html",
    "title": "services.IFormServiceConfig.formIsMandatory property",
    "keywords": "Home > @i2analyze/i2connect > services > IFormServiceConfig > formIsMandatory services.IFormServiceConfig.formIsMandatory property Indicates whether the form should be presented to the user even if there are no mandatory conditions. Signature: formIsMandatory?: boolean; Returns: boolean Introduced: API version 2.3 Remarks Use this setting to prevent users from submitting a query without opening the form. For example, a service might require some conditions to have values, despite no individual condition being mandatory. You can use custom validation to enforce this kind of rule."
  },
  "api/i2connect.services.iformserviceconfig.html": {
    "href": "api/i2connect.services.iformserviceconfig.html",
    "title": "services.IFormServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > IFormServiceConfig services.IFormServiceConfig interface A collection of properties that define whether a service requires user input, and how that input looks. Signature: interface IFormServiceConfig Introduced: API version 2.0 Properties Property Type Description form? BasicForm | SectionedForm (Optional) Gets the form definition, which configures a service to prompt for values that a user provides, subject to conditions that you specify. formIsMandatory? boolean (Optional) Indicates whether the form should be presented to the user even if there are no mandatory conditions."
  },
  "api/i2connect.services.igeospatialareacondition.defaultvalue.html": {
    "href": "api/i2connect.services.igeospatialareacondition.defaultvalue.html",
    "title": "services.IGeospatialAreaCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialAreaCondition > defaultValue services.IGeospatialAreaCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: data.IGeoJsonFeatureCollection | RequestSpecificValue<data.IGeoJsonFeatureCollection>; Returns: data.IGeoJsonFeatureCollection | RequestSpecificValue < data.IGeoJsonFeatureCollection > Introduced: API version 1.2"
  },
  "api/i2connect.services.igeospatialareacondition.html": {
    "href": "api/i2connect.services.igeospatialareacondition.html",
    "title": "services.IGeospatialAreaCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialAreaCondition services.IGeospatialAreaCondition interface A condition that prompts the user for a geospatial area value. Signature: interface IGeospatialAreaCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.2 Properties Property Type Description defaultValue? data.IGeoJsonFeatureCollection | RequestSpecificValue <!-- --> < data.IGeoJsonFeatureCollection <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'geospatialArea' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.igeospatialareacondition.logicaltype.html": {
    "href": "api/i2connect.services.igeospatialareacondition.logicaltype.html",
    "title": "services.IGeospatialAreaCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialAreaCondition > logicalType services.IGeospatialAreaCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'geospatialArea'; Returns: 'geospatialArea' Introduced: API version 1.2"
  },
  "api/i2connect.services.igeospatialcondition.defaultvalue.html": {
    "href": "api/i2connect.services.igeospatialcondition.defaultvalue.html",
    "title": "services.IGeospatialCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialCondition > defaultValue services.IGeospatialCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: utility.IWritableGeospatialPoint | RequestSpecificValue<utility.IWritableGeospatialPoint>; Returns: utility.IWritableGeospatialPoint | RequestSpecificValue < utility.IWritableGeospatialPoint > Introduced: API version 2.0"
  },
  "api/i2connect.services.igeospatialcondition.html": {
    "href": "api/i2connect.services.igeospatialcondition.html",
    "title": "services.IGeospatialCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialCondition services.IGeospatialCondition interface A condition that prompts the user for a geospatial value. Signature: interface IGeospatialCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? utility.IWritableGeospatialPoint | RequestSpecificValue <!-- --> < utility.IWritableGeospatialPoint <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'geospatial' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.igeospatialcondition.logicaltype.html": {
    "href": "api/i2connect.services.igeospatialcondition.logicaltype.html",
    "title": "services.IGeospatialCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IGeospatialCondition > logicalType services.IGeospatialCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'geospatial'; Returns: 'geospatial' Introduced: API version 1.0"
  },
  "api/i2connect.services.iitemtypeconstraint.html": {
    "href": "api/i2connect.services.iitemtypeconstraint.html",
    "title": "services.IItemTypeConstraint interface",
    "keywords": "Home > @i2analyze/i2connect > services > IItemTypeConstraint services.IItemTypeConstraint interface A set of constraints that apply to seeds that have a particular item type. Signature: interface IItemTypeConstraint<TItemType extends schema.ILinkType | schema.IEntityType> Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.ILinkType | schema.IEntityType The type of records that make up these seeds - that is, whether they are entities or links. Properties Property Type Description max number Gets the maximum number of seed records that have the item type. min number Gets the minimum number of seed records that have the item type. type TItemType Gets the item type of the seeds to which the constraints apply."
  },
  "api/i2connect.services.iitemtypeconstraint.max.html": {
    "href": "api/i2connect.services.iitemtypeconstraint.max.html",
    "title": "services.IItemTypeConstraint.max property",
    "keywords": "Home > @i2analyze/i2connect > services > IItemTypeConstraint > max services.IItemTypeConstraint.max property Gets the maximum number of seed records that have the item type. Signature: readonly max: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.iitemtypeconstraint.min.html": {
    "href": "api/i2connect.services.iitemtypeconstraint.min.html",
    "title": "services.IItemTypeConstraint.min property",
    "keywords": "Home > @i2analyze/i2connect > services > IItemTypeConstraint > min services.IItemTypeConstraint.min property Gets the minimum number of seed records that have the item type. Signature: readonly min: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.iitemtypeconstraint.type.html": {
    "href": "api/i2connect.services.iitemtypeconstraint.type.html",
    "title": "services.IItemTypeConstraint.type property",
    "keywords": "Home > @i2analyze/i2connect > services > IItemTypeConstraint > type services.IItemTypeConstraint.type property Gets the item type of the seeds to which the constraints apply. Signature: type: TItemType; Returns: TItemType Introduced: API version 1.0"
  },
  "api/i2connect.services.ilongrunningserviceconfig.html": {
    "href": "api/i2connect.services.ilongrunningserviceconfig.html",
    "title": "services.ILongRunningServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > ILongRunningServiceConfig services.ILongRunningServiceConfig interface A collection of properties that define whether a service involves a long-running operation. Signature: interface ILongRunningServiceConfig Introduced: API version 2.0 Properties Property Type Description longRunning? boolean | { pollingIntervalInSeconds?: number; } (Optional) Indicates whether the service involves a long-running operation."
  },
  "api/i2connect.services.ilongrunningserviceconfig.longrunning.html": {
    "href": "api/i2connect.services.ilongrunningserviceconfig.longrunning.html",
    "title": "services.ILongRunningServiceConfig.longRunning property",
    "keywords": "Home > @i2analyze/i2connect > services > ILongRunningServiceConfig > longRunning services.ILongRunningServiceConfig.longRunning property Indicates whether the service involves a long-running operation. Signature: readonly longRunning?: boolean | { pollingIntervalInSeconds?: number; }; Returns: boolean | { pollingIntervalInSeconds?: number; } Introduced: API version 2.0 Remarks When the property contains a Boolean value, true and false have their usual meanings. When the property contains an object, the service does involve a long-running operation, and the i2 Analyze server polls the service for progress information at the specified interval. A service that involves a long-running operation can access the longRunningState within the acquire callback for the service. For example, it can use services.ILongRunningState.isCanceled to determine whether the user has canceled the query. The service can also set substatuses to provide detailed feedback to the user about a long-running query. Example addService( { name: 'Sample', longRunning: true, }, ({ longRunningState }) => { longRunningState.addSubstatus('information', 'Query started'); if (longRunningState.isCanceled) { // Stop processing the query. } ... } );"
  },
  "api/i2connect.services.ilongrunningstate.addsubstatus.html": {
    "href": "api/i2connect.services.ilongrunningstate.addsubstatus.html",
    "title": "services.ILongRunningState.addSubstatus() method",
    "keywords": "Home > @i2analyze/i2connect > services > ILongRunningState > addSubstatus services.ILongRunningState.addSubstatus() method Provides a piece of information about the progress of the long-running operation to the user. Signature: addSubstatus(type: SubstatusType, message: string): ISubstatus; Introduced: API version 1.0 Parameters Parameter Type Description type SubstatusType The type of the substatus. message string The message associated with the substatus. Returns: ISubstatus The substatus that was added to the ILongRunningState object. Remarks Substatuses make extra information available to the client. By polling the server during execution, the client can display the information to users. As well as adding substatus information, you can also update previously provided information by editing the object that this method returns."
  },
  "api/i2connect.services.ilongrunningstate.clearsubstatuses.html": {
    "href": "api/i2connect.services.ilongrunningstate.clearsubstatuses.html",
    "title": "services.ILongRunningState.clearSubstatuses() method",
    "keywords": "Home > @i2analyze/i2connect > services > ILongRunningState > clearSubstatuses services.ILongRunningState.clearSubstatuses() method Clears all the substatuses from the ILongRunningState object. Signature: clearSubstatuses(): void; Returns: void Introduced: API version 1.0"
  },
  "api/i2connect.services.ilongrunningstate.html": {
    "href": "api/i2connect.services.ilongrunningstate.html",
    "title": "services.ILongRunningState interface",
    "keywords": "Home > @i2analyze/i2connect > services > ILongRunningState services.ILongRunningState interface A collection of methods through which an i2 Connect service can communicate with a user who initiated a long-running operation. Signature: interface ILongRunningState Introduced: API version 2.0 Remarks The i2 Connect server provides an ILongRunningState object when the longRunning property is set to true in the addService() acquire callback. Properties Property Type Description isCanceled boolean Indicates whether the user has canceled the long-running operation. Methods Method Description addSubstatus(type, message) Provides a piece of information about the progress of the long-running operation to the user. clearSubstatuses() Clears all the substatuses from the ILongRunningState object."
  },
  "api/i2connect.services.ilongrunningstate.iscanceled.html": {
    "href": "api/i2connect.services.ilongrunningstate.iscanceled.html",
    "title": "services.ILongRunningState.isCanceled property",
    "keywords": "Home > @i2analyze/i2connect > services > ILongRunningState > isCanceled services.ILongRunningState.isCanceled property Indicates whether the user has canceled the long-running operation. Signature: readonly isCanceled: boolean; Returns: boolean Introduced: API version 1.0 Remarks If you inspect this property during your processing for a long-running operation and find it to be true <!-- --> , you can avoid doing further work (for example, making more calls to a target data source) in support of the operation."
  },
  "api/i2connect.services.imultilinestringcondition.defaultvalue.html": {
    "href": "api/i2connect.services.imultilinestringcondition.defaultvalue.html",
    "title": "services.IMultiLineStringCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > IMultiLineStringCondition > defaultValue services.IMultiLineStringCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.2"
  },
  "api/i2connect.services.imultilinestringcondition.html": {
    "href": "api/i2connect.services.imultilinestringcondition.html",
    "title": "services.IMultiLineStringCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > IMultiLineStringCondition services.IMultiLineStringCondition interface A condition that prompts the user for a multiple-line string value. Signature: interface IMultiLineStringCondition extends IConditionBase, ISupportsStringValidation, ISupportsMaxLength Extends: IConditionBase <!-- --> , ISupportsStringValidation <!-- --> , ISupportsMaxLength Introduced: API version 1.0 Properties Property Type Description defaultValue? string | RequestSpecificValue <!-- --> <string> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'multipleLineString' Gets the logical type of values that fulfill the condition. maxStringLength? ICharLimit (Optional) Gets the maximum number of characters that the string can contain. (Inherited from ISupportsMaxLength <!-- --> ) validation? IStringValidator (Optional) Gets the validator to use on the string value. (Inherited from ISupportsStringValidation <!-- --> )"
  },
  "api/i2connect.services.imultilinestringcondition.logicaltype.html": {
    "href": "api/i2connect.services.imultilinestringcondition.logicaltype.html",
    "title": "services.IMultiLineStringCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > IMultiLineStringCondition > logicalType services.IMultiLineStringCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'multipleLineString'; Returns: 'multipleLineString' Introduced: API version 1.0"
  },
  "api/i2connect.services.inumbercondition.defaultvalue.html": {
    "href": "api/i2connect.services.inumbercondition.defaultvalue.html",
    "title": "services.INumberCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition > defaultValue services.INumberCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: number | RequestSpecificValue<number>; Returns: number | RequestSpecificValue <number> Introduced: API version 1.2"
  },
  "api/i2connect.services.inumbercondition.html": {
    "href": "api/i2connect.services.inumbercondition.html",
    "title": "services.INumberCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition services.INumberCondition interface A condition that prompts the user for a numeric value. Signature: interface INumberCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? number | RequestSpecificValue <!-- --> <number> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'integer' | 'double' Gets the logical types of values that fulfill the condition. maxValue? number (Optional) Gets the highest value that still fulfills the condition. minValue? number (Optional) Gets the lowest value that still fulfills the condition."
  },
  "api/i2connect.services.inumbercondition.logicaltype.html": {
    "href": "api/i2connect.services.inumbercondition.logicaltype.html",
    "title": "services.INumberCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition > logicalType services.INumberCondition.logicalType property Gets the logical types of values that fulfill the condition. Signature: readonly logicalType: 'integer' | 'double'; Returns: 'integer' | 'double' Introduced: API version 1.0"
  },
  "api/i2connect.services.inumbercondition.maxvalue.html": {
    "href": "api/i2connect.services.inumbercondition.maxvalue.html",
    "title": "services.INumberCondition.maxValue property",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition > maxValue services.INumberCondition.maxValue property Gets the highest value that still fulfills the condition. Signature: readonly maxValue?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.inumbercondition.minvalue.html": {
    "href": "api/i2connect.services.inumbercondition.minvalue.html",
    "title": "services.INumberCondition.minValue property",
    "keywords": "Home > @i2analyze/i2connect > services > INumberCondition > minValue services.INumberCondition.minValue property Gets the lowest value that still fulfills the condition. Signature: readonly minValue?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.irequestinformation.header.html": {
    "href": "api/i2connect.services.irequestinformation.header.html",
    "title": "services.IRequestInformation.header() method",
    "keywords": "Home > @i2analyze/i2connect > services > IRequestInformation > header services.IRequestInformation.header() method Gets the value of a header in the request. Signature: header(name: string): string | undefined; Introduced: API version 2.0 Parameters Parameter Type Description name string The name of the header whose value is to be retrieved. Returns: string | undefined The header value, or undefined if the named header is not present."
  },
  "api/i2connect.services.irequestinformation.html": {
    "href": "api/i2connect.services.irequestinformation.html",
    "title": "services.IRequestInformation interface",
    "keywords": "Home > @i2analyze/i2connect > services > IRequestInformation services.IRequestInformation interface A set of information from an incoming HTTP request. Signature: interface IRequestInformation Introduced: API version 1.2 Properties Property Type Description user { readonly principal: string; readonly displayName: string; readonly securityPermissions: readonly ISecurityPermission <!-- --> []; readonly groups: readonly string[]; readonly commandAccessPermissions: readonly string[]; } Gets information about the user who made the request. Methods Method Description header(name) Gets the value of a header in the request."
  },
  "api/i2connect.services.irequestinformation.user.html": {
    "href": "api/i2connect.services.irequestinformation.user.html",
    "title": "services.IRequestInformation.user property",
    "keywords": "Home > @i2analyze/i2connect > services > IRequestInformation > user services.IRequestInformation.user property Gets information about the user who made the request. Signature: readonly user: { readonly principal: string; readonly displayName: string; readonly securityPermissions: readonly ISecurityPermission[]; readonly groups: readonly string[]; readonly commandAccessPermissions: readonly string[]; }; Returns: { readonly principal: string; readonly displayName: string; readonly securityPermissions: readonly ISecurityPermission []; readonly groups: readonly string[]; readonly commandAccessPermissions: readonly string[]; } Introduced: API version 1.2 Remarks Connectors receive user information only when you configure them to do so. To specify that requests from the server include this potentially sensitive data, ensure that the connector's send-sensitive-headers setting is true in the i2 Connect gateway. For more information, see [Adding a connector to the topology]( https://docs.i2group.com/analyze/i2_connect_topology.html )."
  },
  "api/i2connect.services.irequirespossiblevalues.html": {
    "href": "api/i2connect.services.irequirespossiblevalues.html",
    "title": "services.IRequiresPossibleValues interface",
    "keywords": "Home > @i2analyze/i2connect > services > IRequiresPossibleValues services.IRequiresPossibleValues interface A type that indicates that a string condition can present a list of possible values. Signature: interface IRequiresPossibleValues Introduced: API version 1.0 Properties Property Type Description possibleValues schema.IPossibleValue <!-- --> [] | RequestSpecificValue <!-- --> < schema.IPossibleValue <!-- --> []> Gets the possible values."
  },
  "api/i2connect.services.irequirespossiblevalues.possiblevalues.html": {
    "href": "api/i2connect.services.irequirespossiblevalues.possiblevalues.html",
    "title": "services.IRequiresPossibleValues.possibleValues property",
    "keywords": "Home > @i2analyze/i2connect > services > IRequiresPossibleValues > possibleValues services.IRequiresPossibleValues.possibleValues property Gets the possible values. Signature: readonly possibleValues: schema.IPossibleValue[] | RequestSpecificValue<schema.IPossibleValue[]>; Returns: schema.IPossibleValue [] | RequestSpecificValue < schema.IPossibleValue []> Introduced: API version 1.0 Remarks This property has supported a schema.IPossibleValue[] value since version 1.0. A RequestSpecificValue\\<schema.IPossibleValue[]\\> value is supported only in version 1.2 and later."
  },
  "api/i2connect.services.iresult.addentity.html": {
    "href": "api/i2connect.services.iresult.addentity.html",
    "title": "services.IResult.addEntity() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addEntity services.IResult.addEntity() method Adds a new entity record to the result, whose identifier is a string that you provide. Signature: addEntity<TEntityType extends schema.IEntityType>(type: TEntityType, id: records.ResultRecordId): records.IResultEntityRecord<TEntityType, records.ResultRecordId>; Introduced: API version 1.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the new entity record. Parameters Parameter Type Description type TEntityType The entity type of the new record. id records.ResultRecordId An identifier for the new record. Returns: records.IResultEntityRecord <!-- --> <TEntityType, records.ResultRecordId <!-- --> > The entity record that was added to the result. Remarks The identifier that you provide needs to be unique only for entities of the specified type, from the connector that owns the service."
  },
  "api/i2connect.services.iresult.addentity_1.html": {
    "href": "api/i2connect.services.iresult.addentity_1.html",
    "title": "services.IResult.addEntity() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addEntity services.IResult.addEntity() method Adds a new entity record to the result, whose identifier is a source identifier that you create. Signature: addEntity<TEntityType extends schema.IEntityType>(type: TEntityType, id: records.ISourceIdentifier): records.IResultEntityRecord<TEntityType, records.ISourceIdentifier>; Introduced: API version 2.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the new entity record. Parameters Parameter Type Description type TEntityType The entity type of the new record. id records.ISourceIdentifier A source identifier for the new record. Returns: records.IResultEntityRecord <!-- --> <TEntityType, records.ISourceIdentifier <!-- --> > The entity record that was added to the result."
  },
  "api/i2connect.services.iresult.addentity_2.html": {
    "href": "api/i2connect.services.iresult.addentity_2.html",
    "title": "services.IResult.addEntity() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addEntity services.IResult.addEntity() method Adds a new entity record to the result, whose identifier is a string that you provide or a source identifier that you create. Signature: addEntity<TEntityType extends schema.IEntityType>(type: TEntityType, id: records.ResultRecordIdType): records.IResultEntityRecord<TEntityType, records.ResultRecordIdType>; Introduced: API version 2.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the new entity record. Parameters Parameter Type Description type TEntityType The entity type of the new record. id records.ResultRecordIdType An identifier for the new record. Returns: records.IResultEntityRecord <!-- --> <TEntityType, records.ResultRecordIdType <!-- --> > The entity record that was added to the result. Remarks If you provide a string identifier it needs to be unique only for entities of the specified type, from the connector that owns the service."
  },
  "api/i2connect.services.iresult.addentityfromseed.html": {
    "href": "api/i2connect.services.iresult.addentityfromseed.html",
    "title": "services.IResult.addEntityFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addEntityFromSeed services.IResult.addEntityFromSeed() method Adds an entity record that was passed to the service as a seed to the result. Signature: addEntityFromSeed<TEntityType extends schema.IEntityType>(seed: records.ITypedSeedEntityRecord<TEntityType>): records.ISeededResultEntityRecord & records.ITypedSeededResultRecord<TEntityType>; Introduced: API version 1.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the new entity record. Parameters Parameter Type Description seed records.ITypedSeedEntityRecord <!-- --> <TEntityType> The record that was passed to the service method as a seed. Returns: records.ISeededResultEntityRecord & records.ITypedSeededResultRecord <!-- --> <TEntityType> The record that was added to the result. Remarks When you want to return a seed entity in your result set, use this method in preference to extracting data from the seed and using services.IResult.addEntity() <!-- --> ."
  },
  "api/i2connect.services.iresult.addentityfromseed_1.html": {
    "href": "api/i2connect.services.iresult.addentityfromseed_1.html",
    "title": "services.IResult.addEntityFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addEntityFromSeed services.IResult.addEntityFromSeed() method Adds an entity record that was passed to the service as a seed to the result. Signature: addEntityFromSeed(seed: records.ISeedEntityRecord): records.ISeededResultEntityRecord; Introduced: API version 1.0 Parameters Parameter Type Description seed records.ISeedEntityRecord The record that was passed to the service method as a seed. Returns: records.ISeededResultEntityRecord The record that was added to the result. Remarks When you want to return a seed entity in your result set, use this method in preference to extracting data from the seed and using services.IResult.addEntity() <!-- --> ."
  },
  "api/i2connect.services.iresult.addlink.html": {
    "href": "api/i2connect.services.iresult.addlink.html",
    "title": "services.IResult.addLink() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addLink services.IResult.addLink() method Adds a new link record to the result, whose identifier is a string that you provide. Signature: addLink<TLinkType extends schema.ILinkType, TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord, TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord>(type: TLinkType, id: records.ResultRecordId, fromEnd: TFromEnd, toEnd: TToEnd, direction?: data.LinkDirection): records.IResultLinkRecord<TLinkType, TFromEnd, TToEnd, records.ResultRecordId>; Introduced: API version 1.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the new link record. TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"from\" end of the link. TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"to\" end of the link. Parameters Parameter Type Description type TLinkType The link type of the new record. id records.ResultRecordId An identifier for the new record. fromEnd TFromEnd The entity record for the \"from\" end of the link, which was previously returned from services.IResult.addEntity() or services.IResult.addEntityFromSeed() <!-- --> . toEnd TToEnd The entity record for the \"to\" end of the link, which was previously returned from services.IResult.addEntity() or services.IResult.addEntityFromSeed() <!-- --> . direction data.LinkDirection (Optional) The direction of the new link record, which defaults to \"none\" . Returns: records.IResultLinkRecord <!-- --> <TLinkType, TFromEnd, TToEnd, records.ResultRecordId <!-- --> > The link record that was added to the result. Remarks The identifier that you provide needs to be unique only for links of the specified type, from the connector that owns the service. If there is no suitable identifier for the link in the data source, you can often construct one from the identifiers of the \"from\" and \"to\" ends. If there might be more than one link between the same two entities, you will need to add extra identifying information. For example, for a link that represents a financial transaction, you might include a timestamp and perhaps also the amount."
  },
  "api/i2connect.services.iresult.addlink_1.html": {
    "href": "api/i2connect.services.iresult.addlink_1.html",
    "title": "services.IResult.addLink() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addLink services.IResult.addLink() method Adds a new link record to the result, whose identifier is a source identifier that you create. Signature: addLink<TLinkType extends schema.ILinkType, TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord, TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord>(type: TLinkType, id: records.ISourceIdentifier, fromEnd: TFromEnd, toEnd: TToEnd, direction?: data.LinkDirection): records.IResultLinkRecord<TLinkType, TFromEnd, TToEnd, records.ISourceIdentifier>; Introduced: API version 2.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the new link record. TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"from\" end of the link. TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"to\" end of the link. Parameters Parameter Type Description type TLinkType The link type of the new record. id records.ISourceIdentifier A source identifier for the new record. fromEnd TFromEnd The entity record for the \"from\" end of the link, which was previously returned from services.IResult.addEntity() or services.IResult.addEntityFromSeed() <!-- --> . toEnd TToEnd The entity record for the \"to\" end of the link, which was previously returned from services.IResult.addEntity() or services.IResult.addEntityFromSeed() <!-- --> . direction data.LinkDirection (Optional) The direction of the new link record, which defaults to \"none\" . Returns: records.IResultLinkRecord <!-- --> <TLinkType, TFromEnd, TToEnd, records.ISourceIdentifier <!-- --> > The link record that was added to the result."
  },
  "api/i2connect.services.iresult.addlink_2.html": {
    "href": "api/i2connect.services.iresult.addlink_2.html",
    "title": "services.IResult.addLink() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addLink services.IResult.addLink() method Adds a new link record to the result, whose identifier is a string that you provide or a source identifier that you create. Signature: addLink<TLinkType extends schema.ILinkType, TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord, TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord, TIdType extends records.ResultRecordIdType>(type: TLinkType, id: TIdType, fromEnd: TFromEnd, toEnd: TToEnd, direction?: data.LinkDirection): records.IResultLinkRecord<TLinkType, TFromEnd, TToEnd, TIdType>; Introduced: API version 2.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the new link record. TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"from\" end of the link. TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"to\" end of the link. TIdType extends records.ResultRecordIdType The type of the identifier of the new link record. Parameters Parameter Type Description type TLinkType The link type of the new record. id TIdType A source identifier or identifier for the new record. fromEnd TFromEnd The entity record for the \"from\" end of the link, which was previously returned from services.IResult.addEntity() or services.IResult.addEntityFromSeed() <!-- --> . toEnd TToEnd The entity record for the \"to\" end of the link, which was previously returned from services.IResult.addEntity() or services.IResult.addEntityFromSeed() <!-- --> . direction data.LinkDirection (Optional) The direction of the new link record, which defaults to \"none\" . Returns: records.IResultLinkRecord <!-- --> <TLinkType, TFromEnd, TToEnd, TIdType> The link record that was added to the result. Remarks If you provide a string identifier, it needs to be unique only for links of the specified type, from the connector that owns the service. If there is no suitable identifier for the link in the data source, you can often construct one from the identifiers of the \"from\" and \"to\" ends. If there might be more than one link between the same two entities, you will need to add extra identifying information. For example, for a link that represents a financial transaction, you might include a timestamp and perhaps also the amount."
  },
  "api/i2connect.services.iresult.addlinkfromseed.html": {
    "href": "api/i2connect.services.iresult.addlinkfromseed.html",
    "title": "services.IResult.addLinkFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addLinkFromSeed services.IResult.addLinkFromSeed() method Adds a link record that was passed to the service as a seed to the result. Signature: addLinkFromSeed<TLinkType extends schema.ILinkType>(seed: records.ITypedSeedLinkRecord<TLinkType>): records.ISeededResultLinkRecord & records.ITypedSeededResultRecord<TLinkType>; Introduced: API version 1.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the new link record. Parameters Parameter Type Description seed records.ITypedSeedLinkRecord <!-- --> <TLinkType> The link record that was passed to the service method as a seed. Returns: records.ISeededResultLinkRecord & records.ITypedSeededResultRecord <!-- --> <TLinkType> The link record that was added to the result."
  },
  "api/i2connect.services.iresult.addlinkfromseed_1.html": {
    "href": "api/i2connect.services.iresult.addlinkfromseed_1.html",
    "title": "services.IResult.addLinkFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > addLinkFromSeed services.IResult.addLinkFromSeed() method Adds a link record that was passed to the service as a seed to the result. Signature: addLinkFromSeed(seed: records.ISeedLinkRecord): records.ISeededResultLinkRecord; Introduced: API version 1.0 Parameters Parameter Type Description seed records.ISeedLinkRecord The link record that was passed to the service method as a seed. Returns: records.ISeededResultLinkRecord The link record that was added to the result."
  },
  "api/i2connect.services.iresult.getentity.html": {
    "href": "api/i2connect.services.iresult.getentity.html",
    "title": "services.IResult.getEntity() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getEntity services.IResult.getEntity() method Gets a previously added entity record from the result, whose identifier is a string that you provided. Signature: getEntity<TEntityType extends schema.IEntityType>(type: TEntityType, id: records.ResultRecordId): records.IResultEntityRecord<TEntityType, records.ResultRecordId> | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the entity record. Parameters Parameter Type Description type TEntityType The entity type of the record. id records.ResultRecordId The identifier of the record. Returns: records.IResultEntityRecord <!-- --> <TEntityType, records.ResultRecordId <!-- --> > | undefined The entity record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.getentity_1.html": {
    "href": "api/i2connect.services.iresult.getentity_1.html",
    "title": "services.IResult.getEntity() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getEntity services.IResult.getEntity() method Gets a previously added entity record from the result, whose identifier is a source identifier that you created. Signature: getEntity<TEntityType extends schema.IEntityType>(type: TEntityType, id: records.ISourceIdentifier): records.IResultEntityRecord<TEntityType, records.ISourceIdentifier> | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the entity record. Parameters Parameter Type Description type TEntityType The entity type of the record. id records.ISourceIdentifier The source identifier of the record. Returns: records.IResultEntityRecord <!-- --> <TEntityType, records.ISourceIdentifier <!-- --> > | undefined The entity record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.getentity_2.html": {
    "href": "api/i2connect.services.iresult.getentity_2.html",
    "title": "services.IResult.getEntity() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getEntity services.IResult.getEntity() method Gets a previously added entity record from the result, whose identifier is a string that you provided or a source identifier that you created. Signature: getEntity<TEntityType extends schema.IEntityType>(type: TEntityType, id: records.ResultRecordIdType): records.IResultEntityRecord<TEntityType, records.ResultRecordIdType> | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the entity record. Parameters Parameter Type Description type TEntityType The entity type of the record. id records.ResultRecordIdType The identifier or source identifier of the record. Returns: records.IResultEntityRecord <!-- --> <TEntityType, records.ResultRecordIdType <!-- --> > | undefined The entity record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.getentityfromseed.html": {
    "href": "api/i2connect.services.iresult.getentityfromseed.html",
    "title": "services.IResult.getEntityFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getEntityFromSeed services.IResult.getEntityFromSeed() method Gets a previously added entity record from the result, based on an entity record that was passed to the service as a seed. Signature: getEntityFromSeed<TEntityType extends schema.IEntityType>(seed: records.ITypedSeedEntityRecord<TEntityType>): (records.ISeededResultEntityRecord & records.ITypedSeededResultRecord<TEntityType>) | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TEntityType extends schema.IEntityType The type of the previously added entity record. Parameters Parameter Type Description seed records.ITypedSeedEntityRecord <!-- --> <TEntityType> The entity record that was passed to the service method as a seed. Returns: ( records.ISeededResultEntityRecord & records.ITypedSeededResultRecord <!-- --> <TEntityType>) | undefined The entity record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.getentityfromseed_1.html": {
    "href": "api/i2connect.services.iresult.getentityfromseed_1.html",
    "title": "services.IResult.getEntityFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getEntityFromSeed services.IResult.getEntityFromSeed() method Gets a previously added entity record from the result, based on an entity record that was passed to the service as a seed. Signature: getEntityFromSeed(seed: records.ISeedEntityRecord): records.ISeededResultEntityRecord | undefined; Introduced: API version 2.0 Parameters Parameter Type Description seed records.ISeedEntityRecord The entity record that was passed to the service method as a seed. Returns: records.ISeededResultEntityRecord | undefined The entity record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.getlink.html": {
    "href": "api/i2connect.services.iresult.getlink.html",
    "title": "services.IResult.getLink() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getLink services.IResult.getLink() method Gets a previously added link record from the result, whose identifier is a string that you provided. Signature: getLink<TLinkType extends schema.ILinkType, TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord, TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord>(type: TLinkType, id: records.ResultRecordId): records.IResultLinkRecord<TLinkType, TFromEnd, TToEnd, records.ResultRecordId> | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the link record. TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"from\" end of the link. TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"to\" end of the link. Parameters Parameter Type Description type TLinkType The link type of the record. id records.ResultRecordId The identifier of the record. Returns: records.IResultLinkRecord <!-- --> <TLinkType, TFromEnd, TToEnd, records.ResultRecordId <!-- --> > | undefined The link record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.getlink_1.html": {
    "href": "api/i2connect.services.iresult.getlink_1.html",
    "title": "services.IResult.getLink() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getLink services.IResult.getLink() method Gets a previously added link record from the result, whose identifier is a source identifier that you created. Signature: getLink<TLinkType extends schema.ILinkType, TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord, TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord>(type: TLinkType, id: records.ISourceIdentifier): records.IResultLinkRecord<TLinkType, TFromEnd, TToEnd, records.ISourceIdentifier> | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the link record. TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"from\" end of the link. TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"to\" end of the link. Parameters Parameter Type Description type TLinkType The link type of the record. id records.ISourceIdentifier The source identifier of the record. Returns: records.IResultLinkRecord <!-- --> <TLinkType, TFromEnd, TToEnd, records.ISourceIdentifier <!-- --> > | undefined The link record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.getlink_2.html": {
    "href": "api/i2connect.services.iresult.getlink_2.html",
    "title": "services.IResult.getLink() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getLink services.IResult.getLink() method Gets a previously added link record from the result, whose identifier is a string that you provided or a source identifier that you created. Signature: getLink<TLinkType extends schema.ILinkType, TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord, TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord, TIdType extends records.ResultRecordIdType>(type: TLinkType, id: TIdType): records.IResultLinkRecord<TLinkType, TFromEnd, TToEnd, TIdType> | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the link record. TFromEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"from\" end of the link. TToEnd extends records.ISeededResultEntityRecord | records.IResultEntityRecord The type of the entity record at the \"to\" end of the link. TIdType extends records.ResultRecordIdType The type of identifier of the link record. Parameters Parameter Type Description type TLinkType The link type of the record. id TIdType The identifier or source identifier of the record. Returns: records.IResultLinkRecord <!-- --> <TLinkType, TFromEnd, TToEnd, TIdType> | undefined The link record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.getlinkfromseed.html": {
    "href": "api/i2connect.services.iresult.getlinkfromseed.html",
    "title": "services.IResult.getLinkFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getLinkFromSeed services.IResult.getLinkFromSeed() method Gets a previously added link record from the result, based on a link record that was passed to the service as a seed. Signature: getLinkFromSeed<TLinkType extends schema.ILinkType>(seed: records.ITypedSeedLinkRecord<TLinkType>): (records.ISeededResultLinkRecord & records.ITypedSeededResultRecord<TLinkType>) | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TLinkType extends schema.ILinkType The type of the previously added link record. Parameters Parameter Type Description seed records.ITypedSeedLinkRecord <!-- --> <TLinkType> The link record that was passed to the service method as a seed. Returns: ( records.ISeededResultLinkRecord & records.ITypedSeededResultRecord <!-- --> <TLinkType>) | undefined The link record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.getlinkfromseed_1.html": {
    "href": "api/i2connect.services.iresult.getlinkfromseed_1.html",
    "title": "services.IResult.getLinkFromSeed() method",
    "keywords": "Home > @i2analyze/i2connect > services > IResult > getLinkFromSeed services.IResult.getLinkFromSeed() method Gets a previously added link record from the result, based on a link record that was passed to the service as a seed. Signature: getLinkFromSeed(seed: records.ISeedLinkRecord): records.ISeededResultLinkRecord | undefined; Introduced: API version 2.0 Parameters Parameter Type Description seed records.ISeedLinkRecord The link record that was passed to the service method as a seed. Returns: records.ISeededResultLinkRecord | undefined The link record that was previously added to the result, or undefined if it was not previously added."
  },
  "api/i2connect.services.iresult.html": {
    "href": "api/i2connect.services.iresult.html",
    "title": "services.IResult interface",
    "keywords": "Home > @i2analyze/i2connect > services > IResult services.IResult interface A result from a service method on a connector for the i2 Connect server. Signature: interface IResult Introduced: API version 2.0 Methods Method Description addEntity(type, id) Adds a new entity record to the result, whose identifier is a string that you provide. addEntity(type, id) Adds a new entity record to the result, whose identifier is a source identifier that you create. addEntity(type, id) Adds a new entity record to the result, whose identifier is a string that you provide or a source identifier that you create. addEntityFromSeed(seed) Adds an entity record that was passed to the service as a seed to the result. addEntityFromSeed(seed) Adds an entity record that was passed to the service as a seed to the result. addLink(type, id, fromEnd, toEnd, direction) Adds a new link record to the result, whose identifier is a string that you provide. addLink(type, id, fromEnd, toEnd, direction) Adds a new link record to the result, whose identifier is a source identifier that you create. addLink(type, id, fromEnd, toEnd, direction) Adds a new link record to the result, whose identifier is a string that you provide or a source identifier that you create. addLinkFromSeed(seed) Adds a link record that was passed to the service as a seed to the result. addLinkFromSeed(seed) Adds a link record that was passed to the service as a seed to the result. getEntity(type, id) Gets a previously added entity record from the result, whose identifier is a string that you provided. getEntity(type, id) Gets a previously added entity record from the result, whose identifier is a source identifier that you created. getEntity(type, id) Gets a previously added entity record from the result, whose identifier is a string that you provided or a source identifier that you created. getEntityFromSeed(seed) Gets a previously added entity record from the result, based on an entity record that was passed to the service as a seed. getEntityFromSeed(seed) Gets a previously added entity record from the result, based on an entity record that was passed to the service as a seed. getLink(type, id) Gets a previously added link record from the result, whose identifier is a string that you provided. getLink(type, id) Gets a previously added link record from the result, whose identifier is a source identifier that you created. getLink(type, id) Gets a previously added link record from the result, whose identifier is a string that you provided or a source identifier that you created. getLinkFromSeed(seed) Gets a previously added link record from the result, based on a link record that was passed to the service as a seed. getLinkFromSeed(seed) Gets a previously added link record from the result, based on a link record that was passed to the service as a seed."
  },
  "api/i2connect.services.isecuritypermission.dimension.html": {
    "href": "api/i2connect.services.isecuritypermission.dimension.html",
    "title": "services.ISecurityPermission.dimension property",
    "keywords": "Home > @i2analyze/i2connect > services > ISecurityPermission > dimension services.ISecurityPermission.dimension property Gets the identifier of the dimension that the security permission applies to. Signature: readonly dimension: string; Returns: string Introduced: API version 1.2"
  },
  "api/i2connect.services.isecuritypermission.html": {
    "href": "api/i2connect.services.isecuritypermission.html",
    "title": "services.ISecurityPermission interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISecurityPermission services.ISecurityPermission interface A set of access levels associated with the values of a particular security dimension. Signature: interface ISecurityPermission Introduced: API version 1.2 Properties Property Type Description dimension string Gets the identifier of the dimension that the security permission applies to. permissions readonly { readonly dimensionValue: string; readonly level: AccessLevel <!-- --> ; }[] Gets the access levels that apply to the values of services.ISecurityPermission.dimension <!-- --> ."
  },
  "api/i2connect.services.isecuritypermission.permissions.html": {
    "href": "api/i2connect.services.isecuritypermission.permissions.html",
    "title": "services.ISecurityPermission.permissions property",
    "keywords": "Home > @i2analyze/i2connect > services > ISecurityPermission > permissions services.ISecurityPermission.permissions property Gets the access levels that apply to the values of services.ISecurityPermission.dimension <!-- --> . Signature: readonly permissions: readonly { readonly dimensionValue: string; readonly level: AccessLevel; }[]; Returns: readonly { readonly dimensionValue: string; readonly level: AccessLevel ; }[] Introduced: API version 1.2"
  },
  "api/i2connect.services.iseedconstraints.html": {
    "href": "api/i2connect.services.iseedconstraints.html",
    "title": "services.ISeedConstraints interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints services.ISeedConstraints interface A set of constraints on the records that can be passed as seeds to a service. Signature: interface ISeedConstraints<TItemType extends schema.ILinkType | schema.IEntityType = schema.ILinkType | schema.IEntityType> Introduced: API version 1.0 Type Parameters Parameter Type Description TItemType extends schema.ILinkType | schema.IEntityType (default: schema.ILinkType | schema.IEntityType ) The type of records that can be seeds - that is, whether they are entities or links. Properties Property Type Description max? number (Optional) Gets the maximum total number of seeds. min? number (Optional) Gets the minimum total number of seeds. thisConnectorOnly? boolean (Optional) Indicates whether only records that originate from the service's connector can be seeds. typeConstraints? 'anyEntities' | 'anyLinks' | (TItemType | IItemTypeConstraint <!-- --> <TItemType>)[] (Optional) Gets the constraints on the item types that seeds can have."
  },
  "api/i2connect.services.iseedconstraints.max.html": {
    "href": "api/i2connect.services.iseedconstraints.max.html",
    "title": "services.ISeedConstraints.max property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints > max services.ISeedConstraints.max property Gets the maximum total number of seeds. Signature: readonly max?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.iseedconstraints.min.html": {
    "href": "api/i2connect.services.iseedconstraints.min.html",
    "title": "services.ISeedConstraints.min property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints > min services.ISeedConstraints.min property Gets the minimum total number of seeds. Signature: readonly min?: number; Returns: number Introduced: API version 1.0"
  },
  "api/i2connect.services.iseedconstraints.thisconnectoronly.html": {
    "href": "api/i2connect.services.iseedconstraints.thisconnectoronly.html",
    "title": "services.ISeedConstraints.thisConnectorOnly property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints > thisConnectorOnly services.ISeedConstraints.thisConnectorOnly property Indicates whether only records that originate from the service's connector can be seeds. Signature: readonly thisConnectorOnly?: boolean; Returns: boolean Introduced: API version 1.0"
  },
  "api/i2connect.services.iseedconstraints.typeconstraints.html": {
    "href": "api/i2connect.services.iseedconstraints.typeconstraints.html",
    "title": "services.ISeedConstraints.typeConstraints property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedConstraints > typeConstraints services.ISeedConstraints.typeConstraints property Gets the constraints on the item types that seeds can have. Signature: readonly typeConstraints?: 'anyEntities' | 'anyLinks' | (TItemType | IItemTypeConstraint<TItemType>)[]; Returns: 'anyEntities' | 'anyLinks' | (TItemType | IItemTypeConstraint <TItemType>)[] Introduced: API version 1.0 Remarks If you provide no value for typeConstraints <!-- --> , then seeds can have any type. Otherwise, 'anyEntities' means that all seeds must be entity records (of any type), while 'anyLinks' means that all seeds must be link records (of any type). The last option allows you to specify exactly which types seed records can have, and to provide additional constraints if necessary."
  },
  "api/i2connect.services.iseededserviceconfig.html": {
    "href": "api/i2connect.services.iseededserviceconfig.html",
    "title": "services.ISeededServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISeededServiceConfig services.ISeededServiceConfig interface A collection of properties that provide the name and configuration for a service that might have item type seed constraints. Signature: interface ISeededServiceConfig extends ICoreServiceConfig, ISeedServiceConfig, ILongRunningServiceConfig, IAuthenticatorServiceConfig, IFormServiceConfig Extends: ICoreServiceConfig <!-- --> , ISeedServiceConfig <!-- --> , ILongRunningServiceConfig <!-- --> , IAuthenticatorServiceConfig <!-- --> , IFormServiceConfig Introduced: API version 2.2 Properties Property Type Description authenticator? IAuthenticator | undefined (Optional) Gets the authenticator to use, or undefined if authentication is not required. (Inherited from IAuthenticatorServiceConfig <!-- --> ) description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of what the service does, which might be displayed to users. (Inherited from ICoreServiceConfig <!-- --> ) form? BasicForm | SectionedForm (Optional) Gets the form definition, which configures a service to prompt for values that a user provides, subject to conditions that you specify. (Inherited from IFormServiceConfig <!-- --> ) formIsMandatory? boolean (Optional) Indicates whether the form should be presented to the user even if there are no mandatory conditions. (Inherited from IFormServiceConfig <!-- --> ) hasPersistentResultIds? boolean (Optional) Indicates whether the identifiers of result records from the service are persistent from one call to the next. (Inherited from ICoreServiceConfig <!-- --> ) hide? HidePredicate (Optional) Gets whether the service should be hidden from the current user, based on information in the request. (Inherited from ICoreServiceConfig <!-- --> ) id string Gets the identifier of the service. (Inherited from ICoreServiceConfig <!-- --> ) longRunning? boolean | { pollingIntervalInSeconds?: number; } (Optional) Indicates whether the service involves a long-running operation. (Inherited from ILongRunningServiceConfig <!-- --> ) name string | RequestSpecificValue <!-- --> <string> Gets the name of the service. (Inherited from ICoreServiceConfig <!-- --> ) resultItemTypes? schema.IItemType <!-- --> [] (Optional) Gets the item types that result records from the service can have. (Inherited from ICoreServiceConfig <!-- --> ) seedConstraints? TSeedConstraints (Optional) Gets the constraints on records that can be passed as seeds to the service. (Inherited from ISeedServiceConfig <!-- --> ) semanticSeedConstraints? never (Optional) (Inherited from ISeedServiceConfig <!-- --> )"
  },
  "api/i2connect.services.iseeds.entities.html": {
    "href": "api/i2connect.services.iseeds.entities.html",
    "title": "services.ISeeds.entities property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeeds > entities services.ISeeds.entities property Gets the seed entities for the query. Each seed corresponds to an entity record that was selected on the chart. Signature: readonly entities: readonly records.ISeedEntityRecord[]; Returns: readonly records.ISeedEntityRecord [] Introduced: API version 1.0"
  },
  "api/i2connect.services.iseeds.html": {
    "href": "api/i2connect.services.iseeds.html",
    "title": "services.ISeeds interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISeeds services.ISeeds interface A set of seed records that the i2 Connect server passes to a service method. Signature: interface ISeeds Introduced: API version 1.0 Remarks Seed records are selected by users when they submit a query to your service through a client. Properties Property Type Description entities readonly records.ISeedEntityRecord <!-- --> [] Gets the seed entities for the query. Each seed corresponds to an entity record that was selected on the chart. links readonly records.ISeedLinkRecord <!-- --> [] Gets the seed links for the query. Each seed corresponds to a link record that was selected on the chart."
  },
  "api/i2connect.services.iseeds.links.html": {
    "href": "api/i2connect.services.iseeds.links.html",
    "title": "services.ISeeds.links property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeeds > links services.ISeeds.links property Gets the seed links for the query. Each seed corresponds to a link record that was selected on the chart. Signature: readonly links: readonly records.ISeedLinkRecord[]; Returns: readonly records.ISeedLinkRecord [] Introduced: API version 1.0"
  },
  "api/i2connect.services.iseedserviceconfig.html": {
    "href": "api/i2connect.services.iseedserviceconfig.html",
    "title": "services.ISeedServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedServiceConfig services.ISeedServiceConfig interface A collection of properties that define whether a service supports seeds, and the constraints on them. Signature: interface ISeedServiceConfig<TSeedConstraints extends ISeedConstraints<schema.IEntityType> | ISeedConstraints<schema.ILinkType> = ISeedConstraints<schema.IEntityType> | ISeedConstraints<schema.ILinkType>> Introduced: API version 2.0 Type Parameters Parameter Type Description TSeedConstraints extends ISeedConstraints < schema.IEntityType > | ISeedConstraints < schema.ILinkType (default: ISeedConstraints < schema.IEntityType > | ISeedConstraints < schema.ILinkType >) The type of the seed constraints. Properties Property Type Description seedConstraints? TSeedConstraints (Optional) Gets the constraints on records that can be passed as seeds to the service. semanticSeedConstraints? never (Optional)"
  },
  "api/i2connect.services.iseedserviceconfig.seedconstraints.html": {
    "href": "api/i2connect.services.iseedserviceconfig.seedconstraints.html",
    "title": "services.ISeedServiceConfig.seedConstraints property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedServiceConfig > seedConstraints services.ISeedServiceConfig.seedConstraints property Gets the constraints on records that can be passed as seeds to the service. Signature: seedConstraints?: TSeedConstraints; Returns: TSeedConstraints Introduced: API version 2.0 Remarks To make your service code simpler, try to constrain the seeds as strongly as you can."
  },
  "api/i2connect.services.iseedserviceconfig.semanticseedconstraints.html": {
    "href": "api/i2connect.services.iseedserviceconfig.semanticseedconstraints.html",
    "title": "services.ISeedServiceConfig.semanticSeedConstraints property",
    "keywords": "Home > @i2analyze/i2connect > services > ISeedServiceConfig > semanticSeedConstraints services.ISeedServiceConfig.semanticSeedConstraints property Signature: readonly semanticSeedConstraints?: never; Returns: never"
  },
  "api/i2connect.services.iselectedfromcondition.defaultvalue.html": {
    "href": "api/i2connect.services.iselectedfromcondition.defaultvalue.html",
    "title": "services.ISelectedFromCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > ISelectedFromCondition > defaultValue services.ISelectedFromCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.2"
  },
  "api/i2connect.services.iselectedfromcondition.html": {
    "href": "api/i2connect.services.iselectedfromcondition.html",
    "title": "services.ISelectedFromCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISelectedFromCondition services.ISelectedFromCondition interface A condition that prompts the user to select a value from a list. Signature: interface ISelectedFromCondition extends IConditionBase, IRequiresPossibleValues Extends: IConditionBase <!-- --> , IRequiresPossibleValues Introduced: API version 1.0 Properties Property Type Description defaultValue? string | RequestSpecificValue <!-- --> <string> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'selectedFromList' Gets the logical type of values that fulfill the condition. possibleValues schema.IPossibleValue <!-- --> [] | RequestSpecificValue <!-- --> < schema.IPossibleValue <!-- --> []> Gets the possible values. (Inherited from IRequiresPossibleValues <!-- --> )"
  },
  "api/i2connect.services.iselectedfromcondition.logicaltype.html": {
    "href": "api/i2connect.services.iselectedfromcondition.logicaltype.html",
    "title": "services.ISelectedFromCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > ISelectedFromCondition > logicalType services.ISelectedFromCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'selectedFromList'; Returns: 'selectedFromList' Introduced: API version 1.0"
  },
  "api/i2connect.services.isemanticseed.getasbooleans.html": {
    "href": "api/i2connect.services.isemanticseed.getasbooleans.html",
    "title": "services.ISemanticSeed.getAsBooleans() method",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed > getAsBooleans services.ISemanticSeed.getAsBooleans() method Gets the values of the properties with the specified semantic type as Booleans. Signature: getAsBooleans(semanticTypeId: string): boolean[] | undefined; Introduced: API version 2.2 Parameters Parameter Type Description semanticTypeId string The identifier of the semantic property type. Returns: boolean[] | undefined The Boolean values of the identified properties, or undefined <!-- --> . Remarks Used for the boolean logical type, and considers string values matching 'true' or 'false'."
  },
  "api/i2connect.services.isemanticseed.getasdateandtimes.html": {
    "href": "api/i2connect.services.isemanticseed.getasdateandtimes.html",
    "title": "services.ISemanticSeed.getAsDateAndTimes() method",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed > getAsDateAndTimes services.ISemanticSeed.getAsDateAndTimes() method Gets the values of the properties with the specified semantic type as dates-and-times. Signature: getAsDateAndTimes(semanticTypeId: string): data.IZonedDateTime[] | undefined; Introduced: API version 2.2 Parameters Parameter Type Description semanticTypeId string The identifier of the semantic property type. Returns: data.IZonedDateTime <!-- --> [] | undefined The date-and-time values of the identified properties, or undefined <!-- --> . Remarks Used for the dateAndTime logical type."
  },
  "api/i2connect.services.isemanticseed.getasdates.html": {
    "href": "api/i2connect.services.isemanticseed.getasdates.html",
    "title": "services.ISemanticSeed.getAsDates() method",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed > getAsDates services.ISemanticSeed.getAsDates() method Gets the values of the properties with the specified semantic type as dates. Signature: getAsDates(semanticTypeId: string): data.ILocalDate[] | undefined; Introduced: API version 2.2 Parameters Parameter Type Description semanticTypeId string The identifier of the semantic property type. Returns: data.ILocalDate <!-- --> [] | undefined The date values of the identified properties, or undefined <!-- --> . Remarks Used for the date logical type."
  },
  "api/i2connect.services.isemanticseed.getasdecimals.html": {
    "href": "api/i2connect.services.isemanticseed.getasdecimals.html",
    "title": "services.ISemanticSeed.getAsDecimals() method",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed > getAsDecimals services.ISemanticSeed.getAsDecimals() method Gets the values of the properties with the specified semantic type as decimals. Signature: getAsDecimals(semanticTypeId: string): data.IDecimal[] | undefined; Introduced: API version 2.2 Parameters Parameter Type Description semanticTypeId string The identifier of the semantic property type. Returns: data.IDecimal <!-- --> [] | undefined The decimal values of the identified properties, or undefined <!-- --> . Remarks Used for the decimal logical type."
  },
  "api/i2connect.services.isemanticseed.getasgeopoints.html": {
    "href": "api/i2connect.services.isemanticseed.getasgeopoints.html",
    "title": "services.ISemanticSeed.getAsGeoPoints() method",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed > getAsGeoPoints services.ISemanticSeed.getAsGeoPoints() method Gets the values of the properties with the specified semantic type as geospatial locations. Signature: getAsGeoPoints(semanticTypeId: string): data.IGeoPoint[] | undefined; Introduced: API version 2.2 Parameters Parameter Type Description semanticTypeId string The identifier of the semantic property type. Returns: data.IGeoPoint <!-- --> [] | undefined The geospatial values of the identified properties, or undefined <!-- --> . Remarks Used for the geospatial logical type."
  },
  "api/i2connect.services.isemanticseed.getasnumbers.html": {
    "href": "api/i2connect.services.isemanticseed.getasnumbers.html",
    "title": "services.ISemanticSeed.getAsNumbers() method",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed > getAsNumbers services.ISemanticSeed.getAsNumbers() method Gets the values of the properties with the specified semantic type as numbers. Signature: getAsNumbers(semanticTypeId: string): number[] | undefined; Introduced: API version 2.2 Parameters Parameter Type Description semanticTypeId string The identifier of the semantic property type. Returns: number[] | undefined The number values of the identified properties, or undefined <!-- --> . Remarks Used for the integer and double logical types, and considers strings that can be parsed as numbers."
  },
  "api/i2connect.services.isemanticseed.getasstrings.html": {
    "href": "api/i2connect.services.isemanticseed.getasstrings.html",
    "title": "services.ISemanticSeed.getAsStrings() method",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed > getAsStrings services.ISemanticSeed.getAsStrings() method Gets the values of the properties with the specified semantic type as strings. Signature: getAsStrings(semanticTypeId: string): string[] | undefined; Introduced: API version 2.2 Parameters Parameter Type Description semanticTypeId string The identifier of the semantic property type. Returns: string[] | undefined The string values of the identified properties, or undefined <!-- --> . Remarks Used for the singleLineString <!-- --> , multipleLineString <!-- --> , selectedFromList <!-- --> , and suggestedFromList logical types."
  },
  "api/i2connect.services.isemanticseed.getastimes.html": {
    "href": "api/i2connect.services.isemanticseed.getastimes.html",
    "title": "services.ISemanticSeed.getAsTimes() method",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed > getAsTimes services.ISemanticSeed.getAsTimes() method Gets the values of the properties with the specified semantic type as times. Signature: getAsTimes(semanticTypeId: string): data.ILocalTime[] | undefined; Introduced: API version 2.2 Parameters Parameter Type Description semanticTypeId string The identifier of the semantic property type. Returns: data.ILocalTime <!-- --> [] | undefined The time values of the identified properties, or undefined <!-- --> . Remarks Used for the time logical type."
  },
  "api/i2connect.services.isemanticseed.html": {
    "href": "api/i2connect.services.isemanticseed.html",
    "title": "services.ISemanticSeed interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed services.ISemanticSeed interface A semantic seed for a search operation, which contains the seed record and the semantic property values. Signature: interface ISemanticSeed Introduced: API version 2.2 Properties Property Type Description seed records.ISeedEntityRecord | records.ISeedLinkRecord Gets the record that passed the constraints to be a seed for the service. Methods Method Description getAsBooleans(semanticTypeId) Gets the values of the properties with the specified semantic type as Booleans. getAsDateAndTimes(semanticTypeId) Gets the values of the properties with the specified semantic type as dates-and-times. getAsDates(semanticTypeId) Gets the values of the properties with the specified semantic type as dates. getAsDecimals(semanticTypeId) Gets the values of the properties with the specified semantic type as decimals. getAsGeoPoints(semanticTypeId) Gets the values of the properties with the specified semantic type as geospatial locations. getAsNumbers(semanticTypeId) Gets the values of the properties with the specified semantic type as numbers. getAsStrings(semanticTypeId) Gets the values of the properties with the specified semantic type as strings. getAsTimes(semanticTypeId) Gets the values of the properties with the specified semantic type as times."
  },
  "api/i2connect.services.isemanticseed.seed.html": {
    "href": "api/i2connect.services.isemanticseed.seed.html",
    "title": "services.ISemanticSeed.seed property",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeed > seed services.ISemanticSeed.seed property Gets the record that passed the constraints to be a seed for the service. Signature: readonly seed: records.ISeedEntityRecord | records.ISeedLinkRecord; Returns: records.ISeedEntityRecord | records.ISeedLinkRecord Introduced: API version 2.2"
  },
  "api/i2connect.services.isemanticseedconstraints.html": {
    "href": "api/i2connect.services.isemanticseedconstraints.html",
    "title": "services.ISemanticSeedConstraints interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeedConstraints services.ISemanticSeedConstraints interface A set of semantic property type constraints on the records that can be passed as seeds to a service. Signature: interface ISemanticSeedConstraints Introduced: API version 2.2 Properties Property Type Description max? number (Optional) Gets the maximum total number of seeds. min? number (Optional) Gets the minimum total number of seeds. semanticPropertyTypeIds SemanticPropertyTypeIds Gets the semantic type identifiers of properties for which seeds must have values, keyed by a string identifier."
  },
  "api/i2connect.services.isemanticseedconstraints.max.html": {
    "href": "api/i2connect.services.isemanticseedconstraints.max.html",
    "title": "services.ISemanticSeedConstraints.max property",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeedConstraints > max services.ISemanticSeedConstraints.max property Gets the maximum total number of seeds. Signature: readonly max?: number; Returns: number Introduced: API version 2.2"
  },
  "api/i2connect.services.isemanticseedconstraints.min.html": {
    "href": "api/i2connect.services.isemanticseedconstraints.min.html",
    "title": "services.ISemanticSeedConstraints.min property",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeedConstraints > min services.ISemanticSeedConstraints.min property Gets the minimum total number of seeds. Signature: readonly min?: number; Returns: number Introduced: API version 2.2"
  },
  "api/i2connect.services.isemanticseedconstraints.semanticpropertytypeids.html": {
    "href": "api/i2connect.services.isemanticseedconstraints.semanticpropertytypeids.html",
    "title": "services.ISemanticSeedConstraints.semanticPropertyTypeIds property",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeedConstraints > semanticPropertyTypeIds services.ISemanticSeedConstraints.semanticPropertyTypeIds property Gets the semantic type identifiers of properties for which seeds must have values, keyed by a string identifier. Signature: readonly semanticPropertyTypeIds: SemanticPropertyTypeIds; Returns: SemanticPropertyTypeIds Introduced: API version 2.2 Remarks Each array is an ANDed set of semantic property type identifiers. To pass the constraint, a seed must have a value for each of the properties identified by at least one of the arrays."
  },
  "api/i2connect.services.isemanticseededserviceconfig.html": {
    "href": "api/i2connect.services.isemanticseededserviceconfig.html",
    "title": "services.ISemanticSeededServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeededServiceConfig services.ISemanticSeededServiceConfig interface A collection of properties that provide the name and configuration for a service that has semantic property type seed constraints. Signature: interface ISemanticSeededServiceConfig extends ICoreServiceConfig, ISemanticSeedServiceConfig, ILongRunningServiceConfig, IAuthenticatorServiceConfig, IFormServiceConfig Extends: ICoreServiceConfig <!-- --> , ISemanticSeedServiceConfig <!-- --> , ILongRunningServiceConfig <!-- --> , IAuthenticatorServiceConfig <!-- --> , IFormServiceConfig Introduced: API version 2.2 Properties Property Type Description authenticator? IAuthenticator | undefined (Optional) Gets the authenticator to use, or undefined if authentication is not required. (Inherited from IAuthenticatorServiceConfig <!-- --> ) description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of what the service does, which might be displayed to users. (Inherited from ICoreServiceConfig <!-- --> ) form? BasicForm | SectionedForm (Optional) Gets the form definition, which configures a service to prompt for values that a user provides, subject to conditions that you specify. (Inherited from IFormServiceConfig <!-- --> ) formIsMandatory? boolean (Optional) Indicates whether the form should be presented to the user even if there are no mandatory conditions. (Inherited from IFormServiceConfig <!-- --> ) hasPersistentResultIds? boolean (Optional) Indicates whether the identifiers of result records from the service are persistent from one call to the next. (Inherited from ICoreServiceConfig <!-- --> ) hide? HidePredicate (Optional) Gets whether the service should be hidden from the current user, based on information in the request. (Inherited from ICoreServiceConfig <!-- --> ) id string Gets the identifier of the service. (Inherited from ICoreServiceConfig <!-- --> ) longRunning? boolean | { pollingIntervalInSeconds?: number; } (Optional) Indicates whether the service involves a long-running operation. (Inherited from ILongRunningServiceConfig <!-- --> ) name string | RequestSpecificValue <!-- --> <string> Gets the name of the service. (Inherited from ICoreServiceConfig <!-- --> ) resultItemTypes? schema.IItemType <!-- --> [] (Optional) Gets the item types that result records from the service can have. (Inherited from ICoreServiceConfig <!-- --> ) seedConstraints? never (Optional) (Inherited from ISemanticSeedServiceConfig <!-- --> ) semanticSeedConstraints? ISemanticSeedConstraints (Optional) Gets the semantic property type constraints on records that can be passed as seeds to the service. (Inherited from ISemanticSeedServiceConfig <!-- --> )"
  },
  "api/i2connect.services.isemanticseedserviceconfig.html": {
    "href": "api/i2connect.services.isemanticseedserviceconfig.html",
    "title": "services.ISemanticSeedServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeedServiceConfig services.ISemanticSeedServiceConfig interface A collection of properties that define whether a service supports seeds with semantic property type constraints. Signature: interface ISemanticSeedServiceConfig Introduced: API version 2.2 Properties Property Type Description seedConstraints? never (Optional) semanticSeedConstraints? ISemanticSeedConstraints (Optional) Gets the semantic property type constraints on records that can be passed as seeds to the service."
  },
  "api/i2connect.services.isemanticseedserviceconfig.seedconstraints.html": {
    "href": "api/i2connect.services.isemanticseedserviceconfig.seedconstraints.html",
    "title": "services.ISemanticSeedServiceConfig.seedConstraints property",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeedServiceConfig > seedConstraints services.ISemanticSeedServiceConfig.seedConstraints property Signature: seedConstraints?: never; Returns: never"
  },
  "api/i2connect.services.isemanticseedserviceconfig.semanticseedconstraints.html": {
    "href": "api/i2connect.services.isemanticseedserviceconfig.semanticseedconstraints.html",
    "title": "services.ISemanticSeedServiceConfig.semanticSeedConstraints property",
    "keywords": "Home > @i2analyze/i2connect > services > ISemanticSeedServiceConfig > semanticSeedConstraints services.ISemanticSeedServiceConfig.semanticSeedConstraints property Gets the semantic property type constraints on records that can be passed as seeds to the service. Signature: readonly semanticSeedConstraints?: ISemanticSeedConstraints; Returns: ISemanticSeedConstraints Introduced: API version 2.2"
  },
  "api/i2connect.services.iservicecallbacks.acquire.html": {
    "href": "api/i2connect.services.iservicecallbacks.acquire.html",
    "title": "services.IServiceCallbacks.acquire property",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceCallbacks > acquire services.IServiceCallbacks.acquire property Gets the acquire callback. Signature: readonly acquire: utility.ServiceAcquireCallback<TConfig>; Returns: utility.ServiceAcquireCallback <TConfig> Introduced: API version 2.0"
  },
  "api/i2connect.services.iservicecallbacks.html": {
    "href": "api/i2connect.services.iservicecallbacks.html",
    "title": "services.IServiceCallbacks interface",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceCallbacks services.IServiceCallbacks interface A set of methods that the server calls when it uses a service. Signature: interface IServiceCallbacks<TConfig extends IServiceConfigType = IServiceConfigType> Introduced: API version 2.0 Type Parameters Parameter Type Description TConfig extends IServiceConfigType (default: IServiceConfigType ) The type of the service config. Properties Property Type Description acquire utility.ServiceAcquireCallback <!-- --> <TConfig> Gets the acquire callback. validate? utility.ServiceValidateCallback <!-- --> <TConfig> (Optional) Gets the optional validate callback."
  },
  "api/i2connect.services.iservicecallbacks.validate.html": {
    "href": "api/i2connect.services.iservicecallbacks.validate.html",
    "title": "services.IServiceCallbacks.validate property",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceCallbacks > validate services.IServiceCallbacks.validate property Gets the optional validate callback. Signature: readonly validate?: utility.ServiceValidateCallback<TConfig>; Returns: utility.ServiceValidateCallback <TConfig> Introduced: API version 2.0"
  },
  "api/i2connect.services.iserviceconfig.html": {
    "href": "api/i2connect.services.iserviceconfig.html",
    "title": "services.IServiceConfig type",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceConfig services.IServiceConfig type Warning: This API is now obsolete. Use ISeededServiceConfig instead. This interface will be removed in the next major version of the API. A collection of properties that provide the name and configuration for a service that might have item type seed constraints. Signature: type IServiceConfig = ISeededServiceConfig; References: ISeededServiceConfig Introduced: API version 1.0"
  },
  "api/i2connect.services.iserviceconfigtype.html": {
    "href": "api/i2connect.services.iserviceconfigtype.html",
    "title": "services.IServiceConfigType type",
    "keywords": "Home > @i2analyze/i2connect > services > IServiceConfigType services.IServiceConfigType type The configuration information for a service on an i2 Connect connector. Signature: type IServiceConfigType = ISeededServiceConfig | ISemanticSeededServiceConfig; References: ISeededServiceConfig <!-- --> , ISemanticSeededServiceConfig Introduced: API version 2.2"
  },
  "api/i2connect.services.isinglelinestringcondition.defaultvalue.html": {
    "href": "api/i2connect.services.isinglelinestringcondition.defaultvalue.html",
    "title": "services.ISingleLineStringCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > ISingleLineStringCondition > defaultValue services.ISingleLineStringCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.2"
  },
  "api/i2connect.services.isinglelinestringcondition.html": {
    "href": "api/i2connect.services.isinglelinestringcondition.html",
    "title": "services.ISingleLineStringCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISingleLineStringCondition services.ISingleLineStringCondition interface A condition that prompts the user for a single-line string value. Signature: interface ISingleLineStringCondition extends IConditionBase, ISupportsStringValidation, ISupportsMaxLength Extends: IConditionBase <!-- --> , ISupportsStringValidation <!-- --> , ISupportsMaxLength Introduced: API version 1.0 Properties Property Type Description defaultValue? string | RequestSpecificValue <!-- --> <string> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'singleLineString' Gets the logical type of values that fulfill the condition. maxStringLength? ICharLimit (Optional) Gets the maximum number of characters that the string can contain. (Inherited from ISupportsMaxLength <!-- --> ) validation? IStringValidator (Optional) Gets the validator to use on the string value. (Inherited from ISupportsStringValidation <!-- --> )"
  },
  "api/i2connect.services.isinglelinestringcondition.logicaltype.html": {
    "href": "api/i2connect.services.isinglelinestringcondition.logicaltype.html",
    "title": "services.ISingleLineStringCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > ISingleLineStringCondition > logicalType services.ISingleLineStringCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'singleLineString'; Returns: 'singleLineString' Introduced: API version 1.0"
  },
  "api/i2connect.services.istringvalidator.html": {
    "href": "api/i2connect.services.istringvalidator.html",
    "title": "services.IStringValidator interface",
    "keywords": "Home > @i2analyze/i2connect > services > IStringValidator services.IStringValidator interface A constraint on the contents of a string value. Signature: interface IStringValidator Introduced: API version 1.0 Properties Property Type Description message string Gets the message to display if the string does not match regex . regex string Gets the regular expression that the string must match."
  },
  "api/i2connect.services.istringvalidator.message.html": {
    "href": "api/i2connect.services.istringvalidator.message.html",
    "title": "services.IStringValidator.message property",
    "keywords": "Home > @i2analyze/i2connect > services > IStringValidator > message services.IStringValidator.message property Gets the message to display if the string does not match regex <!-- --> . Signature: readonly message: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.services.istringvalidator.regex.html": {
    "href": "api/i2connect.services.istringvalidator.regex.html",
    "title": "services.IStringValidator.regex property",
    "keywords": "Home > @i2analyze/i2connect > services > IStringValidator > regex services.IStringValidator.regex property Gets the regular expression that the string must match. Signature: readonly regex: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.services.isubstatus.html": {
    "href": "api/i2connect.services.isubstatus.html",
    "title": "services.ISubstatus interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISubstatus services.ISubstatus interface A piece of information about the progress of a long-running service method call. Signature: interface ISubstatus Introduced: API version 1.0 Remarks Substatuses provide information at a finer level of detail than a simple \"succeeded\" or \"failed\" status. The asynchronous state for a particular long-running operation can contain multiple substatuses that report on different aspects of its progress. Properties Property Type Description message string Gets the message that is associated with the substatus information. type SubstatusType Gets the type of the substatus information."
  },
  "api/i2connect.services.isubstatus.message.html": {
    "href": "api/i2connect.services.isubstatus.message.html",
    "title": "services.ISubstatus.message property",
    "keywords": "Home > @i2analyze/i2connect > services > ISubstatus > message services.ISubstatus.message property Gets the message that is associated with the substatus information. Signature: readonly message: string; Returns: string Introduced: API version 1.0"
  },
  "api/i2connect.services.isubstatus.type.html": {
    "href": "api/i2connect.services.isubstatus.type.html",
    "title": "services.ISubstatus.type property",
    "keywords": "Home > @i2analyze/i2connect > services > ISubstatus > type services.ISubstatus.type property Gets the type of the substatus information. Signature: readonly type: SubstatusType; Returns: SubstatusType Introduced: API version 1.0"
  },
  "api/i2connect.services.isuggestedfromcondition.defaultvalue.html": {
    "href": "api/i2connect.services.isuggestedfromcondition.defaultvalue.html",
    "title": "services.ISuggestedFromCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > ISuggestedFromCondition > defaultValue services.ISuggestedFromCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: string | RequestSpecificValue<string>; Returns: string | RequestSpecificValue <string> Introduced: API version 1.2"
  },
  "api/i2connect.services.isuggestedfromcondition.html": {
    "href": "api/i2connect.services.isuggestedfromcondition.html",
    "title": "services.ISuggestedFromCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISuggestedFromCondition services.ISuggestedFromCondition interface A condition that prompts the user to provide a value or select one from a list. Signature: interface ISuggestedFromCondition extends IConditionBase, IRequiresPossibleValues Extends: IConditionBase <!-- --> , IRequiresPossibleValues Introduced: API version 1.0 Properties Property Type Description defaultValue? string | RequestSpecificValue <!-- --> <string> (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'suggestedFromList' Gets the logical type of values that fulfill the condition. possibleValues schema.IPossibleValue <!-- --> [] | RequestSpecificValue <!-- --> < schema.IPossibleValue <!-- --> []> Gets the possible values. (Inherited from IRequiresPossibleValues <!-- --> )"
  },
  "api/i2connect.services.isuggestedfromcondition.logicaltype.html": {
    "href": "api/i2connect.services.isuggestedfromcondition.logicaltype.html",
    "title": "services.ISuggestedFromCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > ISuggestedFromCondition > logicalType services.ISuggestedFromCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'suggestedFromList'; Returns: 'suggestedFromList' Introduced: API version 1.0"
  },
  "api/i2connect.services.isupportsmaxlength.html": {
    "href": "api/i2connect.services.isupportsmaxlength.html",
    "title": "services.ISupportsMaxLength interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISupportsMaxLength services.ISupportsMaxLength interface A type that indicates that a string condition can impose a length constraint on values. Signature: interface ISupportsMaxLength Introduced: API version 1.0 Properties Property Type Description maxStringLength? ICharLimit (Optional) Gets the maximum number of characters that the string can contain."
  },
  "api/i2connect.services.isupportsmaxlength.maxstringlength.html": {
    "href": "api/i2connect.services.isupportsmaxlength.maxstringlength.html",
    "title": "services.ISupportsMaxLength.maxStringLength property",
    "keywords": "Home > @i2analyze/i2connect > services > ISupportsMaxLength > maxStringLength services.ISupportsMaxLength.maxStringLength property Gets the maximum number of characters that the string can contain. Signature: readonly maxStringLength?: ICharLimit; Returns: ICharLimit Introduced: API version 1.0"
  },
  "api/i2connect.services.isupportsstringvalidation.html": {
    "href": "api/i2connect.services.isupportsstringvalidation.html",
    "title": "services.ISupportsStringValidation interface",
    "keywords": "Home > @i2analyze/i2connect > services > ISupportsStringValidation services.ISupportsStringValidation interface A type that indicates that a string condition can impose a validation constraint on values. Signature: interface ISupportsStringValidation Introduced: API version 1.0 Properties Property Type Description validation? IStringValidator (Optional) Gets the validator to use on the string value."
  },
  "api/i2connect.services.isupportsstringvalidation.validation.html": {
    "href": "api/i2connect.services.isupportsstringvalidation.validation.html",
    "title": "services.ISupportsStringValidation.validation property",
    "keywords": "Home > @i2analyze/i2connect > services > ISupportsStringValidation > validation services.ISupportsStringValidation.validation property Gets the validator to use on the string value. Signature: readonly validation?: IStringValidator; Returns: IStringValidator Introduced: API version 1.0"
  },
  "api/i2connect.services.itimecondition.defaultvalue.html": {
    "href": "api/i2connect.services.itimecondition.defaultvalue.html",
    "title": "services.ITimeCondition.defaultValue property",
    "keywords": "Home > @i2analyze/i2connect > services > ITimeCondition > defaultValue services.ITimeCondition.defaultValue property Gets the default value for the condition. Signature: readonly defaultValue?: utility.WritableTime | RequestSpecificValue<utility.WritableTime>; Returns: utility.WritableTime | RequestSpecificValue < utility.WritableTime > Introduced: API version 2.0"
  },
  "api/i2connect.services.itimecondition.html": {
    "href": "api/i2connect.services.itimecondition.html",
    "title": "services.ITimeCondition interface",
    "keywords": "Home > @i2analyze/i2connect > services > ITimeCondition services.ITimeCondition interface A condition that prompts the user for a time value. Signature: interface ITimeCondition extends IConditionBase Extends: IConditionBase Introduced: API version 1.0 Properties Property Type Description defaultValue? utility.WritableTime | RequestSpecificValue <!-- --> < utility.WritableTime <!-- --> > (Optional) Gets the default value for the condition. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of the condition, which might be displayed in the user interface. (Inherited from IConditionBase <!-- --> ) hide? HidePredicate (Optional) Gets whether the condition should be hidden from the current user, based on information in the request. (Inherited from IConditionBase <!-- --> ) isMandatory? boolean (Optional) Indicates whether the user must provide a value for the condition before they can use the service. (Inherited from IConditionBase <!-- --> ) label string | RequestSpecificValue <!-- --> <string> Gets the label for the condition, which is displayed in the user interface. (Inherited from IConditionBase <!-- --> ) logicalType 'time' Gets the logical type of values that fulfill the condition."
  },
  "api/i2connect.services.itimecondition.logicaltype.html": {
    "href": "api/i2connect.services.itimecondition.logicaltype.html",
    "title": "services.ITimeCondition.logicalType property",
    "keywords": "Home > @i2analyze/i2connect > services > ITimeCondition > logicalType services.ITimeCondition.logicalType property Gets the logical type of values that fulfill the condition. Signature: readonly logicalType: 'time'; Returns: 'time' Introduced: API version 1.0"
  },
  "api/i2connect.services.ivisualqueryservicecallbacks.acquire.html": {
    "href": "api/i2connect.services.ivisualqueryservicecallbacks.acquire.html",
    "title": "services.IVisualQueryServiceCallbacks.acquire property",
    "keywords": "Home > @i2analyze/i2connect > services > IVisualQueryServiceCallbacks > acquire services.IVisualQueryServiceCallbacks.acquire property Gets the acquire callback. Signature: readonly acquire: utility.VisualQueryServiceAcquireCallback<TConfig>; Returns: utility.VisualQueryServiceAcquireCallback <TConfig> Introduced: API version 2.3"
  },
  "api/i2connect.services.ivisualqueryservicecallbacks.html": {
    "href": "api/i2connect.services.ivisualqueryservicecallbacks.html",
    "title": "services.IVisualQueryServiceCallbacks interface",
    "keywords": "Home > @i2analyze/i2connect > services > IVisualQueryServiceCallbacks services.IVisualQueryServiceCallbacks interface A set of methods that the server calls when it uses a visual query service. Signature: interface IVisualQueryServiceCallbacks<TConfig extends IVisualQueryServiceConfig = IVisualQueryServiceConfig> Introduced: API version 2.3 Type Parameters Parameter Type Description TConfig extends IVisualQueryServiceConfig (default: IVisualQueryServiceConfig ) The type of the service config. Properties Property Type Description acquire utility.VisualQueryServiceAcquireCallback <!-- --> <TConfig> Gets the acquire callback. validate? utility.VisualQueryServiceValidateCallback <!-- --> <TConfig> (Optional) Gets the optional validate callback."
  },
  "api/i2connect.services.ivisualqueryservicecallbacks.validate.html": {
    "href": "api/i2connect.services.ivisualqueryservicecallbacks.validate.html",
    "title": "services.IVisualQueryServiceCallbacks.validate property",
    "keywords": "Home > @i2analyze/i2connect > services > IVisualQueryServiceCallbacks > validate services.IVisualQueryServiceCallbacks.validate property Gets the optional validate callback. Signature: readonly validate?: utility.VisualQueryServiceValidateCallback<TConfig>; Returns: utility.VisualQueryServiceValidateCallback <TConfig> Introduced: API version 2.3"
  },
  "api/i2connect.services.ivisualqueryserviceconfig.config.html": {
    "href": "api/i2connect.services.ivisualqueryserviceconfig.config.html",
    "title": "services.IVisualQueryServiceConfig.config property",
    "keywords": "Home > @i2analyze/i2connect > services > IVisualQueryServiceConfig > config services.IVisualQueryServiceConfig.config property Gets the restrictions on the visual queries that users can create with the service. Signature: readonly config: spi.VisualQueryConfig; Returns: spi.VisualQueryConfig Introduced: API version 2.3"
  },
  "api/i2connect.services.ivisualqueryserviceconfig.html": {
    "href": "api/i2connect.services.ivisualqueryserviceconfig.html",
    "title": "services.IVisualQueryServiceConfig interface",
    "keywords": "Home > @i2analyze/i2connect > services > IVisualQueryServiceConfig services.IVisualQueryServiceConfig interface A collection of properties that provide the name and configuration for a visual query service. Signature: interface IVisualQueryServiceConfig extends ICoreServiceConfig, ILongRunningServiceConfig, IAuthenticatorServiceConfig Extends: ICoreServiceConfig <!-- --> , ILongRunningServiceConfig <!-- --> , IAuthenticatorServiceConfig Introduced: API version 2.3 Properties Property Type Description authenticator? IAuthenticator | undefined (Optional) Gets the authenticator to use, or undefined if authentication is not required. (Inherited from IAuthenticatorServiceConfig <!-- --> ) config spi.VisualQueryConfig Gets the restrictions on the visual queries that users can create with the service. description? string | RequestSpecificValue <!-- --> <string> (Optional) Gets a description of what the service does, which might be displayed to users. (Inherited from ICoreServiceConfig <!-- --> ) hasPersistentResultIds? boolean (Optional) Indicates whether the identifiers of result records from the service are persistent from one call to the next. (Inherited from ICoreServiceConfig <!-- --> ) hide? HidePredicate (Optional) Gets whether the service should be hidden from the current user, based on information in the request. (Inherited from ICoreServiceConfig <!-- --> ) id string Gets the identifier of the service. (Inherited from ICoreServiceConfig <!-- --> ) longRunning? boolean | { pollingIntervalInSeconds?: number; } (Optional) Indicates whether the service involves a long-running operation. (Inherited from ILongRunningServiceConfig <!-- --> ) name string | RequestSpecificValue <!-- --> <string> Gets the name of the service. (Inherited from ICoreServiceConfig <!-- --> ) resultItemTypes? schema.IItemType <!-- --> [] (Optional) Gets the item types that result records from the service can have. (Inherited from ICoreServiceConfig <!-- --> )"
  },
  "api/i2connect.services.requestspecificvalue.html": {
    "href": "api/i2connect.services.requestspecificvalue.html",
    "title": "services.RequestSpecificValue type",
    "keywords": "Home > @i2analyze/i2connect > services > RequestSpecificValue services.RequestSpecificValue type A function that returns a value of type T based on the contents of an services.IRequestInformation object that it receives. Signature: type RequestSpecificValue<T> = (requestInformation: IRequestInformation) => T | Promise<T>; References: IRequestInformation Introduced: API version 1.2 Parameters Parameter Description requestInformation Information that the function can use to determine what value to return. Type Parameters Parameter Type Description T any The type of the value."
  },
  "api/i2connect.services.sectionedform.html": {
    "href": "api/i2connect.services.sectionedform.html",
    "title": "services.SectionedForm type",
    "keywords": "Home > @i2analyze/i2connect > services > SectionedForm services.SectionedForm type A form with sections for an i2 Connect service. Signature: type SectionedForm = Record<string, IFormSection>; References: IFormSection Introduced: API version 2.0 Example addService( { id: 'exampleSectionedForms', name: 'Example Sectioned Forms', description: 'A service that contains a sectioned form', form: { section1: { title: 'Section 1', conditions: { id: { label: 'id', logicalType: 'singleLineString', isMandatory: true, }, }, }, section2: { title: 'Section 2', conditions: { id: { label: 'id', logicalType: 'singleLineString', isMandatory: true, }, }, }, }, }, ({ sections: { section1, section2 } }) => { console.log(`Section 1 id: ${section1.id}`); console.log(`Section 2 id: ${section2.id}`); } );"
  },
  "api/i2connect.services.semanticpropertytypeids.html": {
    "href": "api/i2connect.services.semanticpropertytypeids.html",
    "title": "services.SemanticPropertyTypeIds type",
    "keywords": "Home > @i2analyze/i2connect > services > SemanticPropertyTypeIds services.SemanticPropertyTypeIds type Sets of semantic property type identifiers, keyed by strings that identify each set. Signature: type SemanticPropertyTypeIds = Record<string, readonly string[]>; Introduced: API version 2.2"
  },
  "api/i2connect.services.semanticseeds.html": {
    "href": "api/i2connect.services.semanticseeds.html",
    "title": "services.SemanticSeeds type",
    "keywords": "Home > @i2analyze/i2connect > services > SemanticSeeds services.SemanticSeeds type A set of semantic seeds, keyed by the string identifiers of the constraints that they passed. Signature: type SemanticSeeds = Record<string, services.ISemanticSeed[]>; References: services.ISemanticSeed Introduced: API version 2.2"
  },
  "api/i2connect.services.substatustype.html": {
    "href": "api/i2connect.services.substatustype.html",
    "title": "services.SubstatusType type",
    "keywords": "Home > @i2analyze/i2connect > services > SubstatusType services.SubstatusType type A type for a piece of substatus information. Signature: type SubstatusType = 'success' | 'information' | 'warning' | 'error'; Introduced: API version 1.0"
  },
  "api/i2connect.settings.getboolean.html": {
    "href": "api/i2connect.settings.getboolean.html",
    "title": "settings.getBoolean() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getBoolean settings.getBoolean() function Gets a Boolean value from a setting, or throws an Error if the setting is missing or not a Boolean. Signature: function getBoolean(path: string, isRequired: true): boolean; Introduced: API version 2.1 Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. isRequired true true to throw an exception rather than return undefined if config does not specify a valid Boolean. Returns: boolean The Boolean value."
  },
  "api/i2connect.settings.getboolean_1.html": {
    "href": "api/i2connect.settings.getboolean_1.html",
    "title": "settings.getBoolean() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getBoolean settings.getBoolean() function Gets a Boolean value from a setting, or undefined if the setting is missing or not a Boolean. Signature: function getBoolean(path: string): boolean | undefined; Introduced: API version 2.1 Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. Returns: boolean | undefined The Boolean value, or undefined <!-- --> ."
  },
  "api/i2connect.settings.getboolean_2.html": {
    "href": "api/i2connect.settings.getboolean_2.html",
    "title": "settings.getBoolean() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getBoolean settings.getBoolean() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets a Boolean value from a setting, or throws an Error if the setting is missing or not a Boolean. Signature: function getBoolean(config: IGetSettingConfig, isRequired: true): boolean; Introduced: API version 2.0 Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. isRequired true true to throw an exception rather than return undefined if config does not specify a valid Boolean. Returns: boolean The Boolean value."
  },
  "api/i2connect.settings.getboolean_3.html": {
    "href": "api/i2connect.settings.getboolean_3.html",
    "title": "settings.getBoolean() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getBoolean settings.getBoolean() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets a Boolean value from a setting, or undefined if the setting is missing or not a Boolean. Signature: function getBoolean(config: IGetSettingConfig): boolean | undefined; Introduced: API version 2.0 Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. Returns: boolean | undefined The Boolean value, or undefined <!-- --> ."
  },
  "api/i2connect.settings.getnumber.html": {
    "href": "api/i2connect.settings.getnumber.html",
    "title": "settings.getNumber() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getNumber settings.getNumber() function Gets a numeric value from a setting, or throws an Error if the setting is missing or not a number. Signature: function getNumber(path: string, isRequired: true): number; Introduced: API version 2.1 Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. isRequired true true to throw an exception rather than return undefined if config does not specify a valid number. Returns: number The numeric value."
  },
  "api/i2connect.settings.getnumber_1.html": {
    "href": "api/i2connect.settings.getnumber_1.html",
    "title": "settings.getNumber() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getNumber settings.getNumber() function Gets a numeric value from a setting, or undefined if the setting is missing or not a number. Signature: function getNumber(path: string): number | undefined; Introduced: API version 2.1 Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. Returns: number | undefined The numeric value, or undefined <!-- --> ."
  },
  "api/i2connect.settings.getnumber_2.html": {
    "href": "api/i2connect.settings.getnumber_2.html",
    "title": "settings.getNumber() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getNumber settings.getNumber() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets a numeric value from a setting, or throws an Error if the setting is missing or not a number. Signature: function getNumber(config: IGetSettingConfig, isRequired: true): number; Introduced: API version 2.0 Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. isRequired true true to throw an exception rather than return undefined if config does not specify a valid number. Returns: number The numeric value."
  },
  "api/i2connect.settings.getnumber_3.html": {
    "href": "api/i2connect.settings.getnumber_3.html",
    "title": "settings.getNumber() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getNumber settings.getNumber() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets a numeric value from a setting, or undefined if the setting is missing or not a number. Signature: function getNumber(config: IGetSettingConfig): number | undefined; Introduced: API version 2.0 Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. Returns: number | undefined The numeric value, or undefined <!-- --> ."
  },
  "api/i2connect.settings.getobject.html": {
    "href": "api/i2connect.settings.getobject.html",
    "title": "settings.getObject() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getObject settings.getObject() function Gets an object from a setting, or throws an Error if the setting is missing or not an object. Signature: function getObject<TValue = unknown>(path: string, isRequired: true): TValue; Introduced: API version 2.0 Type Parameters Parameter Type Description TValue any (default: unknown) The type of the object to retrieve. Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. isRequired true true to throw an exception rather than return undefined if config does not specify a valid object. Returns: TValue The object."
  },
  "api/i2connect.settings.getobject_1.html": {
    "href": "api/i2connect.settings.getobject_1.html",
    "title": "settings.getObject() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getObject settings.getObject() function Gets an object from a setting, or undefined if the setting is missing or not an object. Signature: function getObject<TValue = unknown>(path: string): TValue | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TValue any (default: unknown) The type of the object to retrieve. Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. Returns: TValue | undefined The object, or undefined <!-- --> ."
  },
  "api/i2connect.settings.getobject_2.html": {
    "href": "api/i2connect.settings.getobject_2.html",
    "title": "settings.getObject() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getObject settings.getObject() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets an object from a setting, or throws an Error if the setting is missing or not an object. Signature: function getObject<TValue = unknown>(config: IGetSettingConfig, isRequired: true): TValue; Introduced: API version 2.0 Type Parameters Parameter Type Description TValue any (default: unknown) The type of the object to retrieve. Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. isRequired true true to throw an exception rather than return undefined if config does not specify a valid object. Returns: TValue The object."
  },
  "api/i2connect.settings.getobject_3.html": {
    "href": "api/i2connect.settings.getobject_3.html",
    "title": "settings.getObject() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getObject settings.getObject() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets an object from a setting, or undefined if the setting is missing or not an object. Signature: function getObject<TValue = unknown>(config: IGetSettingConfig): TValue | undefined; Introduced: API version 2.0 Type Parameters Parameter Type Description TValue any (default: unknown) The type of the object to retrieve. Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. Returns: TValue | undefined The object, or undefined <!-- --> ."
  },
  "api/i2connect.settings.getstring.html": {
    "href": "api/i2connect.settings.getstring.html",
    "title": "settings.getString() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getString settings.getString() function Gets a string value from a setting, or throws an Error if the setting is missing or not a string. Signature: function getString(path: string, isRequired: true): string; Introduced: API version 2.1 Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. isRequired true true to throw an exception rather than return undefined if config does not specify a valid string. Returns: string The string value."
  },
  "api/i2connect.settings.getstring_1.html": {
    "href": "api/i2connect.settings.getstring_1.html",
    "title": "settings.getString() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getString settings.getString() function Gets a string value from a setting, or throws an Error if the setting is missing or not a string. Signature: function getString(path: string): string | undefined; Introduced: API version 2.1 Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. Returns: string | undefined The string value."
  },
  "api/i2connect.settings.getstring_2.html": {
    "href": "api/i2connect.settings.getstring_2.html",
    "title": "settings.getString() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getString settings.getString() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets a string value from a setting, or throws an Error if the setting is missing or not a string. Signature: function getString(config: IGetSettingConfig, isRequired: true): string; Introduced: API version 2.0 Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. isRequired true true to throw an exception rather than return undefined if config does not specify a valid string. Returns: string The string value."
  },
  "api/i2connect.settings.getstring_3.html": {
    "href": "api/i2connect.settings.getstring_3.html",
    "title": "settings.getString() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getString settings.getString() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets a string value from a setting, or undefined if the setting is missing or not a string. Signature: function getString(config: IGetSettingConfig): string | undefined; Introduced: API version 2.0 Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. Returns: string | undefined The string value, or undefined <!-- --> ."
  },
  "api/i2connect.settings.getstringarray.html": {
    "href": "api/i2connect.settings.getstringarray.html",
    "title": "settings.getStringArray() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getStringArray settings.getStringArray() function Gets a string array from a setting, or throws an Error if the setting is missing or not a string array. Signature: function getStringArray(path: string, isRequired: true): string[]; Introduced: API version 2.0 Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. isRequired true true to throw an exception rather than return undefined if config does not specify a valid string array. Returns: string[] The string array."
  },
  "api/i2connect.settings.getstringarray_1.html": {
    "href": "api/i2connect.settings.getstringarray_1.html",
    "title": "settings.getStringArray() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getStringArray settings.getStringArray() function Gets a string array from a setting, or undefined if the setting is missing or not a string array. Signature: function getStringArray(path: string): string[] | undefined; Introduced: API version 2.0 Parameters Parameter Type Description path string The path to the location of the setting within the config/settings.json file. Returns: string[] | undefined The string array, or undefined <!-- --> ."
  },
  "api/i2connect.settings.getstringarray_2.html": {
    "href": "api/i2connect.settings.getstringarray_2.html",
    "title": "settings.getStringArray() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getStringArray settings.getStringArray() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets a string array from a setting, or throws an Error if the setting is missing or not a string array. Signature: function getStringArray(config: IGetSettingConfig, isRequired: true): string[]; Introduced: API version 2.0 Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. isRequired true true to throw an exception rather than return undefined if config does not specify a valid string array. Returns: string[] The string array."
  },
  "api/i2connect.settings.getstringarray_3.html": {
    "href": "api/i2connect.settings.getstringarray_3.html",
    "title": "settings.getStringArray() function",
    "keywords": "Home > @i2analyze/i2connect > settings > getStringArray settings.getStringArray() function Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This function will be removed in the next major version of the API. Gets a string array from a setting, or undefined if the setting is missing or not a string array. Signature: function getStringArray(config: IGetSettingConfig): string[] | undefined; Introduced: API version 2.0 Parameters Parameter Type Description config IGetSettingConfig The setting whose value is to be retrieved. Returns: string[] | undefined The string array, or undefined <!-- --> ."
  },
  "api/i2connect.settings.html": {
    "href": "api/i2connect.settings.html",
    "title": "settings namespace",
    "keywords": "Home > @i2analyze/i2connect > settings settings namespace The members of the settings namespace allow you to retrieve connector settings from environment variables and the configuration file. Signature: export declare namespace settings Introduced: API version 2.0 Functions Function Description getBoolean(path, isRequired) Gets a Boolean value from a setting, or throws an Error if the setting is missing or not a Boolean. getBoolean(path) Gets a Boolean value from a setting, or undefined if the setting is missing or not a Boolean. getBoolean(config, isRequired) Gets a Boolean value from a setting, or throws an Error if the setting is missing or not a Boolean. getBoolean(config) Gets a Boolean value from a setting, or undefined if the setting is missing or not a Boolean. getNumber(path, isRequired) Gets a numeric value from a setting, or throws an Error if the setting is missing or not a number. getNumber(path) Gets a numeric value from a setting, or undefined if the setting is missing or not a number. getNumber(config, isRequired) Gets a numeric value from a setting, or throws an Error if the setting is missing or not a number. getNumber(config) Gets a numeric value from a setting, or undefined if the setting is missing or not a number. getObject(path, isRequired) Gets an object from a setting, or throws an Error if the setting is missing or not an object. getObject(path) Gets an object from a setting, or undefined if the setting is missing or not an object. getObject(config, isRequired) Gets an object from a setting, or throws an Error if the setting is missing or not an object. getObject(config) Gets an object from a setting, or undefined if the setting is missing or not an object. getString(path, isRequired) Gets a string value from a setting, or throws an Error if the setting is missing or not a string. getString(path) Gets a string value from a setting, or throws an Error if the setting is missing or not a string. getString(config, isRequired) Gets a string value from a setting, or throws an Error if the setting is missing or not a string. getString(config) Gets a string value from a setting, or undefined if the setting is missing or not a string. getStringArray(path, isRequired) Gets a string array from a setting, or throws an Error if the setting is missing or not a string array. getStringArray(path) Gets a string array from a setting, or undefined if the setting is missing or not a string array. getStringArray(config, isRequired) Gets a string array from a setting, or throws an Error if the setting is missing or not a string array. getStringArray(config) Gets a string array from a setting, or undefined if the setting is missing or not a string array. Interfaces Interface Description IGetSettingEnvVarConfig A set of information that specifies a connector setting in an environment variable. IGetSettingPathAndEnvVarConfig A set of information that specifies a connector setting in the configuration file and an environment variable. IGetSettingPathConfig A set of information that specifies a connector setting in the configuration file. Type Aliases Type Alias Description IGetSettingConfig A set of information that specifies a connector setting."
  },
  "api/i2connect.settings.igetsettingconfig.html": {
    "href": "api/i2connect.settings.igetsettingconfig.html",
    "title": "settings.IGetSettingConfig type",
    "keywords": "Home > @i2analyze/i2connect > settings > IGetSettingConfig settings.IGetSettingConfig type Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This interface will be removed in the next major version of the API. A set of information that specifies a connector setting. Signature: type IGetSettingConfig = IGetSettingPathAndEnvVarConfig | IGetSettingEnvVarConfig | IGetSettingPathConfig; References: IGetSettingPathAndEnvVarConfig <!-- --> , IGetSettingEnvVarConfig <!-- --> , IGetSettingPathConfig Introduced: API version 2.0 Remarks These can be an IGetSettingPathConfig <!-- --> , an IGetSettingEnvVarConfig <!-- --> , or an IGetSettingPathAndEnvVarConfig <!-- --> ."
  },
  "api/i2connect.settings.igetsettingenvvarconfig.environmentvariable.html": {
    "href": "api/i2connect.settings.igetsettingenvvarconfig.environmentvariable.html",
    "title": "settings.IGetSettingEnvVarConfig.environmentVariable property",
    "keywords": "Home > @i2analyze/i2connect > settings > IGetSettingEnvVarConfig > environmentVariable settings.IGetSettingEnvVarConfig.environmentVariable property Gets the name of the environment variable. Signature: readonly environmentVariable: string; Returns: string Introduced: API version 2.0"
  },
  "api/i2connect.settings.igetsettingenvvarconfig.html": {
    "href": "api/i2connect.settings.igetsettingenvvarconfig.html",
    "title": "settings.IGetSettingEnvVarConfig interface",
    "keywords": "Home > @i2analyze/i2connect > settings > IGetSettingEnvVarConfig settings.IGetSettingEnvVarConfig interface Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This interface will be removed in the next major version of the API. A set of information that specifies a connector setting in an environment variable. Signature: interface IGetSettingEnvVarConfig Introduced: API version 2.0 Properties Property Type Description environmentVariable string Gets the name of the environment variable."
  },
  "api/i2connect.settings.igetsettingpathandenvvarconfig.environmentvariable.html": {
    "href": "api/i2connect.settings.igetsettingpathandenvvarconfig.environmentvariable.html",
    "title": "settings.IGetSettingPathAndEnvVarConfig.environmentVariable property",
    "keywords": "Home > @i2analyze/i2connect > settings > IGetSettingPathAndEnvVarConfig > environmentVariable settings.IGetSettingPathAndEnvVarConfig.environmentVariable property Gets the name of the environment variable that, if present, overrides the configuration file setting. Signature: readonly environmentVariable: string; Returns: string Introduced: API version 2.0"
  },
  "api/i2connect.settings.igetsettingpathandenvvarconfig.html": {
    "href": "api/i2connect.settings.igetsettingpathandenvvarconfig.html",
    "title": "settings.IGetSettingPathAndEnvVarConfig interface",
    "keywords": "Home > @i2analyze/i2connect > settings > IGetSettingPathAndEnvVarConfig settings.IGetSettingPathAndEnvVarConfig interface Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This interface will be removed in the next major version of the API. A set of information that specifies a connector setting in the configuration file and an environment variable. Signature: interface IGetSettingPathAndEnvVarConfig extends IGetSettingPathConfig Extends: IGetSettingPathConfig Introduced: API version 2.0 Properties Property Type Description environmentVariable string Gets the name of the environment variable that, if present, overrides the configuration file setting. path string Gets the path to the location of the setting within the config/settings.json file. (Inherited from IGetSettingPathConfig <!-- --> )"
  },
  "api/i2connect.settings.igetsettingpathconfig.html": {
    "href": "api/i2connect.settings.igetsettingpathconfig.html",
    "title": "settings.IGetSettingPathConfig interface",
    "keywords": "Home > @i2analyze/i2connect > settings > IGetSettingPathConfig settings.IGetSettingPathConfig interface Warning: This API is now obsolete. Version 2.1 of the API introduces an updated configuration mechanism . This interface will be removed in the next major version of the API. A set of information that specifies a connector setting in the configuration file. Signature: interface IGetSettingPathConfig Introduced: API version 2.0 Properties Property Type Description path string Gets the path to the location of the setting within the config/settings.json file."
  },
  "api/i2connect.settings.igetsettingpathconfig.path.html": {
    "href": "api/i2connect.settings.igetsettingpathconfig.path.html",
    "title": "settings.IGetSettingPathConfig.path property",
    "keywords": "Home > @i2analyze/i2connect > settings > IGetSettingPathConfig > path settings.IGetSettingPathConfig.path property Gets the path to the location of the setting within the config/settings.json file. Signature: readonly path: string; Returns: string Introduced: API version 2.0"
  },
  "api/i2connect.spi.async.html": {
    "href": "api/i2connect.spi.async.html",
    "title": "spi.Async type",
    "keywords": "Home > @i2analyze/i2connect > spi > Async spi.Async type Indicates that queries are asynchronous, and provides configuration settings. If this is present, then acquireUrl must not be present. Signature: export type Async = { pollingIntervalInSeconds?: number; queriesResource: string; };"
  },
  "api/i2connect.spi.asyncqueryresponse.html": {
    "href": "api/i2connect.spi.asyncqueryresponse.html",
    "title": "spi.AsyncQueryResponse type",
    "keywords": "Home > @i2analyze/i2connect > spi > AsyncQueryResponse spi.AsyncQueryResponse type The result of successfully starting an asynchronous query. Signature: export type AsyncQueryResponse = { queryId: string; };"
  },
  "api/i2connect.spi.asyncquerystatus.html": {
    "href": "api/i2connect.spi.asyncquerystatus.html",
    "title": "spi.AsyncQueryStatus type",
    "keywords": "Home > @i2analyze/i2connect > spi > AsyncQueryStatus spi.AsyncQueryStatus type Information about the progress of an asynchronous query. Signature: export type AsyncQueryStatus = { errorMessage?: string; state?: 'STARTED' | 'SUCCEEDED' | 'FAILED'; substatuses?: Array<AsyncQuerySubstatus>; propertyBag?: Record<string, any>; }; References: AsyncQuerySubstatus"
  },
  "api/i2connect.spi.asyncquerysubstatus.html": {
    "href": "api/i2connect.spi.asyncquerysubstatus.html",
    "title": "spi.AsyncQuerySubstatus type",
    "keywords": "Home > @i2analyze/i2connect > spi > AsyncQuerySubstatus spi.AsyncQuerySubstatus type A message about the progress of an asynchronous query, which might be displayed to users. Signature: export type AsyncQuerySubstatus = { message: string; type: 'INFORMATION' | 'WARNING' | 'ERROR' | 'SUCCESS'; };"
  },
  "api/i2connect.spi.authconfig.html": {
    "href": "api/i2connect.spi.authconfig.html",
    "title": "spi.AuthConfig type",
    "keywords": "Home > @i2analyze/i2connect > spi > AuthConfig spi.AuthConfig type Information about how to authenticate the users of a connector. Signature: export type AuthConfig = { form: AuthConfigForm; id: string; loginUrl: string; }; References: AuthConfigForm"
  },
  "api/i2connect.spi.authconfigform.html": {
    "href": "api/i2connect.spi.authconfigform.html",
    "title": "spi.AuthConfigForm type",
    "keywords": "Home > @i2analyze/i2connect > spi > AuthConfigForm spi.AuthConfigForm type A form that users complete with their credentials. Signature: export type AuthConfigForm = { description: string; fields: Array<AuthConfigFormField>; }; References: AuthConfigFormField"
  },
  "api/i2connect.spi.authconfigformfield.html": {
    "href": "api/i2connect.spi.authconfigformfield.html",
    "title": "spi.AuthConfigFormField type",
    "keywords": "Home > @i2analyze/i2connect > spi > AuthConfigFormField spi.AuthConfigFormField type A field in an authentication form. Signature: export type AuthConfigFormField = { id: string; label: string; type: string; };"
  },
  "api/i2connect.spi.authresponse.html": {
    "href": "api/i2connect.spi.authresponse.html",
    "title": "spi.AuthResponse type",
    "keywords": "Home > @i2analyze/i2connect > spi > AuthResponse spi.AuthResponse type The result of successful user authentication. Signature: export type AuthResponse = { token: string; };"
  },
  "api/i2connect.spi.clientconfig.html": {
    "href": "api/i2connect.spi.clientconfig.html",
    "title": "spi.ClientConfig type",
    "keywords": "Home > @i2analyze/i2connect > spi > ClientConfig spi.ClientConfig type An indication of how a client should interact with the service. Signature: export type ClientConfig = { config: FormConfig | VisualQueryConfig | unknown; id: string; type: ClientConfigType; }; References: FormConfig <!-- --> , VisualQueryConfig <!-- --> , ClientConfigType"
  },
  "api/i2connect.spi.clientconfigtype.html": {
    "href": "api/i2connect.spi.clientconfigtype.html",
    "title": "spi.ClientConfigType type",
    "keywords": "Home > @i2analyze/i2connect > spi > ClientConfigType spi.ClientConfigType type The type of the client configuration. Signature: export type ClientConfigType = 'CUSTOM' | 'FORM' | 'VISUAL_QUERY' | 'NONE';"
  },
  "api/i2connect.spi.connectorconfig.html": {
    "href": "api/i2connect.spi.connectorconfig.html",
    "title": "spi.ConnectorConfig type",
    "keywords": "Home > @i2analyze/i2connect > spi > ConnectorConfig spi.ConnectorConfig type Complete information about a connector for the i2 Connect gateway. Signature: export type ConnectorConfig = { version?: string; chartingSchemesUrl?: string; gatewaySchema?: string; schemaShortName?: string; schemaUrl?: string; userConfigUrl?: string; } & ConnectorConfigBase; References: ConnectorConfigBase"
  },
  "api/i2connect.spi.connectorconfigbase.html": {
    "href": "api/i2connect.spi.connectorconfigbase.html",
    "title": "spi.ConnectorConfigBase type",
    "keywords": "Home > @i2analyze/i2connect > spi > ConnectorConfigBase spi.ConnectorConfigBase type Information about the services that a connector provides. Signature: export type ConnectorConfigBase = { defaultValues?: ConnectorDefaultValues; services?: Array<Service>; authConfigs?: Array<AuthConfig>; clientConfigs?: Array<ClientConfig>; }; References: ConnectorDefaultValues <!-- --> , Service <!-- --> , AuthConfig <!-- --> , ClientConfig"
  },
  "api/i2connect.spi.connectordefaultvalues.html": {
    "href": "api/i2connect.spi.connectordefaultvalues.html",
    "title": "spi.ConnectorDefaultValues type",
    "keywords": "Home > @i2analyze/i2connect > spi > ConnectorDefaultValues spi.ConnectorDefaultValues type Settings for clients to apply to the data they receive, if the data does not indicate otherwise. Signature: export type ConnectorDefaultValues = { entityTypeId?: string; entityTypeLocation?: SchemaTypeLocation; linkDirection?: LinkDirection; linkTypeId?: string; linkTypeLocation?: SchemaTypeLocation; resultIdsPersistent?: boolean; timeZoneId?: string; }; References: SchemaTypeLocation <!-- --> , LinkDirection"
  },
  "api/i2connect.spi.connectorseedconstraintitemtype.html": {
    "href": "api/i2connect.spi.connectorseedconstraintitemtype.html",
    "title": "spi.ConnectorSeedConstraintItemType type",
    "keywords": "Home > @i2analyze/i2connect > spi > ConnectorSeedConstraintItemType spi.ConnectorSeedConstraintItemType type A seed constraint that is based on the item type of seed records. Signature: export type ConnectorSeedConstraintItemType = { id: string; max?: number; min?: number; typeLocation?: SchemaTypeLocation; }; References: SchemaTypeLocation"
  },
  "api/i2connect.spi.connectorseedconstraints.html": {
    "href": "api/i2connect.spi.connectorseedconstraints.html",
    "title": "spi.ConnectorSeedConstraints type",
    "keywords": "Home > @i2analyze/i2connect > spi > ConnectorSeedConstraints spi.ConnectorSeedConstraints type The constraints on the seeds that users can specify, or null if the service does not support seeds. Signature: export type ConnectorSeedConstraints = { connectorIds?: Array<string>; max?: number; min?: number; seedTypes?: ConnectorSeedTypes; }; References: ConnectorSeedTypes"
  },
  "api/i2connect.spi.connectorseeditemtypes.html": {
    "href": "api/i2connect.spi.connectorseeditemtypes.html",
    "title": "spi.ConnectorSeedItemTypes type",
    "keywords": "Home > @i2analyze/i2connect > spi > ConnectorSeedItemTypes spi.ConnectorSeedItemTypes type The item types that records must have in order to be used as seeds. Signature: export type ConnectorSeedItemTypes = { allowedTypes?: 'ENTITY' | 'LINK'; itemTypes?: Array<ConnectorSeedConstraintItemType>; }; References: ConnectorSeedConstraintItemType"
  },
  "api/i2connect.spi.connectorseedsemanticpropertytypes.html": {
    "href": "api/i2connect.spi.connectorseedsemanticpropertytypes.html",
    "title": "spi.ConnectorSeedSemanticPropertyTypes type",
    "keywords": "Home > @i2analyze/i2connect > spi > ConnectorSeedSemanticPropertyTypes spi.ConnectorSeedSemanticPropertyTypes type The semantic types of properties that records must have in order to be used as seeds. Signature: export type ConnectorSeedSemanticPropertyTypes = { semanticPropertyTypes?: Record<string, Array<string>>; };"
  },
  "api/i2connect.spi.connectorseedtypes.html": {
    "href": "api/i2connect.spi.connectorseedtypes.html",
    "title": "spi.ConnectorSeedTypes type",
    "keywords": "Home > @i2analyze/i2connect > spi > ConnectorSeedTypes spi.ConnectorSeedTypes type The types that to be used as seeds. Signature: export type ConnectorSeedTypes = ConnectorSeedItemTypes | ConnectorSeedSemanticPropertyTypes; References: ConnectorSeedItemTypes <!-- --> , ConnectorSeedSemanticPropertyTypes"
  },
  "api/i2connect.spi.daodrequest.html": {
    "href": "api/i2connect.spi.daodrequest.html",
    "title": "spi.DaodRequest type",
    "keywords": "Home > @i2analyze/i2connect > spi > DaodRequest spi.DaodRequest type A search request that a service receives from a client. Signature: export type DaodRequest = { payload: DaodRequestPayload; }; References: DaodRequestPayload"
  },
  "api/i2connect.spi.daodrequestcondition.html": {
    "href": "api/i2connect.spi.daodrequestcondition.html",
    "title": "spi.DaodRequestCondition type",
    "keywords": "Home > @i2analyze/i2connect > spi > DaodRequestCondition spi.DaodRequestCondition type A condition in a search request. Signature: export type DaodRequestCondition = { id: string; logicalType: FormLogicalType; value: any; }; References: FormLogicalType"
  },
  "api/i2connect.spi.daodrequestpayload.html": {
    "href": "api/i2connect.spi.daodrequestpayload.html",
    "title": "spi.DaodRequestPayload type",
    "keywords": "Home > @i2analyze/i2connect > spi > DaodRequestPayload spi.DaodRequestPayload type A custom payload that an i2 Connect service can use to determine what data to retrieve from a connected source. Signature: export type DaodRequestPayload = { conditions?: Array<DaodRequestCondition>; seeds?: DaodSeeds; visualQuery?: Array<VisualQueryItem>; }; References: DaodRequestCondition <!-- --> , DaodSeeds <!-- --> , VisualQueryItem"
  },
  "api/i2connect.spi.daodseedentitydata.html": {
    "href": "api/i2connect.spi.daodseedentitydata.html",
    "title": "spi.DaodSeedEntityData type",
    "keywords": "Home > @i2analyze/i2connect > spi > DaodSeedEntityData spi.DaodSeedEntityData type The data from an entity record to be used as a seed in a search operation. Signature: export type DaodSeedEntityData = { typeLocation?: TypeLocation; } & DaodSeedItemData; References: TypeLocation <!-- --> , DaodSeedItemData"
  },
  "api/i2connect.spi.daodseeditemdata.html": {
    "href": "api/i2connect.spi.daodseeditemdata.html",
    "title": "spi.DaodSeedItemData type",
    "keywords": "Home > @i2analyze/i2connect > spi > DaodSeedItemData spi.DaodSeedItemData type Data from a record to be used as a seed in a search operation. Signature: export type DaodSeedItemData = { sourceIds: Array<SeedSourceIdentifier>; seedId: string; typeId: string; label?: string; properties?: Record<string, PropertyValueType>; accessDimensionValues?: Array<SecurityDimensionAndValues>; extensions?: Record<string, any>; }; References: SeedSourceIdentifier <!-- --> , PropertyValueType <!-- --> , SecurityDimensionAndValues"
  },
  "api/i2connect.spi.daodseedlinkdata.html": {
    "href": "api/i2connect.spi.daodseedlinkdata.html",
    "title": "spi.DaodSeedLinkData type",
    "keywords": "Home > @i2analyze/i2connect > spi > DaodSeedLinkData spi.DaodSeedLinkData type The data from a link record to be used as a seed in a search operation. Signature: export type DaodSeedLinkData = { fromEndId: any; fromEndTypeId: string; linkDirection: LinkDirection; toEndId: any; toEndTypeId: string; typeLocation?: TypeLocation; } & DaodSeedItemData; References: LinkDirection <!-- --> , TypeLocation <!-- --> , DaodSeedItemData"
  },
  "api/i2connect.spi.daodseeds.html": {
    "href": "api/i2connect.spi.daodseeds.html",
    "title": "spi.DaodSeeds type",
    "keywords": "Home > @i2analyze/i2connect > spi > DaodSeeds spi.DaodSeeds type The data from all the records that are to be used as seeds in a search operation. Signature: export type DaodSeeds = { allItemTypes?: Array<ItemType>; entities?: Array<DaodSeedEntityData>; itemTypes?: Record<string, ItemType>; links?: Array<DaodSeedLinkData>; semanticData?: Record<string, Array<SemanticSeed>>; }; References: ItemType <!-- --> , DaodSeedEntityData <!-- --> , DaodSeedLinkData <!-- --> , SemanticSeed"
  },
  "api/i2connect.spi.dateandtime.html": {
    "href": "api/i2connect.spi.dateandtime.html",
    "title": "spi.DateAndTime type",
    "keywords": "Home > @i2analyze/i2connect > spi > DateAndTime spi.DateAndTime type A fully qualified date and time, including a time zone. Signature: export type DateAndTime = { isDST: boolean; localDateAndTime: string; timeZoneId: string; };"
  },
  "api/i2connect.spi.entitydataidentifier.html": {
    "href": "api/i2connect.spi.entitydataidentifier.html",
    "title": "spi.EntityDataIdentifier type",
    "keywords": "Home > @i2analyze/i2connect > spi > EntityDataIdentifier spi.EntityDataIdentifier type The identifier of the data for a record in its source. If the record was a seed in the request, then this contains the seed identifier in string form. If the record is from the Information Store, then this contains the record identifier. Alternatively, the value can be a source identifier. Signature: export type EntityDataIdentifier = string | EntityDataIdentifierSourceId | InfoStoreIdentifier; References: EntityDataIdentifierSourceId <!-- --> , InfoStoreIdentifier"
  },
  "api/i2connect.spi.entitydataidentifiersourceid.html": {
    "href": "api/i2connect.spi.entitydataidentifiersourceid.html",
    "title": "spi.EntityDataIdentifierSourceId type",
    "keywords": "Home > @i2analyze/i2connect > spi > EntityDataIdentifierSourceId spi.EntityDataIdentifierSourceId type A source identifier being used to identify an entity or a link. Signature: export type EntityDataIdentifierSourceId = { sourceId: SourceIdentifier; }; References: SourceIdentifier"
  },
  "api/i2connect.spi.extrastringvalidation.html": {
    "href": "api/i2connect.spi.extrastringvalidation.html",
    "title": "spi.ExtraStringValidation type",
    "keywords": "Home > @i2analyze/i2connect > spi > ExtraStringValidation spi.ExtraStringValidation type A regular expression for extra validation of a string value. Signature: export type ExtraStringValidation = { regex: string; message: string; };"
  },
  "api/i2connect.spi.feature.html": {
    "href": "api/i2connect.spi.feature.html",
    "title": "spi.Feature type",
    "keywords": "Home > @i2analyze/i2connect > spi > Feature spi.Feature type A geospatial feature, which can be a point, a polygon, or a multi-polygon. Signature: export type Feature = { type: 'Feature'; geometry: Geometry; id?: string; properties?: Record<string, string>; }; References: Geometry"
  },
  "api/i2connect.spi.featurecollection.html": {
    "href": "api/i2connect.spi.featurecollection.html",
    "title": "spi.FeatureCollection type",
    "keywords": "Home > @i2analyze/i2connect > spi > FeatureCollection spi.FeatureCollection type A collection of geospatial features. Signature: export type FeatureCollection = { type: 'FeatureCollection'; features: Array<Feature>; }; References: Feature"
  },
  "api/i2connect.spi.formconfig.html": {
    "href": "api/i2connect.spi.formconfig.html",
    "title": "spi.FormConfig type",
    "keywords": "Home > @i2analyze/i2connect > spi > FormConfig spi.FormConfig type A form that is presented to users in the client. Signature: export type FormConfig = { mandatory?: boolean; sections: Array<FormConfigSection>; }; References: FormConfigSection"
  },
  "api/i2connect.spi.formconfigcondition.html": {
    "href": "api/i2connect.spi.formconfigcondition.html",
    "title": "spi.FormConfigCondition type",
    "keywords": "Home > @i2analyze/i2connect > spi > FormConfigCondition spi.FormConfigCondition type A condition in a form. Signature: export type FormConfigCondition = { id: string; label: string; description?: string; mandatory?: boolean; logicalType: FormLogicalType; defaultValue?: any; minValue?: number; maxValue?: number; maxStringLength?: MaxStringLength; extraStringValidation?: ExtraStringValidation; possibleValues?: Array<PossibleConditionValue>; }; References: FormLogicalType <!-- --> , MaxStringLength <!-- --> , ExtraStringValidation <!-- --> , PossibleConditionValue"
  },
  "api/i2connect.spi.formconfigsection.html": {
    "href": "api/i2connect.spi.formconfigsection.html",
    "title": "spi.FormConfigSection type",
    "keywords": "Home > @i2analyze/i2connect > spi > FormConfigSection spi.FormConfigSection type A section in a form that is presented to users. Signature: export type FormConfigSection = { title?: string; conditions?: Array<FormConfigCondition>; }; References: FormConfigCondition"
  },
  "api/i2connect.spi.formlogicaltype.html": {
    "href": "api/i2connect.spi.formlogicaltype.html",
    "title": "spi.FormLogicalType type",
    "keywords": "Home > @i2analyze/i2connect > spi > FormLogicalType spi.FormLogicalType type The logical type of a value that can be used in a form condition. Signature: export type FormLogicalType = | 'SINGLE_LINE_STRING' | 'MULTIPLE_LINE_STRING' | 'DATE' | 'TIME' | 'DATE_AND_TIME' | 'BOOLEAN' | 'INTEGER' | 'DOUBLE' | 'DECIMAL' | 'SELECTED_FROM' | 'SUGGESTED_FROM' | 'GEOSPATIAL' | 'GEOSPATIAL_AREA';"
  },
  "api/i2connect.spi.geojsonmultipolygon.html": {
    "href": "api/i2connect.spi.geojsonmultipolygon.html",
    "title": "spi.GeoJSONMultiPolygon type",
    "keywords": "Home > @i2analyze/i2connect > spi > GeoJSONMultiPolygon spi.GeoJSONMultiPolygon type The definitions of several polygons in geospace. Signature: export type GeoJSONMultiPolygon = { coordinates: Array<Array<Array<GeospatialCoordinate>>>; } & Geometry; References: GeospatialCoordinate <!-- --> , Geometry"
  },
  "api/i2connect.spi.geojsonpoint.html": {
    "href": "api/i2connect.spi.geojsonpoint.html",
    "title": "spi.GeoJSONPoint type",
    "keywords": "Home > @i2analyze/i2connect > spi > GeoJSONPoint spi.GeoJSONPoint type The definition of a point in geospace. Signature: export type GeoJSONPoint = { coordinates: GeospatialCoordinate; } & Geometry; References: GeospatialCoordinate <!-- --> , Geometry"
  },
  "api/i2connect.spi.geojsonpolygon.html": {
    "href": "api/i2connect.spi.geojsonpolygon.html",
    "title": "spi.GeoJSONPolygon type",
    "keywords": "Home > @i2analyze/i2connect > spi > GeoJSONPolygon spi.GeoJSONPolygon type The definition of a polygon in geospace. Signature: export type GeoJSONPolygon = { coordinates: Array<Array<GeospatialCoordinate>>; } & Geometry; References: GeospatialCoordinate <!-- --> , Geometry"
  },
  "api/i2connect.spi.geometry.html": {
    "href": "api/i2connect.spi.geometry.html",
    "title": "spi.Geometry type",
    "keywords": "Home > @i2analyze/i2connect > spi > Geometry spi.Geometry type A point or an area in geospace. Signature: export type Geometry = { type: 'Point' | 'Polygon' | 'MultiPolygon'; };"
  },
  "api/i2connect.spi.geospatialcoordinate.html": {
    "href": "api/i2connect.spi.geospatialcoordinate.html",
    "title": "spi.GeospatialCoordinate type",
    "keywords": "Home > @i2analyze/i2connect > spi > GeospatialCoordinate spi.GeospatialCoordinate type An array in which the first element represents longitude, the second represents latitude, and the (optional) third represents altitude. Signature: export type GeospatialCoordinate = Array<number>;"
  },
  "api/i2connect.spi.html": {
    "href": "api/i2connect.spi.html",
    "title": "spi namespace",
    "keywords": "Home > @i2analyze/i2connect > spi spi namespace A JavaScript representation of the objects in the raw i2 Connect gateway REST SPI . Signature: export namespace spi Introduced: API version 2.3 Type Aliases Type Alias Description Async Indicates that queries are asynchronous, and provides configuration settings. If this is present, then acquireUrl must not be present. AsyncQueryResponse The result of successfully starting an asynchronous query. AsyncQueryStatus Information about the progress of an asynchronous query. AsyncQuerySubstatus A message about the progress of an asynchronous query, which might be displayed to users. AuthConfig Information about how to authenticate the users of a connector. AuthConfigForm A form that users complete with their credentials. AuthConfigFormField A field in an authentication form. AuthResponse The result of successful user authentication. ClientConfig An indication of how a client should interact with the service. ClientConfigType The type of the client configuration. ConnectorConfig Complete information about a connector for the i2 Connect gateway. ConnectorConfigBase Information about the services that a connector provides. ConnectorDefaultValues Settings for clients to apply to the data they receive, if the data does not indicate otherwise. ConnectorSeedConstraintItemType A seed constraint that is based on the item type of seed records. ConnectorSeedConstraints The constraints on the seeds that users can specify, or null if the service does not support seeds. ConnectorSeedItemTypes The item types that records must have in order to be used as seeds. ConnectorSeedSemanticPropertyTypes The semantic types of properties that records must have in order to be used as seeds. ConnectorSeedTypes The types that to be used as seeds. DaodRequest A search request that a service receives from a client. DaodRequestCondition A condition in a search request. DaodRequestPayload A custom payload that an i2 Connect service can use to determine what data to retrieve from a connected source. DaodSeedEntityData The data from an entity record to be used as a seed in a search operation. DaodSeedItemData Data from a record to be used as a seed in a search operation. DaodSeedLinkData The data from a link record to be used as a seed in a search operation. DaodSeeds The data from all the records that are to be used as seeds in a search operation. DateAndTime A fully qualified date and time, including a time zone. EntityDataIdentifier The identifier of the data for a record in its source. <!-- --> If the record was a seed in the request, then this contains the seed identifier in string form. If the record is from the Information Store, then this contains the record identifier. Alternatively, the value can be a source identifier. EntityDataIdentifierSourceId A source identifier being used to identify an entity or a link. ExtraStringValidation A regular expression for extra validation of a string value. Feature A geospatial feature, which can be a point, a polygon, or a multi-polygon. FeatureCollection A collection of geospatial features. FormConfig A form that is presented to users in the client. FormConfigCondition A condition in a form. FormConfigSection A section in a form that is presented to users. FormLogicalType The logical type of a value that can be used in a form condition. GeoJSONMultiPolygon The definitions of several polygons in geospace. GeoJSONPoint The definition of a point in geospace. GeoJSONPolygon The definition of a polygon in geospace. Geometry A point or an area in geospace. GeospatialCoordinate An array in which the first element represents longitude, the second represents latitude, and the (optional) third represents altitude. I2ConnectData The results of a request for data to an i2 Connect service. I2ConnectEntityData An entity in the results of a request for data to an i2 Connect service. I2ConnectLinkData A link in the results of a request for data to an i2 Connect service. InfoStoreIdentifier The identifier of a record in the Information Store. ItemType An item type from an i2 Analyze schema. LinkDirection The logical direction of this link, expressed relative to its 'from' and 'to' ends. LogicalType The logical type of a value. MaxStringLength The maximum length of a string in a condition, expressed as a raw size with its units. PayloadValidationResponse The result of validating the contents of a request for data. PossibleConditionValue A possible value for use by SELECTED_FROM and SUGGESTED_FROM conditions. ProblemDetails The contents of the result of a failed HTTP request. PropertyType A property type of an item type from an i2 Analyze schema. PropertyValueType The type of a property value of a record. ResultItemTypeIds A set of item type identifiers from a particular schema. SchemaTypeLocation The schema in which an item type is defined. SecurityDimensionAndValues A set of values from a particular security dimension. SeedSourceIdentifier A source identifier in use as a seed identifier. SemanticProperty A property of a semantic seed. SemanticSeed The properties of a record in use as a semantic seed. SemanticTypeIdentifier The identifier of the semantic type for this property type. Service A service that a connector for the i2 Connect gateway makes available. SourceIdentifier A source identifier. SourceReference A source reference for a record. SourceReferenceInfo The information that the source reference contains. TypeLocation The schema in which the item type is defined. UserConnectorConfig User-specific information about the services that a connector provides. VisualQueryBooleanCondition A Boolean condition on a query item in a Visual Query structure. VisualQueryCondition A condition on a query item in a Visual Query structure. VisualQueryConditionAspect The aspect of the identified property or metadata to use in the Visual Query condition. VisualQueryConditionOperator The operator to use in the Visual Query condition. <!-- --> Operations on logical types whose data type is string are case-insensitive. In the same context, a sequence of consecutive white space characters is equivalent to a single white space character. <!-- --> Operations on logical types whose data type is Calendar perform their comparisons at the level of milliseconds. <!-- --> Operations on logical types with other data types proceed as follows: <!-- --> - For DECIMAL , java.math.BigDecimal#doubleValue() is used for the comparison - For DOUBLE , Double#equals(Object) is used for the comparison - For INTEGER , Integer#equals(Object) is used for the comparison - For BOOLEAN , Boolean#equals(Object) is used for the comparison VisualQueryConditionValueType The type of the values to use in this query condition. VisualQueryConfig The configuration that governs the behavior and content of Visual Queries. VisualQueryConstraints The constraints that apply to Visual Query structures. VisualQueryCountCondition A count condition on a query item in a Visual Query structure. VisualQueryCountConditionOperator The operator in a Visual Query count condition. VisualQueryDateAndTimeCondition A date-and-time condition on a query item in a Visual Query structure. VisualQueryEntity A query entity in a Visual Query structure. VisualQueryEntityPosition The position of a query entity in a Visual Query structure. VisualQueryGeospatialCondition A geospatial condition on a query item in a Visual Query structure. VisualQueryItem A query item in a Visual Query structure. VisualQueryLink A query link in a Visual Query structure. VisualQueryNumericCondition A numeric condition on a query item in a Visual Query structure. VisualQueryOperatorUsageRule A rule that governs the property types and operators that can appear in the conditions of a query item. VisualQueryPaletteItemTypes The specification of which item types appear in the Visual Query palette. VisualQueryStringCondition A string condition on a query item in a Visual Query structure."
  },
  "api/i2connect.spi.i2connectdata.html": {
    "href": "api/i2connect.spi.i2connectdata.html",
    "title": "spi.I2ConnectData type",
    "keywords": "Home > @i2analyze/i2connect > spi > I2ConnectData spi.I2ConnectData type The results of a request for data to an i2 Connect service. Signature: export type I2ConnectData = { entities?: Array<I2ConnectEntityData>; errorMessage?: string; links?: Array<I2ConnectLinkData>; }; References: I2ConnectEntityData <!-- --> , I2ConnectLinkData"
  },
  "api/i2connect.spi.i2connectentitydata.html": {
    "href": "api/i2connect.spi.i2connectentitydata.html",
    "title": "spi.I2ConnectEntityData type",
    "keywords": "Home > @i2analyze/i2connect > spi > I2ConnectEntityData spi.I2ConnectEntityData type An entity in the results of a request for data to an i2 Connect service. Signature: export type I2ConnectEntityData = { id: EntityDataIdentifier; properties?: Record<string, PropertyValueType>; sourceReference?: SourceReference; typeId?: string; typeLocation?: SchemaTypeLocation; version?: number; }; References: EntityDataIdentifier <!-- --> , PropertyValueType <!-- --> , SourceReference <!-- --> , SchemaTypeLocation"
  },
  "api/i2connect.spi.i2connectlinkdata.html": {
    "href": "api/i2connect.spi.i2connectlinkdata.html",
    "title": "spi.I2ConnectLinkData type",
    "keywords": "Home > @i2analyze/i2connect > spi > I2ConnectLinkData spi.I2ConnectLinkData type A link in the results of a request for data to an i2 Connect service. Signature: export type I2ConnectLinkData = { fromEndId?: EntityDataIdentifier; toEndId?: EntityDataIdentifier; linkDirection?: LinkDirection; } & I2ConnectEntityData; References: EntityDataIdentifier <!-- --> , LinkDirection <!-- --> , I2ConnectEntityData"
  },
  "api/i2connect.spi.infostoreidentifier.html": {
    "href": "api/i2connect.spi.infostoreidentifier.html",
    "title": "spi.InfoStoreIdentifier type",
    "keywords": "Home > @i2analyze/i2connect > spi > InfoStoreIdentifier spi.InfoStoreIdentifier type The identifier of a record in the Information Store. Signature: export type InfoStoreIdentifier = { infoStoreRecordId: string; };"
  },
  "api/i2connect.spi.itemtype.html": {
    "href": "api/i2connect.spi.itemtype.html",
    "title": "spi.ItemType type",
    "keywords": "Home > @i2analyze/i2connect > spi > ItemType spi.ItemType type An item type from an i2 Analyze schema. Signature: export type ItemType = { displayName?: string; propertyTypes?: Record<string, PropertyType>; semanticTypeId?: string; typeId?: string; typeLocation?: TypeLocation; }; References: PropertyType <!-- --> , TypeLocation"
  },
  "api/i2connect.spi.linkdirection.html": {
    "href": "api/i2connect.spi.linkdirection.html",
    "title": "spi.LinkDirection type",
    "keywords": "Home > @i2analyze/i2connect > spi > LinkDirection spi.LinkDirection type The logical direction of this link, expressed relative to its 'from' and 'to' ends. Signature: export type LinkDirection = 'NONE' | 'WITH' | 'AGAINST' | 'BOTH';"
  },
  "api/i2connect.spi.logicaltype.html": {
    "href": "api/i2connect.spi.logicaltype.html",
    "title": "spi.LogicalType type",
    "keywords": "Home > @i2analyze/i2connect > spi > LogicalType spi.LogicalType type The logical type of a value. Signature: export type LogicalType = | 'SINGLE_LINE_STRING' | 'MULTIPLE_LINE_STRING' | 'DATE' | 'TIME' | 'DATE_AND_TIME' | 'BOOLEAN' | 'INTEGER' | 'DOUBLE' | 'DECIMAL' | 'SELECTED_FROM' | 'SUGGESTED_FROM' | 'GEOSPATIAL';"
  },
  "api/i2connect.spi.maxstringlength.html": {
    "href": "api/i2connect.spi.maxstringlength.html",
    "title": "spi.MaxStringLength type",
    "keywords": "Home > @i2analyze/i2connect > spi > MaxStringLength spi.MaxStringLength type The maximum length of a string in a condition, expressed as a raw size with its units. Signature: export type MaxStringLength = { size: number; units?: 'utf16codeunits' | 'utf8bytes'; };"
  },
  "api/i2connect.spi.payloadvalidationresponse.html": {
    "href": "api/i2connect.spi.payloadvalidationresponse.html",
    "title": "spi.PayloadValidationResponse type",
    "keywords": "Home > @i2analyze/i2connect > spi > PayloadValidationResponse spi.PayloadValidationResponse type The result of validating the contents of a request for data. Signature: export type PayloadValidationResponse = { errorMessage?: string; };"
  },
  "api/i2connect.spi.possibleconditionvalue.html": {
    "href": "api/i2connect.spi.possibleconditionvalue.html",
    "title": "spi.PossibleConditionValue type",
    "keywords": "Home > @i2analyze/i2connect > spi > PossibleConditionValue spi.PossibleConditionValue type A possible value for use by SELECTED_FROM and SUGGESTED_FROM conditions. Signature: export type PossibleConditionValue = { value: string; displayName?: string; };"
  },
  "api/i2connect.spi.problemdetails.html": {
    "href": "api/i2connect.spi.problemdetails.html",
    "title": "spi.ProblemDetails type",
    "keywords": "Home > @i2analyze/i2connect > spi > ProblemDetails spi.ProblemDetails type The contents of the result of a failed HTTP request. Signature: export type ProblemDetails = { detail?: string; instance?: string; status?: number; title?: string; type?: string; };"
  },
  "api/i2connect.spi.propertytype.html": {
    "href": "api/i2connect.spi.propertytype.html",
    "title": "spi.PropertyType type",
    "keywords": "Home > @i2analyze/i2connect > spi > PropertyType spi.PropertyType type A property type of an item type from an i2 Analyze schema. Signature: export type PropertyType = { displayName?: string; logicalType?: LogicalType; semanticTypeId?: SemanticTypeIdentifier; }; References: LogicalType <!-- --> , SemanticTypeIdentifier"
  },
  "api/i2connect.spi.propertyvaluetype.html": {
    "href": "api/i2connect.spi.propertyvaluetype.html",
    "title": "spi.PropertyValueType type",
    "keywords": "Home > @i2analyze/i2connect > spi > PropertyValueType spi.PropertyValueType type The type of a property value of a record. Signature: export type PropertyValueType = string | DateAndTime | number | boolean | Point | undefined; References: DateAndTime"
  },
  "api/i2connect.spi.resultitemtypeids.html": {
    "href": "api/i2connect.spi.resultitemtypeids.html",
    "title": "spi.ResultItemTypeIds type",
    "keywords": "Home > @i2analyze/i2connect > spi > ResultItemTypeIds spi.ResultItemTypeIds type A set of item type identifiers from a particular schema. Signature: export type ResultItemTypeIds = Partial<Record<TypeLocation, string[]>>; References: TypeLocation"
  },
  "api/i2connect.spi.schematypelocation.html": {
    "href": "api/i2connect.spi.schematypelocation.html",
    "title": "spi.SchemaTypeLocation type",
    "keywords": "Home > @i2analyze/i2connect > spi > SchemaTypeLocation spi.SchemaTypeLocation type The schema in which an item type is defined. Signature: export type SchemaTypeLocation = 'CONNECTOR' | 'GATEWAY' | 'INFOSTORE';"
  },
  "api/i2connect.spi.securitydimensionandvalues.html": {
    "href": "api/i2connect.spi.securitydimensionandvalues.html",
    "title": "spi.SecurityDimensionAndValues type",
    "keywords": "Home > @i2analyze/i2connect > spi > SecurityDimensionAndValues spi.SecurityDimensionAndValues type A set of values from a particular security dimension. Signature: export type SecurityDimensionAndValues = { dimensionId?: string; ids?: Array<string>; };"
  },
  "api/i2connect.spi.seedsourceidentifier.html": {
    "href": "api/i2connect.spi.seedsourceidentifier.html",
    "title": "spi.SeedSourceIdentifier type",
    "keywords": "Home > @i2analyze/i2connect > spi > SeedSourceIdentifier spi.SeedSourceIdentifier type A source identifier in use as a seed identifier. Signature: export type SeedSourceIdentifier = { itemTypeId?: string; key: Array<string>; type: string; };"
  },
  "api/i2connect.spi.semanticproperty.html": {
    "href": "api/i2connect.spi.semanticproperty.html",
    "title": "spi.SemanticProperty type",
    "keywords": "Home > @i2analyze/i2connect > spi > SemanticProperty spi.SemanticProperty type A property of a semantic seed. Signature: export type SemanticProperty = { logicalType: LogicalType; value: any; sourceSemanticTypeId: string; }; References: LogicalType"
  },
  "api/i2connect.spi.semanticseed.html": {
    "href": "api/i2connect.spi.semanticseed.html",
    "title": "spi.SemanticSeed type",
    "keywords": "Home > @i2analyze/i2connect > spi > SemanticSeed spi.SemanticSeed type The properties of a record in use as a semantic seed. Signature: export type SemanticSeed = { seedId: string; isLink?: boolean; properties: Record<string, Array<SemanticProperty>>; }; References: SemanticProperty"
  },
  "api/i2connect.spi.semantictypeidentifier.html": {
    "href": "api/i2connect.spi.semantictypeidentifier.html",
    "title": "spi.SemanticTypeIdentifier type",
    "keywords": "Home > @i2analyze/i2connect > spi > SemanticTypeIdentifier spi.SemanticTypeIdentifier type The identifier of the semantic type for this property type. Signature: export type SemanticTypeIdentifier = string;"
  },
  "api/i2connect.spi.service.html": {
    "href": "api/i2connect.spi.service.html",
    "title": "spi.Service type",
    "keywords": "Home > @i2analyze/i2connect > spi > Service spi.Service type A service that a connector for the i2 Connect gateway makes available. Signature: export type Service = { id: string; name: string; description?: string; acquireUrl?: string; async?: Async; authConfigId?: string; clientConfigId?: string; clientConfigType?: 'CUSTOM' | 'FORM' | 'NONE'; resultIdsPersistent?: boolean; resultItemTypeIds?: ResultItemTypeIds; seedConstraints?: ConnectorSeedConstraints; validateUrl?: string; }; References: Async <!-- --> , ResultItemTypeIds <!-- --> , ConnectorSeedConstraints"
  },
  "api/i2connect.spi.sourceidentifier.html": {
    "href": "api/i2connect.spi.sourceidentifier.html",
    "title": "spi.SourceIdentifier type",
    "keywords": "Home > @i2analyze/i2connect > spi > SourceIdentifier spi.SourceIdentifier type A source identifier. Signature: export type SourceIdentifier = { key: ReadonlyArray<string>; type: string; };"
  },
  "api/i2connect.spi.sourcereference.html": {
    "href": "api/i2connect.spi.sourcereference.html",
    "title": "spi.SourceReference type",
    "keywords": "Home > @i2analyze/i2connect > spi > SourceReference spi.SourceReference type A source reference for a record. Signature: export type SourceReference = { source: SourceReferenceInfo; }; References: SourceReferenceInfo"
  },
  "api/i2connect.spi.sourcereferenceinfo.html": {
    "href": "api/i2connect.spi.sourcereferenceinfo.html",
    "title": "spi.SourceReferenceInfo type",
    "keywords": "Home > @i2analyze/i2connect > spi > SourceReferenceInfo spi.SourceReferenceInfo type The information that the source reference contains. Signature: export type SourceReferenceInfo = { description?: string; image?: string; location?: string; name: string; type?: string; };"
  },
  "api/i2connect.spi.typelocation.html": {
    "href": "api/i2connect.spi.typelocation.html",
    "title": "spi.TypeLocation type",
    "keywords": "Home > @i2analyze/i2connect > spi > TypeLocation spi.TypeLocation type The schema in which the item type is defined. Signature: export type TypeLocation = 'CONNECTOR' | 'GATEWAY' | 'INFOSTORE' | 'OTHER';"
  },
  "api/i2connect.spi.userconnectorconfig.html": {
    "href": "api/i2connect.spi.userconnectorconfig.html",
    "title": "spi.UserConnectorConfig type",
    "keywords": "Home > @i2analyze/i2connect > spi > UserConnectorConfig spi.UserConnectorConfig type User-specific information about the services that a connector provides. Signature: export type UserConnectorConfig = ConnectorConfigBase; References: ConnectorConfigBase"
  },
  "api/i2connect.spi.visualquerybooleancondition.html": {
    "href": "api/i2connect.spi.visualquerybooleancondition.html",
    "title": "spi.VisualQueryBooleanCondition type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryBooleanCondition spi.VisualQueryBooleanCondition type A Boolean condition on a query item in a Visual Query structure. Signature: export type VisualQueryBooleanCondition = { values?: Array<boolean>; } & VisualQueryCondition; References: VisualQueryCondition"
  },
  "api/i2connect.spi.visualquerycondition.html": {
    "href": "api/i2connect.spi.visualquerycondition.html",
    "title": "spi.VisualQueryCondition type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryCondition spi.VisualQueryCondition type A condition on a query item in a Visual Query structure. Signature: export type VisualQueryCondition = { aspect?: VisualQueryConditionAspect; id: string; operator: VisualQueryConditionOperator; valueType: VisualQueryConditionValueType; }; References: VisualQueryConditionAspect <!-- --> , VisualQueryConditionOperator <!-- --> , VisualQueryConditionValueType"
  },
  "api/i2connect.spi.visualqueryconditionaspect.html": {
    "href": "api/i2connect.spi.visualqueryconditionaspect.html",
    "title": "spi.VisualQueryConditionAspect type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryConditionAspect spi.VisualQueryConditionAspect type The aspect of the identified property or metadata to use in the Visual Query condition. Signature: export type VisualQueryConditionAspect = | 'DATE_AND_TIME' | 'DATE' | 'TIME' | 'DAY_OF_MONTH' | 'MONTH' | 'QUARTER' | 'YEAR' | 'DAY_OF_WEEK' | 'WEEK_OF_YEAR';"
  },
  "api/i2connect.spi.visualqueryconditionoperator.html": {
    "href": "api/i2connect.spi.visualqueryconditionoperator.html",
    "title": "spi.VisualQueryConditionOperator type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryConditionOperator spi.VisualQueryConditionOperator type The operator to use in the Visual Query condition. Operations on logical types whose data type is string are case-insensitive. In the same context, a sequence of consecutive white space characters is equivalent to a single white space character. Operations on logical types whose data type is Calendar perform their comparisons at the level of milliseconds. Operations on logical types with other data types proceed as follows: For DECIMAL <!-- --> , java.math.BigDecimal#doubleValue() is used for the comparison - For DOUBLE <!-- --> , Double#equals(Object) is used for the comparison - For INTEGER <!-- --> , Integer#equals(Object) is used for the comparison - For BOOLEAN <!-- --> , Boolean#equals(Object) is used for the comparison Signature: export type VisualQueryConditionOperator = | 'STARTS_WITH' | 'ENDS_WITH' | 'EQUAL_TO' | 'NOT_EQUAL_TO' | 'GREATER_THAN' | 'GREATER_THAN_OR_EQUAL_TO' | 'LESS_THAN' | 'LESS_THAN_OR_EQUAL_TO' | 'BETWEEN' | 'CONTAINS' | 'WILDCARD_PATTERN' | 'NOT_WILDCARD_PATTERN' | 'IS_SET' | 'IS_NOT_SET' | 'IN_GEOSPATIAL_AREA';"
  },
  "api/i2connect.spi.visualqueryconditionvaluetype.html": {
    "href": "api/i2connect.spi.visualqueryconditionvaluetype.html",
    "title": "spi.VisualQueryConditionValueType type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryConditionValueType spi.VisualQueryConditionValueType type The type of the values to use in this query condition. Signature: export type VisualQueryConditionValueType = 'STRING' | 'NUMBER' | 'BOOLEAN' | 'DATE_AND_TIME' | 'GEOSPATIAL';"
  },
  "api/i2connect.spi.visualqueryconfig.html": {
    "href": "api/i2connect.spi.visualqueryconfig.html",
    "title": "spi.VisualQueryConfig type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryConfig spi.VisualQueryConfig type The configuration that governs the behavior and content of Visual Queries. Signature: export type VisualQueryConfig = { operatorUsageRules?: Array<VisualQueryOperatorUsageRule>; constraints?: VisualQueryConstraints; paletteItemTypes?: VisualQueryPaletteItemTypes; }; References: VisualQueryOperatorUsageRule <!-- --> , VisualQueryConstraints <!-- --> , VisualQueryPaletteItemTypes"
  },
  "api/i2connect.spi.visualqueryconstraints.html": {
    "href": "api/i2connect.spi.visualqueryconstraints.html",
    "title": "spi.VisualQueryConstraints type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryConstraints spi.VisualQueryConstraints type The constraints that apply to Visual Query structures. Signature: export type VisualQueryConstraints = { outputSelectionSupported?: boolean; maximumCountConditions?: number; maximumQueryLinkCount?: number; maximumAnyEntityTypeSupported?: number; maximumAnyLinkTypeSupported?: number; };"
  },
  "api/i2connect.spi.visualquerycountcondition.html": {
    "href": "api/i2connect.spi.visualquerycountcondition.html",
    "title": "spi.VisualQueryCountCondition type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryCountCondition spi.VisualQueryCountCondition type A count condition on a query item in a Visual Query structure. Signature: export type VisualQueryCountCondition = { operator: VisualQueryCountConditionOperator; values?: Array<number>; queryItemIds?: Array<string>; }; References: VisualQueryCountConditionOperator"
  },
  "api/i2connect.spi.visualquerycountconditionoperator.html": {
    "href": "api/i2connect.spi.visualquerycountconditionoperator.html",
    "title": "spi.VisualQueryCountConditionOperator type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryCountConditionOperator spi.VisualQueryCountConditionOperator type The operator in a Visual Query count condition. Signature: export type VisualQueryCountConditionOperator = 'EQUAL_TO' | 'BETWEEN' | 'GREATER_THAN' | 'GREATER_THAN_OR_EQUAL_TO';"
  },
  "api/i2connect.spi.visualquerydateandtimecondition.html": {
    "href": "api/i2connect.spi.visualquerydateandtimecondition.html",
    "title": "spi.VisualQueryDateAndTimeCondition type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryDateAndTimeCondition spi.VisualQueryDateAndTimeCondition type A date-and-time condition on a query item in a Visual Query structure. Signature: export type VisualQueryDateAndTimeCondition = { values?: Array<DateAndTime>; } & VisualQueryCondition; References: DateAndTime <!-- --> , VisualQueryCondition"
  },
  "api/i2connect.spi.visualqueryentity.html": {
    "href": "api/i2connect.spi.visualqueryentity.html",
    "title": "spi.VisualQueryEntity type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryEntity spi.VisualQueryEntity type A query entity in a Visual Query structure. Signature: export type VisualQueryEntity = { position: VisualQueryEntityPosition; } & VisualQueryItem; References: VisualQueryEntityPosition <!-- --> , VisualQueryItem"
  },
  "api/i2connect.spi.visualqueryentityposition.html": {
    "href": "api/i2connect.spi.visualqueryentityposition.html",
    "title": "spi.VisualQueryEntityPosition type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryEntityPosition spi.VisualQueryEntityPosition type The position of a query entity in a Visual Query structure. Signature: export type VisualQueryEntityPosition = { x: number; y: number; };"
  },
  "api/i2connect.spi.visualquerygeospatialcondition.html": {
    "href": "api/i2connect.spi.visualquerygeospatialcondition.html",
    "title": "spi.VisualQueryGeospatialCondition type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryGeospatialCondition spi.VisualQueryGeospatialCondition type A geospatial condition on a query item in a Visual Query structure. Signature: export type VisualQueryGeospatialCondition = { values?: Array<FeatureCollection>; } & VisualQueryCondition; References: FeatureCollection <!-- --> , VisualQueryCondition"
  },
  "api/i2connect.spi.visualqueryitem.html": {
    "href": "api/i2connect.spi.visualqueryitem.html",
    "title": "spi.VisualQueryItem type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryItem spi.VisualQueryItem type A query item in a Visual Query structure. Signature: export type VisualQueryItem = { conditions?: Array<VisualQueryCondition>; countCondition?: VisualQueryCountCondition; id: string; itemTypeIds?: Array<string>; label: string; outputEnabled: boolean; type: 'QUERY_ENTITY' | 'QUERY_LINK'; }; References: VisualQueryCondition <!-- --> , VisualQueryCountCondition"
  },
  "api/i2connect.spi.visualquerylink.html": {
    "href": "api/i2connect.spi.visualquerylink.html",
    "title": "spi.VisualQueryLink type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryLink spi.VisualQueryLink type A query link in a Visual Query structure. Signature: export type VisualQueryLink = { direction?: LinkDirection; fromId: string; toId: string; } & VisualQueryItem; References: LinkDirection <!-- --> , VisualQueryItem"
  },
  "api/i2connect.spi.visualquerynumericcondition.html": {
    "href": "api/i2connect.spi.visualquerynumericcondition.html",
    "title": "spi.VisualQueryNumericCondition type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryNumericCondition spi.VisualQueryNumericCondition type A numeric condition on a query item in a Visual Query structure. Signature: export type VisualQueryNumericCondition = { values?: ReadonlyArray<number>; } & VisualQueryCondition; References: VisualQueryCondition"
  },
  "api/i2connect.spi.visualqueryoperatorusagerule.html": {
    "href": "api/i2connect.spi.visualqueryoperatorusagerule.html",
    "title": "spi.VisualQueryOperatorUsageRule type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryOperatorUsageRule spi.VisualQueryOperatorUsageRule type A rule that governs the property types and operators that can appear in the conditions of a query item. Signature: export type VisualQueryOperatorUsageRule = { ruleType: 'DENY' | 'ALLOW'; itemTypeId?: string; propertyTypeIds?: Array<string>; operators?: Array<VisualQueryConditionOperator>; aspects?: Array<VisualQueryConditionAspect>; }; References: VisualQueryConditionOperator <!-- --> , VisualQueryConditionAspect"
  },
  "api/i2connect.spi.visualquerypaletteitemtypes.html": {
    "href": "api/i2connect.spi.visualquerypaletteitemtypes.html",
    "title": "spi.VisualQueryPaletteItemTypes type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryPaletteItemTypes spi.VisualQueryPaletteItemTypes type The specification of which item types appear in the Visual Query palette. Signature: export type VisualQueryPaletteItemTypes = { mode: 'ALLOW' | 'DENY'; itemTypeIds: Array<string>; };"
  },
  "api/i2connect.spi.visualquerystringcondition.html": {
    "href": "api/i2connect.spi.visualquerystringcondition.html",
    "title": "spi.VisualQueryStringCondition type",
    "keywords": "Home > @i2analyze/i2connect > spi > VisualQueryStringCondition spi.VisualQueryStringCondition type A string condition on a query item in a Visual Query structure. Signature: export type VisualQueryStringCondition = { values?: Array<string>; } & VisualQueryCondition; References: VisualQueryCondition"
  },
  "api/i2connect.startconnector.html": {
    "href": "api/i2connect.startconnector.html",
    "title": "startConnector() function",
    "keywords": "Home > @i2analyze/i2connect > startConnector startConnector() function Starts the connector. You must add all the services you need before you call this function. Signature: export declare function startConnector(config?: connectors.IConnectorConfig): void; Introduced: API version 2.0 Parameters Parameter Type Description config connectors.IConnectorConfig (Optional) The connector configuration, which determines some aspects of its behavior. Returns: void"
  },
  "api/i2connect.utility.acquirecallbackparameters.html": {
    "href": "api/i2connect.utility.acquirecallbackparameters.html",
    "title": "utility.AcquireCallbackParameters type",
    "keywords": "Home > @i2analyze/i2connect > utility > AcquireCallbackParameters utility.AcquireCallbackParameters type The parameters object that is passed to the acquire callback. Signature: type AcquireCallbackParameters<TServiceConfig extends services.IServiceConfigType = services.IServiceConfigType> = FormCallbackParameters<TServiceConfig> & SeedCallbackParameters<TServiceConfig> & LongRunningCallbackParameters<TServiceConfig> & AuthenticatorCallbackParameters<TServiceConfig> & { readonly requestInformation: services.IRequestInformation; readonly result: services.IResult; }; References: services.IServiceConfigType <!-- --> , FormCallbackParameters <!-- --> , SeedCallbackParameters <!-- --> , LongRunningCallbackParameters <!-- --> , AuthenticatorCallbackParameters <!-- --> , services.IRequestInformation <!-- --> , services.IResult Introduced: API version 2.0 Type Parameters Parameter Type Description TServiceConfig extends services.IServiceConfigType (default: services.IServiceConfigType ) The type of service configuration."
  },
  "api/i2connect.utility.authenticatecallbackparameters.html": {
    "href": "api/i2connect.utility.authenticatecallbackparameters.html",
    "title": "utility.AuthenticateCallbackParameters type",
    "keywords": "Home > @i2analyze/i2connect > utility > AuthenticateCallbackParameters utility.AuthenticateCallbackParameters type A utility type to determine the parameters for the authenticate callback. Signature: type AuthenticateCallbackParameters<TForm extends services.AuthForm = services.AuthForm> = { readonly conditions: { [K in keyof TForm]: string; }; readonly requestInformation: services.IRequestInformation; }; References: services.AuthForm <!-- --> , services.IRequestInformation Introduced: API version 2.0 Type Parameters Parameter Type Description TForm extends services.AuthForm (default: services.AuthForm ) The type of form."
  },
  "api/i2connect.utility.authenticatorcallbackparameters.html": {
    "href": "api/i2connect.utility.authenticatorcallbackparameters.html",
    "title": "utility.AuthenticatorCallbackParameters type",
    "keywords": "Home > @i2analyze/i2connect > utility > AuthenticatorCallbackParameters utility.AuthenticatorCallbackParameters type A utility type to determine the callback parameters if a service uses authentication. Signature: type AuthenticatorCallbackParameters<T extends services.IAuthenticatorServiceConfig> = T extends { authenticator: services.IAuthenticator; } ? { authToken: string; } : T extends { authenticator: services.IAuthenticator | undefined; } ? { authToken: string | undefined; } : unknown; References: services.IAuthenticatorServiceConfig <!-- --> , services.IAuthenticator Introduced: API version 2.0 Type Parameters Parameter Type Description T extends services.IAuthenticatorServiceConfig The type of service configuration."
  },
  "api/i2connect.utility.formcallbackparameters.html": {
    "href": "api/i2connect.utility.formcallbackparameters.html",
    "title": "utility.FormCallbackParameters type",
    "keywords": "Home > @i2analyze/i2connect > utility > FormCallbackParameters utility.FormCallbackParameters type A utility type to determine the callback parameters if a service has a form. Signature: type FormCallbackParameters<T extends services.IFormServiceConfig> = T['form'] extends services.BasicForm ? { conditions: FormConditions<T['form']>; } : T['form'] extends services.SectionedForm ? { sections: SectionedFormConditions<T['form']>; } : unknown; References: services.IFormServiceConfig <!-- --> , services.BasicForm <!-- --> , FormConditions <!-- --> , services.SectionedForm <!-- --> , SectionedFormConditions Introduced: API version 2.0 Type Parameters Parameter Type Description T extends services.IFormServiceConfig The type of service configuration."
  },
  "api/i2connect.utility.formconditionlogicaltypevaluemap.html": {
    "href": "api/i2connect.utility.formconditionlogicaltypevaluemap.html",
    "title": "utility.FormConditionLogicalTypeValueMap type",
    "keywords": "Home > @i2analyze/i2connect > utility > FormConditionLogicalTypeValueMap utility.FormConditionLogicalTypeValueMap type A map of logical type to value types, when providing a default value for a form condition. Signature: type FormConditionLogicalTypeValueMap = { singleLineString: string; multipleLineString: string; suggestedFromList: string; selectedFromList: string; date: data.ILocalDate; time: data.ILocalTime; decimal: data.IDecimal; integer: number; double: number; boolean: boolean; dateAndTime: data.IZonedDateTime; geospatial: data.IGeoPoint; geospatialArea: data.IGeoJsonFeatureCollection; }; References: data.ILocalDate <!-- --> , data.ILocalTime <!-- --> , data.IDecimal <!-- --> , data.IZonedDateTime <!-- --> , data.IGeoPoint <!-- --> , data.IGeoJsonFeatureCollection Introduced: API version 2.0"
  },
  "api/i2connect.utility.formconditions.html": {
    "href": "api/i2connect.utility.formconditions.html",
    "title": "utility.FormConditions type",
    "keywords": "Home > @i2analyze/i2connect > utility > FormConditions utility.FormConditions type A utility type that determines the callback condition key-value pairs for a given form. Signature: type FormConditions<TForm extends services.BasicForm> = { [K in keyof TForm]: TForm[K]['isMandatory'] extends true ? TForm[K]['hide'] extends services.HidePredicate ? FormConditionLogicalTypeValueMap[TForm[K]['logicalType']] | undefined : FormConditionLogicalTypeValueMap[TForm[K]['logicalType']] : FormConditionLogicalTypeValueMap[TForm[K]['logicalType']] | undefined; }; References: services.BasicForm <!-- --> , services.HidePredicate <!-- --> , FormConditionLogicalTypeValueMap Introduced: API version 2.0 Type Parameters Parameter Type Description TForm extends services.BasicForm The type of the form."
  },
  "api/i2connect.utility.html": {
    "href": "api/i2connect.utility.html",
    "title": "utility namespace",
    "keywords": "Home > @i2analyze/i2connect > utility utility namespace The members of the utility namespace improve the TypeScript type information that's based on service configuration. You will rarely need to use the members of this namespace directly in your connector code. Signature: export declare namespace utility Introduced: API version 2.0 Type Aliases Type Alias Description AcquireCallbackParameters The parameters object that is passed to the acquire callback. AuthenticateCallbackParameters A utility type to determine the parameters for the authenticate callback. AuthenticatorCallbackParameters A utility type to determine the callback parameters if a service uses authentication. FormCallbackParameters A utility type to determine the callback parameters if a service has a form. FormConditionLogicalTypeValueMap A map of logical type to value types, when providing a default value for a form condition. FormConditions A utility type that determines the callback condition key-value pairs for a given form. IWritableGeospatialPoint A writable geospatial point value. LogicalTypeValueTypeMap A map of logical type to value types for a particular property type. LongRunningCallbackParameters A utility type to determine the callback parameters if a service is long-running. PropertyTypeDisplayNames A utility type that represents the display names of the property types of a particular item type. PropertyTypeFromDisplayName A utility type that represents a property type with a particular display name from a particular item type. PropertyValuesFromPossibleValues A utility type that represents the values of a property type that has possible values. PropertyValueType The permitted type (for example, string , number , or boolean ) for the value of a property that has the specified property type. SectionedFormConditions A utility type that determines the callback condition key-value pairs for a given form that has sections. SeedCallbackParameters A utility type to determine the callback parameters if a service supports seeds. SemanticPropertyTypeSeeds A utility type that determines the callback key-value pairs for semantic seeds. ServiceAcquireCallback The acquire callback. ServiceValidateCallback The validate callback. SetPropertyValueType The permitted type (for example, string , number , or boolean ) for the value of a property that has the specified property type, when writing. SetRecordProperties A set of name-value pairs that contain the type names and values for the properties of a record that has a specific type. ValidateCallbackParameters The parameters object that is passed to the validate callback. VisualQueryAcquireCallbackParameters The parameters object that is passed to the visual query acquire callback. VisualQueryServiceAcquireCallback The visual query acquire callback. VisualQueryServiceValidateCallback The visual query validate callback. VisualQueryValidateCallbackParameters The parameters object that is passed to the visual query validate callback. WritableDate A writable date value. WritableDateTime A writable date and time value. WritableDecimal A writable decimal value. WritableLogicalTypeValueTypeMap A map of logical type to value types for a particular property type, when writing property values. WritableTime A writable time value."
  },
  "api/i2connect.utility.iwritablegeospatialpoint.html": {
    "href": "api/i2connect.utility.iwritablegeospatialpoint.html",
    "title": "utility.IWritableGeospatialPoint type",
    "keywords": "Home > @i2analyze/i2connect > utility > IWritableGeospatialPoint utility.IWritableGeospatialPoint type A writable geospatial point value. Signature: type IWritableGeospatialPoint = data.IGeoPoint | data.IGeoJsonPoint; References: data.IGeoPoint <!-- --> , data.IGeoJsonPoint Introduced: API version 2.0 Remarks Geospatial values can be specified in data.IGeoPoint format, or as a data.IGeoJsonPoint <!-- --> ."
  },
  "api/i2connect.utility.logicaltypevaluetypemap.html": {
    "href": "api/i2connect.utility.logicaltypevaluetypemap.html",
    "title": "utility.LogicalTypeValueTypeMap type",
    "keywords": "Home > @i2analyze/i2connect > utility > LogicalTypeValueTypeMap utility.LogicalTypeValueTypeMap type A map of logical type to value types for a particular property type. Signature: type LogicalTypeValueTypeMap<TPropertyType extends schema.IPropertyType> = { singleLineString: string; multipleLineString: string; suggestedFromList: PropertyValuesFromPossibleValues<TPropertyType> | string; selectedFromList: PropertyValuesFromPossibleValues<TPropertyType>; date: data.ILocalDate; time: data.ILocalTime; decimal: data.IDecimal; integer: number; double: number; boolean: boolean; dateAndTime: data.IZonedDateTime; geospatial: data.IGeoPoint; }; References: schema.IPropertyType <!-- --> , PropertyValuesFromPossibleValues <!-- --> , data.ILocalDate <!-- --> , data.ILocalTime <!-- --> , data.IDecimal <!-- --> , data.IZonedDateTime <!-- --> , data.IGeoPoint Introduced: API version 2.0 Type Parameters Parameter Type Description TPropertyType extends schema.IPropertyType The property type to evaluate."
  },
  "api/i2connect.utility.longrunningcallbackparameters.html": {
    "href": "api/i2connect.utility.longrunningcallbackparameters.html",
    "title": "utility.LongRunningCallbackParameters type",
    "keywords": "Home > @i2analyze/i2connect > utility > LongRunningCallbackParameters utility.LongRunningCallbackParameters type A utility type to determine the callback parameters if a service is long-running. Signature: type LongRunningCallbackParameters<T extends services.ILongRunningServiceConfig> = T extends { longRunning: true | { pollingIntervalInSeconds?: number; }; } ? { longRunningState: services.ILongRunningState; } : unknown; References: services.ILongRunningServiceConfig <!-- --> , services.ILongRunningState Introduced: API version 2.0 Type Parameters Parameter Type Description T extends services.ILongRunningServiceConfig The type of service configuration."
  },
  "api/i2connect.utility.propertytypedisplaynames.html": {
    "href": "api/i2connect.utility.propertytypedisplaynames.html",
    "title": "utility.PropertyTypeDisplayNames type",
    "keywords": "Home > @i2analyze/i2connect > utility > PropertyTypeDisplayNames utility.PropertyTypeDisplayNames type A utility type that represents the display names of the property types of a particular item type. Signature: type PropertyTypeDisplayNames<TItemType extends schema.IItemType> = TItemType extends schema.IItemType<infer PropertyTypes> ? keyof PropertyTypes : never; References: schema.IItemType Introduced: API version 2.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The item type to extract property type display names from."
  },
  "api/i2connect.utility.propertytypefromdisplayname.html": {
    "href": "api/i2connect.utility.propertytypefromdisplayname.html",
    "title": "utility.PropertyTypeFromDisplayName type",
    "keywords": "Home > @i2analyze/i2connect > utility > PropertyTypeFromDisplayName utility.PropertyTypeFromDisplayName type A utility type that represents a property type with a particular display name from a particular item type. Signature: type PropertyTypeFromDisplayName<TItemType extends schema.IItemType, TDisplayName extends PropertyTypeDisplayNames<TItemType>> = TItemType extends schema.IItemType<infer PropertyTypes> ? PropertyTypes[TDisplayName] : never; References: schema.IItemType <!-- --> , PropertyTypeDisplayNames Introduced: API version 2.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The item type that has the property type. TDisplayName extends PropertyTypeDisplayNames <TItemType>"
  },
  "api/i2connect.utility.propertyvaluesfrompossiblevalues.html": {
    "href": "api/i2connect.utility.propertyvaluesfrompossiblevalues.html",
    "title": "utility.PropertyValuesFromPossibleValues type",
    "keywords": "Home > @i2analyze/i2connect > utility > PropertyValuesFromPossibleValues utility.PropertyValuesFromPossibleValues type A utility type that represents the values of a property type that has possible values. Signature: type PropertyValuesFromPossibleValues<TPropertyType extends schema.IPropertyType> = TPropertyType['possibleValues'] extends ReadonlyArray<{ value: infer U; displayValue: string; }> ? U extends string ? U : never : never; References: schema.IPropertyType Introduced: API version 2.0 Type Parameters Parameter Type Description TPropertyType extends schema.IPropertyType The property type to retrieve values from."
  },
  "api/i2connect.utility.propertyvaluetype.html": {
    "href": "api/i2connect.utility.propertyvaluetype.html",
    "title": "utility.PropertyValueType type",
    "keywords": "Home > @i2analyze/i2connect > utility > PropertyValueType utility.PropertyValueType type The permitted type (for example, string <!-- --> , number <!-- --> , or boolean <!-- --> ) for the value of a property that has the specified property type. Signature: type PropertyValueType<TPropertyType extends schema.IPropertyType> = LogicalTypeValueTypeMap<TPropertyType>[TPropertyType['logicalType']]; References: schema.IPropertyType <!-- --> , LogicalTypeValueTypeMap Introduced: API version 2.0 Type Parameters Parameter Type Description TPropertyType extends schema.IPropertyType The property type to evaluate."
  },
  "api/i2connect.utility.sectionedformconditions.html": {
    "href": "api/i2connect.utility.sectionedformconditions.html",
    "title": "utility.SectionedFormConditions type",
    "keywords": "Home > @i2analyze/i2connect > utility > SectionedFormConditions utility.SectionedFormConditions type A utility type that determines the callback condition key-value pairs for a given form that has sections. Signature: type SectionedFormConditions<TForm extends services.SectionedForm> = { [K in keyof TForm]: TForm[K]['hide'] extends services.HidePredicate ? FormConditions<TForm[K]['conditions']> | undefined : FormConditions<TForm[K]['conditions']>; }; References: services.SectionedForm <!-- --> , services.HidePredicate <!-- --> , FormConditions Introduced: API version 2.0 Type Parameters Parameter Type Description TForm extends services.SectionedForm The type of the form."
  },
  "api/i2connect.utility.seedcallbackparameters.html": {
    "href": "api/i2connect.utility.seedcallbackparameters.html",
    "title": "utility.SeedCallbackParameters type",
    "keywords": "Home > @i2analyze/i2connect > utility > SeedCallbackParameters utility.SeedCallbackParameters type A utility type to determine the callback parameters if a service supports seeds. Signature: type SeedCallbackParameters<T extends services.ISeedServiceConfig | services.ISemanticSeededServiceConfig> = T['seedConstraints'] extends services.ISeedConstraints<schema.IEntityType> | services.ISeedConstraints<schema.ILinkType> ? { seeds: services.ISeeds; } : T['semanticSeedConstraints'] extends services.ISemanticSeedConstraints ? { semanticSeeds: SemanticPropertyTypeSeeds<T['semanticSeedConstraints']['semanticPropertyTypeIds']>; } : unknown; References: services.ISeedServiceConfig <!-- --> , services.ISemanticSeededServiceConfig <!-- --> , services.ISeedConstraints <!-- --> , schema.IEntityType <!-- --> , schema.ILinkType <!-- --> , services.ISeeds <!-- --> , services.ISemanticSeedConstraints <!-- --> , SemanticPropertyTypeSeeds Introduced: API version 2.2 Type Parameters Parameter Type Description T extends services.ISeedServiceConfig | services.ISemanticSeededServiceConfig The type of service configuration."
  },
  "api/i2connect.utility.semanticpropertytypeseeds.html": {
    "href": "api/i2connect.utility.semanticpropertytypeseeds.html",
    "title": "utility.SemanticPropertyTypeSeeds type",
    "keywords": "Home > @i2analyze/i2connect > utility > SemanticPropertyTypeSeeds utility.SemanticPropertyTypeSeeds type A utility type that determines the callback key-value pairs for semantic seeds. Signature: type SemanticPropertyTypeSeeds<T extends services.SemanticPropertyTypeIds = services.SemanticPropertyTypeIds> = { [K in keyof T]: services.ISemanticSeed[]; }; References: services.SemanticPropertyTypeIds <!-- --> , services.ISemanticSeed Introduced: API version 2.2 Type Parameters Parameter Type Description T extends services.SemanticPropertyTypeIds (default: services.SemanticPropertyTypeIds ) The type of the semantic property type seed constraints."
  },
  "api/i2connect.utility.serviceacquirecallback.html": {
    "href": "api/i2connect.utility.serviceacquirecallback.html",
    "title": "utility.ServiceAcquireCallback type",
    "keywords": "Home > @i2analyze/i2connect > utility > ServiceAcquireCallback utility.ServiceAcquireCallback type The acquire callback. Signature: type ServiceAcquireCallback<TServiceConfig extends services.IServiceConfigType> = (params: AcquireCallbackParameters<TServiceConfig>) => Promise<void> | void; References: services.IServiceConfigType <!-- --> , AcquireCallbackParameters Introduced: API version 2.0 Type Parameters Parameter Type Description TServiceConfig extends services.IServiceConfigType The type of service configuration."
  },
  "api/i2connect.utility.servicevalidatecallback.html": {
    "href": "api/i2connect.utility.servicevalidatecallback.html",
    "title": "utility.ServiceValidateCallback type",
    "keywords": "Home > @i2analyze/i2connect > utility > ServiceValidateCallback utility.ServiceValidateCallback type The validate callback. Signature: type ServiceValidateCallback<TServiceConfig extends services.IServiceConfigType> = (params: ValidateCallbackParameters<TServiceConfig>) => Promise<void> | void; References: services.IServiceConfigType <!-- --> , ValidateCallbackParameters Introduced: API version 2.0 Type Parameters Parameter Type Description TServiceConfig extends services.IServiceConfigType The type of service configuration."
  },
  "api/i2connect.utility.setpropertyvaluetype.html": {
    "href": "api/i2connect.utility.setpropertyvaluetype.html",
    "title": "utility.SetPropertyValueType type",
    "keywords": "Home > @i2analyze/i2connect > utility > SetPropertyValueType utility.SetPropertyValueType type The permitted type (for example, string <!-- --> , number <!-- --> , or boolean <!-- --> ) for the value of a property that has the specified property type, when writing. Signature: type SetPropertyValueType<TPropertyType extends schema.IPropertyType = schema.IPropertyType> = WritableLogicalTypeValueTypeMap<TPropertyType>[TPropertyType['logicalType']]; References: schema.IPropertyType <!-- --> , WritableLogicalTypeValueTypeMap Introduced: API version 2.0 Type Parameters Parameter Type Description TPropertyType extends schema.IPropertyType (default: schema.IPropertyType ) The property type to evaluate."
  },
  "api/i2connect.utility.setrecordproperties.html": {
    "href": "api/i2connect.utility.setrecordproperties.html",
    "title": "utility.SetRecordProperties type",
    "keywords": "Home > @i2analyze/i2connect > utility > SetRecordProperties utility.SetRecordProperties type A set of name-value pairs that contain the type names and values for the properties of a record that has a specific type. Signature: type SetRecordProperties<TItemType extends schema.IItemType> = { [key in PropertyTypeDisplayNames<TItemType>]?: SetPropertyValueType<PropertyTypeFromDisplayName<TItemType, key>> | undefined; }; References: schema.IItemType <!-- --> , PropertyTypeDisplayNames <!-- --> , SetPropertyValueType <!-- --> , PropertyTypeFromDisplayName Introduced: API version 2.0 Type Parameters Parameter Type Description TItemType extends schema.IItemType The type of the record that has these properties."
  },
  "api/i2connect.utility.validatecallbackparameters.html": {
    "href": "api/i2connect.utility.validatecallbackparameters.html",
    "title": "utility.ValidateCallbackParameters type",
    "keywords": "Home > @i2analyze/i2connect > utility > ValidateCallbackParameters utility.ValidateCallbackParameters type The parameters object that is passed to the validate callback. Signature: type ValidateCallbackParameters<TServiceConfig extends services.IServiceConfigType = services.IServiceConfigType> = FormCallbackParameters<TServiceConfig> & SeedCallbackParameters<TServiceConfig> & AuthenticatorCallbackParameters<TServiceConfig> & { readonly requestInformation: services.IRequestInformation; }; References: services.IServiceConfigType <!-- --> , FormCallbackParameters <!-- --> , SeedCallbackParameters <!-- --> , AuthenticatorCallbackParameters <!-- --> , services.IRequestInformation Introduced: API version 2.0 Type Parameters Parameter Type Description TServiceConfig extends services.IServiceConfigType (default: services.IServiceConfigType ) The type of the service config."
  },
  "api/i2connect.utility.visualqueryacquirecallbackparameters.html": {
    "href": "api/i2connect.utility.visualqueryacquirecallbackparameters.html",
    "title": "utility.VisualQueryAcquireCallbackParameters type",
    "keywords": "Home > @i2analyze/i2connect > utility > VisualQueryAcquireCallbackParameters utility.VisualQueryAcquireCallbackParameters type The parameters object that is passed to the visual query acquire callback. Signature: type VisualQueryAcquireCallbackParameters<TServiceConfig extends services.IVisualQueryServiceConfig = services.IVisualQueryServiceConfig> = LongRunningCallbackParameters<TServiceConfig> & AuthenticatorCallbackParameters<TServiceConfig> & { readonly visualQuery: Array<spi.VisualQueryItem>; readonly requestInformation: services.IRequestInformation; readonly result: services.IResult; }; References: services.IVisualQueryServiceConfig <!-- --> , LongRunningCallbackParameters <!-- --> , AuthenticatorCallbackParameters <!-- --> , spi.VisualQueryItem <!-- --> , services.IRequestInformation <!-- --> , services.IResult Introduced: API version 2.3 Type Parameters Parameter Type Description TServiceConfig extends services.IVisualQueryServiceConfig (default: services.IVisualQueryServiceConfig ) The type of service configuration."
  },
  "api/i2connect.utility.visualqueryserviceacquirecallback.html": {
    "href": "api/i2connect.utility.visualqueryserviceacquirecallback.html",
    "title": "utility.VisualQueryServiceAcquireCallback type",
    "keywords": "Home > @i2analyze/i2connect > utility > VisualQueryServiceAcquireCallback utility.VisualQueryServiceAcquireCallback type The visual query acquire callback. Signature: type VisualQueryServiceAcquireCallback<TServiceConfig extends services.IVisualQueryServiceConfig> = (params: VisualQueryAcquireCallbackParameters<TServiceConfig>) => Promise<void> | void; References: services.IVisualQueryServiceConfig <!-- --> , VisualQueryAcquireCallbackParameters Introduced: API version 2.3 Type Parameters Parameter Type Description TServiceConfig extends services.IVisualQueryServiceConfig The type of service configuration."
  },
  "api/i2connect.utility.visualqueryservicevalidatecallback.html": {
    "href": "api/i2connect.utility.visualqueryservicevalidatecallback.html",
    "title": "utility.VisualQueryServiceValidateCallback type",
    "keywords": "Home > @i2analyze/i2connect > utility > VisualQueryServiceValidateCallback utility.VisualQueryServiceValidateCallback type The visual query validate callback. Signature: type VisualQueryServiceValidateCallback<TServiceConfig extends services.IVisualQueryServiceConfig> = (params: VisualQueryValidateCallbackParameters<TServiceConfig>) => Promise<void> | void; References: services.IVisualQueryServiceConfig <!-- --> , VisualQueryValidateCallbackParameters Introduced: API version 2.3 Type Parameters Parameter Type Description TServiceConfig extends services.IVisualQueryServiceConfig The type of service configuration."
  },
  "api/i2connect.utility.visualqueryvalidatecallbackparameters.html": {
    "href": "api/i2connect.utility.visualqueryvalidatecallbackparameters.html",
    "title": "utility.VisualQueryValidateCallbackParameters type",
    "keywords": "Home > @i2analyze/i2connect > utility > VisualQueryValidateCallbackParameters utility.VisualQueryValidateCallbackParameters type The parameters object that is passed to the visual query validate callback. Signature: type VisualQueryValidateCallbackParameters<TServiceConfig extends services.IVisualQueryServiceConfig = services.IVisualQueryServiceConfig> = AuthenticatorCallbackParameters<TServiceConfig> & { readonly visualQuery: Array<spi.VisualQueryItem>; readonly requestInformation: services.IRequestInformation; }; References: services.IVisualQueryServiceConfig <!-- --> , AuthenticatorCallbackParameters <!-- --> , spi.VisualQueryItem <!-- --> , services.IRequestInformation Introduced: API version 2.3 Type Parameters Parameter Type Description TServiceConfig extends services.IVisualQueryServiceConfig (default: services.IVisualQueryServiceConfig ) The type of the service config."
  },
  "api/i2connect.utility.writabledate.html": {
    "href": "api/i2connect.utility.writabledate.html",
    "title": "utility.WritableDate type",
    "keywords": "Home > @i2analyze/i2connect > utility > WritableDate utility.WritableDate type A writable date value. Signature: type WritableDate = data.ILocalDate | data.ISO8601Date; References: data.ILocalDate <!-- --> , data.ISO8601Date Introduced: API version 2.0 Remarks Date values can be specified in data.ISO8601Date format, or as a data.ILocalDate <!-- --> ."
  },
  "api/i2connect.utility.writabledatetime.html": {
    "href": "api/i2connect.utility.writabledatetime.html",
    "title": "utility.WritableDateTime type",
    "keywords": "Home > @i2analyze/i2connect > utility > WritableDateTime utility.WritableDateTime type A writable date and time value. Signature: type WritableDateTime = data.IZonedDateTime | data.ILocalDateTime | data.ISO8601LocalDateTime | { localDateAndTime: data.ISO8601LocalDateTime; timeZoneId: data.TimeZoneId; isDST: boolean; }; References: data.IZonedDateTime <!-- --> , data.ILocalDateTime <!-- --> , data.ISO8601LocalDateTime <!-- --> , data.TimeZoneId Introduced: API version 2.0 Remarks Date and time values can be specified in data.ISO8601LocalDateTime format, as a data.ILocalDateTime (in which case the default time zone is assumed) or as a data.IZonedDateTime <!-- --> ."
  },
  "api/i2connect.utility.writabledecimal.html": {
    "href": "api/i2connect.utility.writabledecimal.html",
    "title": "utility.WritableDecimal type",
    "keywords": "Home > @i2analyze/i2connect > utility > WritableDecimal utility.WritableDecimal type A writable decimal value. Signature: type WritableDecimal = data.IDecimal | data.DecimalString; References: data.IDecimal <!-- --> , data.DecimalString Introduced: API version 2.0 Remarks Decimal values can be specified in data.DecimalString format, or as a data.IDecimal <!-- --> ."
  },
  "api/i2connect.utility.writablelogicaltypevaluetypemap.html": {
    "href": "api/i2connect.utility.writablelogicaltypevaluetypemap.html",
    "title": "utility.WritableLogicalTypeValueTypeMap type",
    "keywords": "Home > @i2analyze/i2connect > utility > WritableLogicalTypeValueTypeMap utility.WritableLogicalTypeValueTypeMap type A map of logical type to value types for a particular property type, when writing property values. Signature: type WritableLogicalTypeValueTypeMap<TPropertyType extends schema.IPropertyType> = Omit<LogicalTypeValueTypeMap<TPropertyType>, 'date' | 'time' | 'dateAndTime' | 'decimal' | 'geospatial'> & { date: WritableDate; time: WritableTime; decimal: WritableDecimal; dateAndTime: WritableDateTime; geospatial: IWritableGeospatialPoint; }; References: schema.IPropertyType <!-- --> , LogicalTypeValueTypeMap <!-- --> , WritableDate <!-- --> , WritableTime <!-- --> , WritableDecimal <!-- --> , WritableDateTime <!-- --> , IWritableGeospatialPoint Introduced: API version 2.0 Type Parameters Parameter Type Description TPropertyType extends schema.IPropertyType The property type to evaluate."
  },
  "api/i2connect.utility.writabletime.html": {
    "href": "api/i2connect.utility.writabletime.html",
    "title": "utility.WritableTime type",
    "keywords": "Home > @i2analyze/i2connect > utility > WritableTime utility.WritableTime type A writable time value. Signature: type WritableTime = data.ILocalTime | data.ISO8601Time; References: data.ILocalTime <!-- --> , data.ISO8601Time Introduced: API version 2.0 Remarks Time values can be specified in data.ISO8601Time format, or as a data.ILocalTime <!-- --> ."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference",
    "keywords": "Home API Reference Packages Package Description @i2analyze/i2connect The i2 Connect package, which contains all the functionality you need to create connectors for i2 Analyze."
  },
  "guide/deploying-connectors.html": {
    "href": "guide/deploying-connectors.html",
    "title": "Building and running the connector server",
    "keywords": "Building and running the connector server To deploy a connector to a production instance of i2 Analyze that includes the i2 Connect gateway, the SDK includes commands for: Building the service code without starting the server Starting the connector server and its services as they were last built To build the services and do nothing else: npm run build To run a server whose services have already been built: npm run serve When you deploy to a production instance of i2 Analyze, you must ensure that the target system's command access control settings are configured so that its users can see your connector. The procedure for doing so is the same as it is during development and testing. Configuring the connector server You can configure the connector server in a particular connector project through the settings file at config/server.json , or by using environment variables. In new projects, the generated settings file contains the minimum amount of configuration to get your connector server running. You should review the settings to ensure that they are appropriate for your deployment: { \"serverPort\": 3000, \"connectorId\": \"<populated at creation>\", \"ssl\": { \"enabled\": false, \"serverPort\": 3443, \"privateKeyFile\": \"\", \"certificateFile\": \"\", \"gatewayCN\": \"\", \"caCertificateFile\": \"\" }, \"log\": { \"level\": \"info\", \"fileLogging\": { \"enabled\": false, \"dir\": \"\" } } } The table below describes the settings and provides the names of the environment variables that you can use to override them. JSON setting Environment variable Type Description serverPort SERVER_PORT number The port number for connections to the connector server. connectorId CONNECTOR_ID string The identifier of the connector. ssl.enabled SSL_ENABLED boolean Whether SSL is enabled. ssl.serverPort SSL_SERVER_PORT number The port number for SSL connections to the connector server. ssl.privateKeyFile SSL_PRIVATE_KEY or SSL_PRIVATE_KEY_FILE string The path to the .pem file for the key. An optional passphrase associated with this private key can be supplied in the environment variable SSL_PASSPHRASE . ssl.certificateFile SSL_CERTIFICATE or SSL_CERTIFICATE_FILE string The path to the .pem file for the certificate. ssl.gatewayCN SSL_GATEWAY_CN string or string[] The gateway common name or names. ssl.caCertificateFile SSL_CA_CERTIFICATE or SSL_CA_CERTIFICATE_FILE string The path to the trusted CA certificate. log.level LOG_LEVEL string The minimum message level to log. Messages at lower levels are ignored. The value can be one of the following: error warn info debug log.fileLogging.enabled LOG_FILE_LOGGING_ENABLED boolean Whether file logging is enabled. log.fileLogging.dir LOG_FILE_LOGGING_DIR string The directory to log to."
  },
  "guide/distribute-connector.html": {
    "href": "guide/distribute-connector.html",
    "title": "Packaging a connector",
    "keywords": "Packaging a connector To package your connector for use with a containerized instance of i2 Analyze, complete the following steps: Build the project for deployment in the usual way : npm run build Then, create a package that contains the connector: npm pack This command creates a .tgz file that you can use to distribute your connector. The name of the file is determined by the name and version declared in the package.json file. Distributing a connector After you package your connector, you must make it available to be deployed with i2 Analyze. The person that deploys i2 Analyze and any connectors might not be the same person that develops the connector, so you must implement a process for providing the person who deploys i2 Analyze with your .tgz file. To maintain a release history of the connector, you might use a source control system such as Github to manage your connector source and also to release the package. The person who deploys the connector also needs to know of any configuration requirements, which we recommend documenting the README of the connector, along with populating a .env.sample file for any environment specific configuration. For more information about creating GitHub releases and adding binary files to a release, see Creating a release ."
  },
  "guide/getting-started.html": {
    "href": "guide/getting-started.html",
    "title": "Getting started",
    "keywords": "Getting started Every connector that you develop with the i2 Connect Node SDK consists of a connector server and one or more services : The connector server, which i2 provides, handles communication with the i2 Connect gateway and implements the API that your services use. The services, which you write, display an interface to users and are responsible for interacting with the external data source. The connector server depends on version 14 (or above) of the Node.js run-time environment. You can download and install Node.js from the project website . Creating a connector project To create a connector project, use either of the following commands: npm npm init @i2analyze/connector my-connector yarn yarn create @i2analyze/connector my-connector where my-connector is the identifier of the connector and the name of the directory to create. You can provide a different value, but the rest of this page assumes that you used my-connector . Both commands create a directory inside the directory that the command was run from. They generate the initial project structure, and install the transitive dependencies. The initial structure includes a connector server with a single service and a sample connector schema. Targeting an older version of i2 Analyze The npm and yarn commands both install the latest version of the connector server, which is compatible with the latest version of i2 Analyze. To target an earlier version of i2 Analyze, you can replace the connector server with the version that you need, according to the compatibility table . For example: npm install @i2analyze/i2connect@2.2.1 This command installs the package containing version 2.2.1 of the i2 Connect Node SDK, which is compatible with version 4.4.1 of i2 Analyze. Running the server during development After creation, the connector server and its service are ready to run with no modifications. To run the server in development mode: cd my-connector npm start In this mode, the server monitors the project source files for changes, and rebuilds the service when necessary. Configuring i2 Analyze to use the connector To develop connectors for the i2 Connect gateway successfully, you need an i2 Analyze server instance that you can use for testing and debugging. If you don't have an i2 Analyze server instance, you can create a local one that runs in a Docker container, as described here . Be sure to use the i2c deployment pattern when you create the configuration. With i2 Analyze running, you need to add the connector that you just started to your development environment: If you created the server instance in a Docker container, add the connector as described here . Use the External template to create the connector image. Note: When you configure your connector in connector-definition.json , be sure to set the connector id to be my-connector (or the value you used), and the baseUrl to http://host.docker.internal:3000 . For example: { \"id\": \"my-connector\", \"name\": \"My Connector\", \"description\": \"My Connector Description\", \"configurationPath\": \"/config\", \"gatewaySchema\": \"\", \"baseUrl\": \"http://host.docker.internal:3000\", \"type\": \"external\" } If your i2 Analyze server is not running in a container, you can use the i2 Analyze toolkit to add the connector, as described here . Reloading connector configuration from i2 Analyze In order for i2 Analyze to pick up configuration changes to the connector, you can use the Admin Console to reload the i2 Connect gateway: Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors . If you are prompted to log in, enter Jenny and Jenny as the username and password. Click the Reload gateway button. Testing the service in Analyst's Notebook When the connector server is running, you can connect to it and use its service from Analyst's Notebook. Start Analyst's Notebook. Click Log In . Enter the URL of the connector server that you set up earlier. Enter the user name and password, which are \"Jenny\" and \"Jenny\". Click External Searches . Locate the service named \"A service that returns some data\", and click Open to open and run the service. The service runs and presents its results. To add them to the chart, select them all and click Copy to Chart . That's all you need to create, build, deploy, and test a simple service with the i2 Connect Node SDK. Every project that you create with the SDK starts this way. The rest is all about building on these foundations. Debugging the connector It is possible to debug the connector live using Microsoft Visual Studio Code (\"VS Code\"). To do this, follow these steps: Stop the npm start process if it's still running. Open a new instance of VS Code. Click File | Open folder . Select the connector root folder. Click Run and Debug . Select Attach to i2 Connect development server from the drop-down. Click Start Debugging (F5) . Add breakpoints into the service source code where you want execution to pause. Run the service from within Analyst's Notebook."
  },
  "guide/logging.html": {
    "href": "guide/logging.html",
    "title": "Logging from service code",
    "keywords": "Logging from service code To add logging to your service, you can use an ILogger object that you create by calling the createLogger() function. If you do not pass any parameters to createLogger() , it returns the default logger for the i2 Connect SDK. Any log data that you add is written to the default i2ConnectorServer.log file and therefore interleaved with the logging information that the i2 Connect SDK generates. import { createLogger } from '@i2analyze/i2connect'; const logger = createLogger(); // This writes to the \"i2ConnectorServer.log\" file in the log directory logger.info('The service is running smoothly'); To write your service's logs to their own file, you can pass a string-based identifier to the createLogger() function. i2 Connect uses that string to generate the file name in the format ${id}.log . The file is stored in the log directory, as defined by the configuration file or environment variable. import { createLogger } from '@i2analyze/i2connect'; const logger = createLogger('helloWorld'); // This writes to a file named \"helloWorld.log\" in the log directory logger.info('The service is running smoothly'); The ILogger interface provides methods for logging at four different levels depending on the severity of your message: debug() info() warn() error() Each method can receive a plain string or a formatted string. In formatted strings, each specifier is replaced with the corresponding argument. Supported specifiers are: %d is a numeric representation of the parameter %j is a JSON representation of the parameter %s is a string representation of the parameter All log file entries have timestamps in the format YYYY-MM-DD HH:mm:ss ."
  },
  "guide/making-a-connector-configurable.html": {
    "href": "guide/making-a-connector-configurable.html",
    "title": "Making a connector configurable",
    "keywords": "Making a connector configurable Depending on the nature of a connector, it might be necessary to allow administrators to configure some aspects of its behavior at the point of deployment. This configuration might include settings such as: URLs, credentials, and other information for connecting to third-party services. Controls over the behavior of a service, such as what data the service returns. As you develop your connectors, consider what configuration settings you might include to make them as flexible as possible for their deployers. Connectors can receive settings in a number of ways: From a configuration file only From an environment variable only From a configuration file with optional environment variable override Connectors built with the i2 Connect Node SDK support configuration settings with any of the following types: string number Boolean string array object Note : Any array- or object-based settings that you supply through environment variables must be specified as JSON strings. For example: [\"one\", \"two\", \"three\"] {\"prop 1\":\"prop value 1\", \"prop 2\":123, \"prop 3\":true} Providing settings in a configuration file To use file-based configuration settings, add them to the config/settings.json file. The following example contains the definition of a setting named url : { \"url\": \"https://example.com\" } If required, you can define settings in hierarchical sections to organize them. For example: { \"url\": \"https://example.com\", \"query\": { \"timeout in seconds\": 20, \"allow wildcard searches\": true, \"document file search extensions\": [\".doc\", \".txt\", \".html\"] } } Accessing configuration settings from service code Configuration settings are only useful if you can access them from within your service! The i2 Connect API provides functionality for doing so in the settings namespace (just import settings from @i2analyze/i2connect ). Each function in the namespace can access settings of different types, and is named accordingly. For example, to read a file-based string value named url : import { settings } from '@i2analyze/i2connect'; const url = settings.getString('url'); You can indicate that a configuration setting must be present by specifying the isRequired parameter when you attempt to fetch its value. For example: import { settings } from '@i2analyze/i2connect'; const url = settings.getString('url', true); The call to settings.getString() then throws an error if the setting is not found. Environment variable substitution The settings file also supports environment variable string substitution using the syntax ${env.ENV_VAR} , where env represents the Node.js environment . The SDK uses dotenv to enable loading an environment into the Node.js process from a .env file in the root directory of the connector. Environment variables defined outside the .env file take precedence over the variables defined in the file. Important: The .env file should not be distributed or checked into source control. For example, given the following configuration files: my-connector/config/settings.json : { \"apiKey\": \"${env.EXAMPLE_API_KEY}\", \"apiUrl\": \"https://${env.EXAMPLE_HOST}.com/${env.EXAMPLE_PATH}\" } my-connector/.env : EXAMPLE_API_KEY=abc123 EXAMPLE_HOST=foo EXAMPLE_PATH=bar You can access the settings like this: my-connector/src/index.ts : const apiKey = settings.getString('apiKey'); // \"abc123\" const apiUrl = settings.getString('apiUrl'); // \"https://foo.com/bar\" Handling sensitive information Many connectors need to handle sensitive information that could pose a security risk if it were compromised, such as API keys or passwords. To safeguard such information, keep these settings outside the source code or any other files that are distributed with your connector. When you use @i2analyze/create-connector to bootstrap a connector project, it is automatically configured so that both git and npm ignore any .env file that you create."
  },
  "guide/miscellaneous/auth-config.html": {
    "href": "guide/miscellaneous/auth-config.html",
    "title": "Authenticating service users",
    "keywords": "Authenticating service users Some of the data sources that your services interact with can require users to authenticate themselves before they can run queries. You can arrange for a service to prompt a user for their credentials (such as a username and password) and then pass them on to the third-party source. You mark a service as requiring authentication by defining and supplying an authenticator , which is made up of two parts: A form, which is shown to the user whenever they need to authenticate. The form can consist of any number of labeled, text-based input fields that allow the user to enter either plain or masked text. A callback function, which uses the form data to authenticate the user and returns a token that can be used to identify the user when running the service in the future. To define an authenticator, you use the createAuthenticator() function, passing the form as the first parameter and the callback as the second. The example below defines a simple user authentication form consisting of username and password fields: const usernameAndPasswordAuthenticator = createAuthenticator( { id: 'authenticator1', description: 'Enter your username and password', form: { username: { label: 'Username', type: 'text' }, password: { label: 'Password', type: 'password' }, }, }, ({ conditions }) => { try { // Get the token from the third-party authenticator, using the username and password const token = await thirdPartyAuth(conditions.username, conditions.password); return token; } catch { throw new DetailedError({ title: 'User not recognized' }); } } ); The second parameter is the callback that authenticates the user: the conditions parameter contains the values that the user entered for each field. The callback checks the values and return the token that's passed to the service's acquire() and validate() callbacks. If authentication fails, it raises a DetailedError that can contain details about why it failed. (The title property is displayed directly to the user.) To mark a service as requiring authentication, you specify the authenticator as a property of the service configuration. The service is then passed the token that was returned by the authenticator ( authentication-token in the example). If required, the service can verify that the token is still valid, and throw an AuthenticationRequiredError if it's not. addService( { id: 'service1', name: 'A service requiring user authentication', description: 'A service requiring the user to authenticate themselves', authenticator: usernameAndPasswordAuthenticator, }, ({ authToken, result }) => { // Check the authentication token is valid if (authToken === 'authentication-token') { // Continue with service acquire... } else { throw new AuthenticationRequiredError({ title: 'The authentication token is no longer valid' }); } } ); Notes A single authenticator can be used by more than one service. Each service will each be passed the same token that the authenticator returned. The callback can be either synchronous or asynchronous, depending on how it performs the authentication. If it calls out to a third-party service, asynchronous operation is more likely."
  },
  "guide/miscellaneous/data-model.html": {
    "href": "guide/miscellaneous/data-model.html",
    "title": "Data formats and values",
    "keywords": "Data formats and values This document describes how to format the data that you return from a connector or use in default values in the connector configuration. An example is given for each logical type. SINGLE_LINE_STRING Single-line strings can be up to 250 bytes long, and can be further limited by the schema. \"This is a single-line string.\" MULTIPLE_LINE_STRING Multiple-line strings can be up to 32K bytes long, and can be further limited by the schema. \"This is a multiple-line string.\" DATE Date values must be in the ISO 8601 format \"YYYY-MM-DD\". Also, values must be in the range from 1753-01-01 to 9999-12-30. \"2021-11-30\" TIME Time values must be in the ISO 8601 format \"hh:mm:ss\". Seconds are optional, but hours and minutes are not. Greater precision than seconds is not supported. \"23:59:59\" DATE_AND_TIME Four pieces of information are required to specify a particular point in time: The date The time as it would appear on a clock The time zone in which the point in time is observed If the point in time occurs during the hour that is repeated when clocks are turned back to end Daylight Saving Time, whether to use the first or second occurrence of this time. There are two ways to return values with the DATE_AND_TIME logical type. You can use an ISO 8601 string without a time zone, or a date-and-time JSON object that explicitly defines the time zone. When you use the ISO 8601 format, the time zone is taken from the timeZoneId that's defined in defaultValues in the connector configuration. If no default is present, the time zone is set to UTC. \"2021-12-30T23:59:59\" or \"2021-12-30T23:59:59.999\" When you use a date-and-time JSON object, a DATE_AND_TIME value looks like this: { \"localDateAndTime\": \"2021-12-30T23:59:59.999\", \"isDST\": false, \"timeZoneId\": \"Europe/London\" } Here, localDateAndTime is a timestamp string that conforms to ISO 8601 as above; timeZoneId is an identifier from the IANA Time Zone Database that specifies the time zone in which the moment of time was observed; and isDST specifies which occurence of the repeated hour to use - true for the first, false for the second. BOOLEAN Boolean values must be be either true or false . true or false INTEGER Integer values must be in the range from -2147483648 to 2147483647. 2147483647 DOUBLE Double values must be in the range from 4.94065645841246544e-324 to 1.79769313486231570e+308. 4.94065645841246544e-324 DECIMAL Decimal values are represented as a string, can contain up to 18 digits before the decimal separator, and up to 4 digits after it. There can be a leading minus sign, but no exponent (e) notation. \"-123456789012345678.1234\" SELECTED_FROM Selected-from string values must match a permitted value that the schema or a form condition defines. \"This is a selected-from string.\" SUGGESTED_FROM Suggested-from string values must match a permitted value that a form condition defines when you use them as default values, but are otherwise unrestricted. \"This is a suggested-from string.\" GEOSPATIAL Geospatial values must be formatted as GeoJSON points, as described at https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2 . The first element in the coordinates array is longitude, and must be a number between -180.0 and 180.0. The second element is latitude and must be a number between -90.0 and 90.0. { \"type\": \"Point\", \"coordinates\": [1.0, 2.0] } GEOSPATIAL_AREA Important: Values of type GEOSPATIAL_AREA are valid for use in connector configuration, but not in the data that you return from a connector. Geospatial area values must be formatted as GeoJSON feature collections, as described at https://datatracker.ietf.org/doc/html/rfc7946#section-3.3 . Foreign members are allowed. The geometry must be of type Polygon or MultiPolygon , both of which must contain at least four coordinates, where the first coordinate matches the last. { \"type\": \"FeatureCollection\", \"features\": [ { \"type\": \"Feature\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [1.0, 2.0], [3.0, 4.0], [5.0, 6.0], [1.0, 2.0] ] ] ] } }, { \"type\": \"Feature\", \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [1.0, 2.0], [3.0, 4.0], [5.0, 6.0], [1.0, 2.0] ] ] } } ] }"
  },
  "guide/miscellaneous/development-environment.html": {
    "href": "guide/miscellaneous/development-environment.html",
    "title": "Development environment",
    "keywords": "Development environment The i2 Connect SDK provides a range of facilities for testing and debugging your connectors from your development environment. Debugging connectors During development, you can debug your connector with Visual Studio Code's built-in debugger. The project adds two commands to the user interface. Start i2 Connect development server and debug starts the i2 Connect server and its connector, and launches the debugger at the same time. When you use this command, you don't need to run \" npm start \" before you start debugging. Attach to i2 Connect development server assumes that you have already run \" npm start \", and attaches the debugger to that process. Changing the debug port By default, debugging takes place on port 9229. To override this setting: Add a command-line option to the start script in package.json . For example: \"scripts\": { \"start\": \"i2connect-scripts start --inspect=5858\" } Note: For more details, see https://nodejs.org/en/docs/guides/debugging-getting-started/#command-line-options . In .vscode/launch.json , update the \"port\" field to match the number you specified in the script. ESLint The connector development environment includes a tool named ESLint that can help you to find problems in your code. The tool runs automatically as part of the start and build scripts. If you are using VS Code, you can install the ESLint extension that provides highlighting in the IDE. We don't recommend disabling ESLint, but if you want to do so, you can set an environment variable named DISABLE_ESLINT to \"true\" before running the start or build scripts."
  },
  "guide/miscellaneous/long-running-services.html": {
    "href": "guide/miscellaneous/long-running-services.html",
    "title": "Long-running services",
    "keywords": "Long-running services If you know that one or more of the services that you write for a connector might take a long time to run, you can take that fact into account during development. By configuring a service as longRunning , you instruct i2 Analyze to optimize the client experience so that users are not left waiting. For example, users cannot ask for the results of a long-running service to be sent directly to a chart, which would block the user interface. Instead, the results are sent to a separate window. Note: In the REST SPI, a long-running service is referred to as an \"asynchronous service\". Status updates Long-running services support giving status updates to users as they progress. In the acquire callback, you can access the longRunningState object, which has methods for adding to the query state. The example below demonstrates sending \"success\", \"information\", and \"error\" reports. Cancelation i2 Analyze allows users to cancel long-running services. You can check if a query has been canceled by accessing the isCanceled flag on the longRunningState object, and prevent unnecessary computation or data requests. Example addService( { id: 'sample', name: 'A long-running service', longRunning: true, }, async ({ result, longRunningState }) => { longRunningState.addSubstatus('information', 'Starting query'); await fetchFirstBatch(result); longRunningState.addSubstatus('success', 'Fetched first result batch'); if (longRunningState.isCanceled) { return; } try { await fetchSecondBatch(result); } catch { longRunningState.addSubstatus('error', 'Failed to fetch second result batch'); } } );"
  },
  "guide/miscellaneous/result-ids.html": {
    "href": "guide/miscellaneous/result-ids.html",
    "title": "Creating identifiers for records in service results",
    "keywords": "Creating identifiers for records in service results The records that you return from an external data source must have identifiers that are, at a minimum, unique within a result set. You must also specify whether the identifiers are persistent : When you state that identifiers are persistent, you guarantee that whenever a service returns data for a particular record, it always has the same identifier. When identifiers are not persistent, the same record data can have a different identifier in different result sets. Your choice to use persistent identifiers is partly governed by the source, which must provide a way to retrieve or fabricate a reproducible identifier. But the choice also has a significant effect on the end user experience. With persistent identifiers With persistent identifiers, if a record is returned that matches the identifier of an already charted record, the data on the existing record is overwritten with the new data. Without persistent identifiers Without persistent identifiers, all records returned are charted as new records. Charting the same record multiple times results in duplicate records if no fusion capabilities are configured. Data that can be uniquely identified For an example of a data source that can support persistent identifiers, consider the following, which contains unique identifiers for all records. Example data { \"people\": [ { \"uid\": \"075c8524-9783-48d1-9270-fce2e4c61ad7\", \"forename\": \"Jane\", \"surname\": \"Smith\", \"dob\": \"1960-05-08\" }, { \"uid\": \"4d526371-1892-41d1-beb8-096ab65dfb2a\", \"forename\": \"Jane\", \"surname\": \"Smith\", \"dob\": \"1960-05-08\" }, { \"uid\": \"aa065534-bd02-4ae8-8aaf-9fbdc1454465\", \"forename\": \"John\", \"surname\": \"Smith\", \"dob\": \"1960-05-08\" } ] } Here, the uid key is globally unique across the data source, so it is an ideal candidate to be used as the identifier when constructing results. This behavior means that you can confidently set hasPersistentResultIds to true for the data you are returning, as in the code below. Note: You can set hasPersistentResultIds on individual services, or on the connector when you call startConnector . Example service with persistent identifiers addService( { id: 'sample', name: 'Return people from data source', hasPersistentResultIds: true, }, ({ result }) => { for (const person of data.people) { const entity = result.addEntity(Person, person.uid); entity.setProperties({ 'First name': person.forename, 'Last name': person.surname, 'Date of birth': person.dob, }); } } ); Data that cannot be uniquely identified in a data source If you imagine removing uid from the previous example , then the data source no longer contains a strong identifier for the data records. It is not possible to construct a persistent identifier from the pieces of information available, and therefore you must leave hasPersistentResultIds unset (or set it to false ). In this situation, how you create identifiers for the result records is up to you. The only condition on the identifiers is that they must distinguish between the records in any result set that your service returns. There is no value in using record data in the identifers you create. Instead, you might consider: Using an npm package to generate a unique identifier for each record (see the example below) Using the value of an incrementing counter as you add records Example service without persistent identifiers import { v4 } from 'uuid'; ... addService( { id: 'sample', name: 'Return people from data source', hasPersistentResultIds: false, }, ({ result }) => { for (const person of data.people) { const entity = result.addEntity(Person, v4()); entity.setProperties({ 'First name': person.forename, 'Last name': person.surname, 'Date of birth': person.dob, }); } } ); Link identifiers It's relatively common for a data source to contain unique identifiers for entity data, but less so for links, which are not always a first-class part of the data model. To generate a persistent identifier for a link between two ends, you can encode the end identifiers into the link identifier. You should also consider link directionality, as this can change the behavior when users add links to a chart. For example, given the identifier template ${from}${to} , if you create a link from \"A\" to \"B\" and then \"B\" to \"A\" , you will have two separate links with identifiers of \"AB\" and \"BA\" . If you want a single link to be created in this instance, you must create an identifier without directionality. For example, [from, to].sort().join(\"\") will always create an identifier of \"AB\" . Best practices Do Do spend some time considering and designing the best way to construct identifiers for a particular data source. Do try to use a unique identifier for data returned from your connector where possible, as this results in the best user experience. Do use non-persistent identifiers if you are uncertain. There are no destructive side effects. However, if fusion capabilities are not configured, users might see duplicated or disconnected data from your services. Don't Don't use non-unique data in the identifiers that you create. For example, first name, last name, and date of birth are all poor choices. In the example data , if you choose to use the forename as the entity identifier, users will see only two records rather than three. The first \"Jane\" is overwritten by the second. Don't set result identifiers to be persistent and then use array indices as the identifier (or part of the identifier). Every time data is returned from such a connector, it has the potential to overwrite existing records with different data, based on its position in arrays returned by the data source."
  },
  "guide/miscellaneous/source-identifiers.html": {
    "href": "guide/miscellaneous/source-identifiers.html",
    "title": "Source identifiers",
    "keywords": "Source identifiers In all versions of i2 Analyze, the ETL pipeline requires you to provide origin identifiers for incoming records through the ingestion mappings that you write. Developers of connectors for i2 Connect and plug-ins for i2 Analyst's Notebook can explicitly provide source identifiers for the records that they create. Note: For high-level descriptions of source identifiers and origin identifiers (and the differences between them), see Identifiers in i2 Analyze records . When you attach recognizable identifiers to the records that you create in connector code, you enable services to perform operations based on those identifiers. You also enable i2 Analyze clients and servers to perform matching on records that have a shared source. The rules that govern the structure and contents of source identifiers are similar to - but not the same as - the rules for origin identifiers. Similar to their definitions, the rules for source identifiers are sometimes less restrictive than those for origin identifiers. The structure of a source identifier A source identifier contains a type and a key . If a source identifier is attached to a record that is subsequently uploaded to the Information Store, then the identifier is stored with that record in the database. As a result, there are limits on how much information types and keys can store. type The type of a source identifier allows the services in an i2 Analyze deployment to determine whether the source identifier is \"known\" to them - that is, that they can understand the key. The value of the type element does not have to be meaningful, but should be unique to your services so that you avoid clashes with any third party services you might use. The length of the source identifier's type must not exceed 200 bytes, which is equivalent to 100 2-byte Unicode characters. The following types are reserved and must not be used (case-insensitive): OI.IS OI.DAOD OI.ANB Anything starting with i2. key The key of a source identifier is an array containing the information necessary to reference the data in its source. The pieces of information that you use to make up the key differ depending on the source of the data. The total length of the source identifier's key must not exceed 692 bytes, which is equivalent to 346 2-byte Unicode characters. The key is stored as a serialized JSON array, so additional characters appear alongside the actual key elements: two characters are required for the array braces, and two quotes are required for each element, with commas as separators between elements. In other words, a key with N elements requires 3N + 1 characters of overhead. For example, the total length of [\"a\",\"bc\",\"defg\"] is 17 characters, while [\"a,bc,defg\"] is 13 characters. Also, if some special characters are present in a key element, they are escaped for storage. For example, \" becomes \\\" , which further increases the size of the key. Using source identifiers When a service receives a seed record, it can inspect the source identifiers to find out whether a known type is present. If it is, then the key can be used to retrieve or match information from the source system. When records are returned from external sources, the client can match them against other records by using the source identifiers (if source identifier matching is enabled in the match rules with enableSourceIdentifierMatching=\"true\" ). Also, if source identifier matching is configured in the system match rules, then source identifiers provided through i2 Connect or Analyst's Notebook can be matched against the origin identifiers of records in the Information Store. In both cases, source identifier matches occur when record item types match and the type and keys of the identifiers are an exact (case-sensitive) match. Note: After you upgrade to i2 Analyze 4.3.5 (or later) from a previous release, if you want to match against the origin identifiers of already-ingested records, you must build a new match index. Limitations There is a limit on the number of unique source identifiers that you can add to a record in the Information Store. The default limit is 50, but you can modify it by adding MaxSourceIdentifiersPerRecord=N (where N is a positive integer) to the DiscoServerSettingsCommon.properties file. Origin identifiers are not stored in chart records. As a result, they are not present as source identifiers on seeds that are sent to connectors or Analyst's Notebook plug-ins. Only source identifiers that have been added to records through the mechanism described here are present. Connectors that specify source identifiers are API-compatible with older versions of the i2 Connect gateway and Analyst's Notebook, but those products will not recognize new source identifiers as such. Rather, they will treat source identifiers as ordinary identifiers, or ignore them. To use source identifiers to their full potential, upgrade all products to the latest release at your earliest opportunity. Setting a source identifier To add a source identifier to an entity or a link, call the addEntity() or addLink() functions with details of the source identifier from within the service's acquire() callback function. For example, see the calls to result.addEntity(Complaint, nypdComplaintSourceId) and result.addLink(Victimof, nypdLinkSourceId, victimEntity, complaintEntity) in the following code: addService( { id: 'getVictims', name: 'NYPD Connector: Get all victims', description: 'A service that retrieves all the victim data.', }, ({ result }) => { const nypdComplaintSourceId: records.ISourceIdentifier = { key: ['Complaint', `1`], type: 'nypd-datasource', }; const complaintEntity = result.addEntity(Complaint, nypdComplaintSourceId); const victimId = `Victim: 1`; const victimEntity = result.addEntity(Person, victimId); const nypdLinkSourceId: records.ISourceIdentifier = { key: ['VictimOf', `1`], type: 'nypd-datasource', }; result.addLink(Victimof, nypdLinkSourceId, victimEntity, complaintEntity); } ); Note: Not all entities and links require source identifiers. For example, the call that populates victimEntity uses the version of the result.addEntity() function that takes a simple string identifier."
  },
  "guide/miscellaneous/source-references.html": {
    "href": "guide/miscellaneous/source-references.html",
    "title": "Source references",
    "keywords": "Source references In the records that you return to users from your services, you can include source references that contain information about the external source from which the data came. Entity and link records both support the inclusion of source reference objects . Setting a source reference To add a source reference to an entity or link, call the setSourceReference() function from within the service's acquire callback. For example, see the calls to complaintEntity.setSourceReference() and victimOfLink.setSourceReference() in the following code: const exampleSourceRef = { name: 'NYPD Complaint Dataset', type: 'Open source data', description: 'A collection of open source data about NYPD complaints', }; addService( { id: 'getVictims', name: 'NYPD Connector: Get all victims', description: 'A service that retrieves all the victim data.', }, ({ result }) => { const complaintId = `Complaint: 1`; const complaintEntity = result.addEntity(Complaint, complaintId); complaintEntity.setSourceReference(exampleSourceRef); const victimId = `Victim: 1`; const victimEntity = result.addEntity(Person, victimId); victimEntity.setSourceReference(exampleSourceRef); const victimOfLinkId = `VictimOf: 1`; const victimOfLink = result.addLink(Victimof, victimOfLinkId, victimEntity, complaintEntity); victimOfLink.setSourceReference(exampleSourceRef); } );"
  },
  "guide/miscellaneous/troubleshoot.html": {
    "href": "guide/miscellaneous/troubleshoot.html",
    "title": "Troubleshooting guide",
    "keywords": "Troubleshooting guide This topic contains a list of common issues that you may face during the development of your connector, and explains how to solve them. The issues are categorized by the stage of development in which they may arise. If you come across a problem that is not covered below, please open an issue . Where to check for errors Error messages about the i2 Analyze server, your connector configuration, and your data appear in the console when you deploy your i2 Analyze server instance. In some cases, you might want to view the main server log file for more detail. You can do so within the VSCode Docker extension, by right-clicking on the container and then clicking View Logs or expanding the container view and navigating to Files\\logs\\opal-services . Connector configuration errors Failed to retrieve configuration information for the connector with identifier '<CONNECTOR_ID>' from the URL '<URL>'. Unexpected response code (404) from the request to URL '<URL>'. You will see the above messages in the console output when you run ./deploy.sh -c <config_name> -t connectors if i2 Analyze fails to retrieve your connector's configuration from its config endpoint. Check that both the connector ID and the base URL in the message are correct. If they are not correct, update them in the i2 Analyze connector-definition.json file (in the connector-images\\<connector-name> directory). If the URL is correct, then you need to check the implementation of your config endpoint, and that you have assigned to it the correct URL path. The path should be the base URL suffixed with /config . Some queries are not configured correctly. Contact your system administrator. You will see the above in the External Searches window if there is a problem with your connector configuration. To understand what went wrong: Click DETAILS to view more information. Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors . Under the Status section for your connector, a Warning should be displayed with further information. Problems might include: \"Configuration error for the connector with identifier <CONNECTOR_ID>. The application is communicating with the connector through a protocol that is not secure.\" This message appears when i2 Analyze and your connector communicate through HTTP. In a production environment, you should secure this connection by using HTTPS. The procedure is beyond the scope of this guide, but it is covered in the product documentation . Errors running connector services Failed to open the selected query. Contact your system administrator If you see the above error message when you try to run a query from your connector through External Searches in Analyst's Notebook, there are a number of potential causes. To understand what went wrong: Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors View the more detailed description of the error in the Status section of your connector. Some examples (and their solutions) are: \"The condition with identifier <CONDITION_ID> and logical type 'SELECTED_FROM' in the service with identifier <SERVICE_ID> on the connector with identifier <CONNECTOR_ID> specifies a default value that is not valid. <DEFAULT_VALUE> does not match one of the defined possible values.\" This message means that you have supplied a default value for a selected-from condition that is not defined as a possible value. Check that the defaultValue is set to a value that is defined in possibleValues . \"The value '<PROPERTY_VALUE>' is not valid for the property type with identifier '<TYPE_ID>'. The value '<PROPERTY_VALUE>' is incompatible with the '<LOGICAL_TYPE>' data type.\" This message means that you have supplied a default value for a condition whose logical type is not compatible with the condition's logical type."
  },
  "guide/property-semantic-search.html": {
    "href": "guide/property-semantic-search.html",
    "title": "Semantic seeded search",
    "keywords": "Semantic seeded search The connector development walkthrough describes how to create a service that accepts seed records to drive the searches that it performs. In that example, the records that the service accepts are constrained by their item types. Starting from version 4.4.1 of i2 Analyze, you can specify semantic constraints instead of item type constraints, so that: A service can accept seed records of any item type, provided that they have properties with particular semantic types (or descendants of those types). Where a seed record has more than one property with the same (or a related) semantic type, you can base a search on the values of all such properties. This topic demonstrates how to specify semantic constraints. For more information about the uses to which you can put seeded searches, see Seeded search . Example For this example, you'll create a service that requires seed records that have values for properties with the \"Person First Name\" and \"Person Last Name\" semantic types. (Since the \"Maiden Name\" semantic type is a descendant of \"Person Last Name\", the service will accept a seed with a value for a property with that type too.) The service examines each seed that it receives in the request, and returns a response containing records whose property values match the values in that seed. Adding a new service You'll need to add the new service to the index.ts file that defines the connector. To support seeds with semantic property type constraints, you include a semanticSeedConstraints field in its configuration. The field defines the number of seed records that the seeded search can use, and - through semanticPropertyTypeIds - the identifiers of the semantic types of properties for which those seeds must have values. const properties = { PersonFirstName: 'guid4DE7370B-60E5-4EB0-860E-4066D3DFD7B6', PersonLastName: 'guid62B01C18-2E64-46D5-B2FF-3C69B4F76FEB', }; const sampleData = [ { firstName: 'Gene', lastName: 'Hendricks', id: '123' }, { firstName: 'Nick', lastName: 'Haley', id: '456' }, { firstName: 'Joe', lastName: 'Bloggs', id: '789' }, ]; addService( { id: 'find-same-first-and-last-name', name: 'Find Same First And Last Name', description: 'A service that finds records with the same first and last name as the seed.', semanticSeedConstraints: { min: 1, max: 5, semanticPropertyTypeIds: { recordsWithFirstLastName: [properties.PersonFirstName, properties.PersonLastName], }, }, }, ({ result, semanticSeeds }) => { // TODO: Implement the service } ); Note : When you write your own services with semantic type constraints, you'll need to find the GUIDs of the semantic property types that you want to use. See Semantic type identifiers for more information. A real service would search an external data source for records that match the seed values. For demonstration purposes, this example uses sampleData in place of an external source. Implementing the service With the service defined, you can implement it to access the information in the seeds that it receives, and then to use that information to search for records in the source. In the following code, the outer for loop uses the recordsWithFirstLastName key from the service definition to get the property values from each seed record in turn. Note: If the service specified other valid combinations of semantic property types, the seeds that matched those constraints would be available in a similar way. The second part of the loop filters sampleData according to whether the firstName and lastName properties in the data match any of the property values in the seed record that have the PersonFirstName and PersonLastName semantic types. On finding a match, the implementation creates a Person record and adds it to the result. // Determines whether a substring occurs within a supplied string function caseInsensitiveContains(source: string, searchValue: string): boolean { return source.toLowerCase().includes(searchValue.toLowerCase()); } addService( { ... }, ({ result, semanticSeeds }) => { for (const semanticSeed of semanticSeeds.recordsWithFirstLastName) { const firstNames = semanticSeed.getAsStrings(properties.PersonFirstName); const lastNames = semanticSeed.getAsStrings(properties.PersonLastName); if (firstNames && lastNames) { for (const fn of firstNames) { for (const ln of lastNames) { // Query third-party data source with property values const people = sampleData.filter( (p) => caseInsensitiveContains(p.firstName, fn) && caseInsensitiveContains(p.lastName, ln) ); for (const person of people) { const resultEntity = result.addEntity(Person, person.id); resultEntity.setProperties({ 'First Name': person.firstName, 'Last Name': person.lastName, }); } } } } } } ); Reload the connector configuration in i2 Analyze To make the new service available, you must reload the connector so that i2 Analyze picks up the configuration changes. Just like when you deployed the connector for the first time, you can use the Admin Console. Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors . If you are prompted to log in, enter Jenny and Jenny as the username and password. Click the Reload gateway button. Investigate in Analyst's Notebook Now you can see what happens when you use the connector from the Analyst's Notebook desktop client. Open Analyst's Notebook and log in when prompted. Select a record on the chart that has a value for the \"First Name\" and a value for the \"Family Name\" or \"Maiden Name\" property (or for both). Click the External Searches button in the ribbon. Find the query named Find Same First And Last Name . Click Open to run the service."
  },
  "guide/request-based-configuration.html": {
    "href": "guide/request-based-configuration.html",
    "title": "Tailoring services based on request information",
    "keywords": "Tailoring services based on request information When the i2 Connect gateway passes a request to your service on behalf of a user, you can customize your response based on information in the request. For example, if your service has a form associated with it, you might want some groups of users to have access to more options than others. You might even decide that some users should have no access to the service at all. You can tailor the following aspects of a service based on the request: Service visibility Service name and description Form section title Form section and condition visibility Form condition label and description Form condition default value Form condition possible values for selected-from and suggested-from types Service and form condition visibility To prevent access to a service, to particular conditions, or to sections of a form, you can provide a callback that returns a Boolean value to the corresponding hide property. In all cases, the callback receives the request information, which allows you to access the user property as well as the raw request header information through the header . import { addService, services } from '@i2analyze/i2connect'; addService( { id: 'analystSpecificService', name: 'Only visible to analysts group', hide: (requestInfo: services.IRequestInformation) => { return !requestInfo.user.groups.includes('analyst'); }, form: { field1: { label: 'Standard field', logicalType: 'singleLineString', }, field2: { label: 'Super user only field', logicalType: 'singleLineString', hide: (requestInfo: services.IRequestInformation) => { return !requestInfo.user.groups.includes('superUser'); }, }, }, }, () => { // Acquire code goes here } ); Label and description content To tailor the name or description of a service, or the label or description of a form condition, or the title of a form section, you can provide a callback that returns a string for those fields instead of a plain string: import { addService, services } from '@i2analyze/i2connect'; addService( { id: 'serviceId', name: (requestInfo: services.IRequestInformation) => { return requestInfo.user.groups.includes('analyst') ? 'Analyst service' : 'Standard service'; }, description: (requestInfo: services.IRequestInformation) => { return requestInfo.user.groups.includes('analyst') ? 'Describe analyst-specific features' : ''; }, form: { field1: { label: (requestInfo: services.IRequestInformation) => { return requestInfo.user.groups.includes('analyst') ? 'Analyst label' : 'Standard label'; }, logicalType: 'singleLineString', }, }, }, () => { // Acquire code goes here } ); Default values To tailor a default value for a form condition, you can provide a callback that returns the appropriate value according to the logical type: import { addService, services } from '@i2analyze/i2connect'; addService( { id: 'serviceId', name: 'service name', form: { field1: { label: 'Maximum', logicalType: 'integer', defaultValue: (requestInfo: services.IRequestInformation) => { return requestInfo.user.groups.includes('analyst') ? 10 : 5; }, }, }, }, () => { // Acquire code goes here } ); Possible values To tailor the options that users see for selected-from and suggested-from conditions, you can provide a callback that returns the desired possible values: import { addService, services } from '@i2analyze/i2connect'; addService( { id: 'serviceId', name: 'service name', form: { field1: { label: 'Choose', logicalType: 'selectedFromList', possibleValues: (requestInfo: services.IRequestInformation) => { return requestInfo.user.groups.includes('analyst') ? [ { value: '1', displayValue: 'one' }, { value: '2', displayValue: 'two' }, ] : [ { value: '3', displayValue: 'three' }, { value: '4', displayValue: 'four' }, ]; }, }, }, }, () => { // Acquire code goes here } ); Acquire, validate, and authenticate callbacks In case you need to tailor the behavior of your acquire() , validate() , and authenticate() callbacks, they also receive an IRequestInformation object: import { addService, services } from '@i2analyze/i2connect'; addService( { id: 'serviceId', name: 'service name', authenticator: createAuthenticator( { id: 'requestInfoCheckingAuthenticator', description: '', form: { searchTerm: { label: 'Search term', logicalType: 'singleLineString', isMandatory: true, }, }, }, ({ requestInformation }) => { // Retrieve a token from a third-party source, using the user principal. const token = thirdPartyTokenGenerator(requestInformation.user.principal); return token; } ), }, { acquire: async ({ requestInformation, conditions: { searchTerm }, result }) => { // If the user is an analyst, they can request more information. const data = await requestData({ $limit: requestInformation.user.groups.includes('Analyst') ? '100' : '50', $where: searchTerm, }); for (const datum of data) { addComplaint(datum, result); } }, validate: ({ requestInformation, conditions: { searchTerm } }) => { // If the user is not an analyst, they cannot do a wildcard search. if (!requestInformation.user.groups.includes('Analyst')) { if (searchTerm === '*') { throw new DetailedError({ title: 'Wildcard search is not allowed.' }); } } }, } );"
  },
  "guide/upgrade-guide-v1-to-v2.html": {
    "href": "guide/upgrade-guide-v1-to-v2.html",
    "title": "Upgrading to i2 Connect SDK 2.0",
    "keywords": "Upgrading to i2 Connect SDK 2.0 Starting with version 2.0, the i2 Connect SDK no longer supports the creation of connector servers that host multiple connectors. Defining a connector and its services no longer takes a class-based approach, which means that connector identifiers are not coupled to class names, and it becomes possible to register services dynamically. In version 2.0, decorators do not define service behaviors, which in most cases are now specified through service configuration. Service implementation now takes place in a callback, which means there is no longer any need to instantiate and return a Result class. Rather, the result is passed to the callback function to be populated. Another significant change is a new abstraction layer for accessing values of certain types in seeds and form conditions. For example, date values are now presented as objects with properties for day, month, and year, rather than as strings that require parsing to access those values. Version 2.0 also comes with a number of renames and API changes, along with a general restructure of namespaces that is not covered in detail in this document but is described in the CHANGELOG.md file. Finally, version 2.0 requires at least Node.js 14.17.0, and the included version of ESLint is now 8.0.0. As a result, linting your code might reveal problems that were not previously reported. Upgrading a connector In explaining how to upgrade a connector that was written using version 1.x of the npm packages, this guide assumes that you are starting with a project that contains a single connector and a folder structure similar to this one: ├── src │ ├── index.ts │ └── connectors │ └── connectorA │ ├── connector.controller.ts │ └── ... <other files used by connector code, such as the schema> ├── package.json └── ... The procedure for upgrading is as described in the following sections. Update the npm packages In the package.json file, update the @i2analyze/i2connect-scripts and the @i2analyze/i2connect packages to use the latest 2.x.x tag: \"@i2analyze/i2connect-scripts\": \"^2.0.0\" . Install the packages using your chosen package manager. For example, if you are using npm, run npm install . Restructure the files Delete the src/index.ts file, which should only contain boilerplate code that starts the server - that is, Server.start(__dirname); Move the contents of your connector (in the above example, that means everything inside the connectorA folder) to the top level src folder. Rename connector.controller.ts to index.ts . The end result should be a structure like this: ├── src │ ├── index.ts (previously connector.controller.ts) │ └── ... <other files used by connector code, such as the schema> ├── package.json └── ... Start updating the code to use the new API If you run a build now ( npm run build ), you will see TypeScript compilation errors, and the connector will no longer run. The following list of changes is not exhaustive, but we also provide commented before and after examples for demonstration purposes. Migrate from the decorator-based API First, update the imports. Your IDE will probably highlight which ones are no longer exported from @i2analyze/i2connect , so remove those and add imports for the addService and startConnector functions. Start migrating the methods and parameters that previously used decorators. The following table explains how decorators can be migrated. It can be used in conjunction with the before and after examples. Previous decorator usage New usage @connector(config) export class MyConnector { ... } This class decorator maps directly to the new startConnector(config) function. The startConnector function needs to be called after all services have been registered. You can also copy the class name to id within the startConnector config. @service(config) public serviceMethod() {...} This method decorator maps directly to the new addService(config, acquireCallback) function, where the body of the decorated method will move into the acquire callback. @asyncState() asyncState: IAsyncState The longRunningState is now accessed on the parameter object that's passed into the acquire callback when the service is long-running. @seeds(config) seeds: ISeeds The config for the seeds moves to the seedConstraints on the service config. The seeds are now accessed on the parameter object that's passed into the acquire callback on a service. @condition(config) paramName: T The config for the condition is moved into the form on the service config, where the paramName becomes the key. @authenticator(config) public authenticateMethod() {...} This method decorator maps directly to the new createAuthenticator(config, authenticateCallback) , where the body of the decorated method will move into the authenticate callback. @authenticationField(config) paramName: string This moves into the config for the createAuthenticator in the form of a key value on the form . This value can be accessed from the parameters object in the authenticate callback. @authenticationToken() authToken: string The authToken is now accessed on the parameter object passed into the acquire callback on a service, when a service is configured to use an authenticator . Example 1.x connector import { connector, authenticator, authenticationField, seeds, ISeeds, asyncState, IAsyncState, service, Result, } from '@i2analyze/i2connect'; @connector({ schemas: { connector: connectorSchema }, }) export class FooConnector { @authenticator({ description: 'Enter your username and password to enable data access.', }) async authConfig( @authenticationField({ label: 'Username', type: 'text' }) username: string, @authenticationField({ label: 'Password', type: 'password' }) password: string ) { // ... return 'access token'; } @service({ name: 'Foo', description: 'Foo description', async: true, }) public async fooService( @seeds({ thisConnectorOnly: true, typeConstraints: [Person, Address, Phone, Email], min: 1, max: 10, }) seeds: ISeeds, @asyncState() asyncState: IAsyncState, @authenticationToken() authToken: string, @condition({ logicalType: 'singleLineString', label: 'Enter search term', }) searchTerm: string | undefined ) { const result = new Result(); for (const seed of seeds.entities) { const hasFirstNameIfPerson = seed.hasProperty(Person, 'First name'); const firstNameIfPerson = seed.hasProperty(Person, 'First name'); // ... } // ... return result; } } Example 2.x connector import { createAuthenticator, addService, startConnector } from '@i2analyze/i2connect'; const authenticator = createAuthenticator( { description: 'Enter your username and password to enable data access.', form: { username: { label: 'Username', type: 'text' }, password: { label: 'Password', type: 'password' }, }, }, () => { // ... return 'access token'; } ); addService( { id: 'fooService', name: 'Foo', description: 'Foo description', longRunning: true, // Renamed from \"async\" authenticator, seedConstraints: { thisConnectorOnly: true, typeConstraints: [Person, Address, Phone, Email], min: 1, max: 10, }, form: { searchTerm: { logicalType: 'singleLineString', label: 'Enter search term', }, }, }, ({ longRunningState, authToken, seeds, conditions, // The result is passed in via the callback and // no longer needs to be instantiated and returned result, }) => { const { searchTerm } = conditions; for (const seed of seeds.entities) { if (seed.isType(Person)) { // The overloads for hasProperty and getProperty which accepted // the item type as the first parameter have been removed const hasFirstNameIfPerson = seed.hasProperty('First name'); const firstNameIfPerson = seed.getProperty('First name'); } // ... } // ... } ); startConnector({ schemas: { connector: connectorSchema }, }); Default behavior changes Some of the changes from version 1.x to version 2.x of the API are not syntactical, but affect the default behavior of your connectors. Result ID persistence The default behavior for connectors has changed so that they no longer assume result record identifiers to be persistent. If your connector does return persistent identifiers, you must set hasPersistentResultIds to true in the configuration for startConnector . The documentation contains more information on this subject. Time zones The timeZoneId now defaults to \"UTC\" instead of \"Europe/London\". If your connector needs to use the previous value, it must to specify it in the configuration for startConnector . JSON configuration The contents of the JSON configuration file have changed. In particular, the connector identifier - which was previously the connector class name - now belongs in this file. Update the $schema URL to be https://i2group.github.io/analyze-connect-node-sdk/schemas/config-schema-2.0.json . Remove the ssl.ocspChecking and ssl.passphrase fields. The passphrase must now be set through the SSL_PASSPHRASE environment variable. Add a connectorId field to the top level of the configuration, and set it to the connector identifier (which was previously the connector class name). Consider adding your connector-specific configuration to the JSON file too, which is a supported option in v2 . Example 1.x JSON config ( config/default.json ) { \"$schema\": \"https://i2group.github.io/analyze-connect-node-sdk/schemas/config-schema.json\", \"serverPort\": 3000, \"ssl\": { \"enabled\": false, \"serverPort\": 3443, \"privateKeyFile\": \"\", \"certificateFile\": \"\", \"passphrase\": \"\", \"gatewayCN\": \"\", \"caCertificateFile\": \"\", \"ocspChecking\": { \"enabled\": false, \"fallbackResponder\": \"\" } }, \"log\": { \"level\": \"info\", \"fileLogging\": { \"enabled\": false, \"dir\": \"\" } } } Example 2.x JSON config ( config/server.json ) { \"$schema\": \"https://i2group.github.io/analyze-connect-node-sdk/schemas/config-schema-2.0.json\", \"serverPort\": 3000, \"connectorId\": \"FooConnector\", \"ssl\": { \"enabled\": false, \"serverPort\": 3443, \"privateKeyFile\": \"\", \"certificateFile\": \"\", \"gatewayCN\": \"\", \"caCertificateFile\": \"\" }, \"log\": { \"level\": \"info\", \"fileLogging\": { \"enabled\": false, \"dir\": \"\" } } } Deployment updates The move to version 2.0 of the SDK also involves some changes to the procedure for deploying a connector. Config URL Because a connector server now supports only a single connector, the routing on the i2 Analyze server no longer involves the connector identifier. For example, the path https://localhost:3443/ClassName/config becomes https://localhost:3443/config . If you're using the deployment toolkit, then within topology.xml the setting configuration-url=\"ClassName/config\" becomes configuration-url=\"/config\" . Test your connector Test your connector following migration to confirm that all of the services are behaving as expected!"
  },
  "guide/visual-query.html": {
    "href": "guide/visual-query.html",
    "title": "Visual Query",
    "keywords": "Visual Query Analysts use Visual Query to search for records in the Information Store based on the values of specific properties, and on their relationships with other records. The records that they find depend on the structure of the queries that they create. Starting from version 4.4.2 of i2 Analyze, you can write Visual Query services for your connectors. Analysts can then interrogate an external source in the same way as they query the Information Store, using the familiar tools in the web client and the Analyst's Notebook desktop client. Example The Visual Queries that analysts create have two parts: The query structure, which indicates the types and relationships of the records they're interested in. The query conditions, which apply to the items in the structure and specify some of the values in the records they want to find. A Visual Query service that you create must examine the query structure that it receives in the request, and return a response containing records whose property values match the query conditions. Note: In general, external data sources do not support the range of queries that are necessary for implementing unrestricted Visual Query operations across every record type they contain. When you write a Visual Query service, you can constrain the item types that analysts can use in their query structures, and the property types that they can use in query conditions. Adding a new service Adding a Visual Query service to your connector means calling the addVisualQueryService() method from the index.ts file that defines it. In the first argument to the method, you provide the service configuration, which places limits on the Visual Queries that analysts can create. For example, you can use the paletteItemTypes field to say explicitly which item types appear (or do not appear) in the Visual Query structure editor: addVisualQueryService( { name: 'Visual Query service with example restrictions', id: 'visual-query-service-with-example-restrictions', description: 'A Visual Query service that does not allow query entities of type ET3 in query structures, and has operator usage rules and constraints', config: { paletteItemTypes: { mode: 'DENY', itemTypeIds: ['ET3'] }, Alternatively (or additionally), you can use the operatorUsageRules field to allow or deny the use of conditions that involve particular property types, aspects, or operators. A rule can apply to a single item type or to all available item types: operatorUsageRules: [ // Deny the use of query conditions on all query items. { ruleType: 'DENY', }, // Override the above. For query entities of type ET2 // only, specifically allow conditions that use the BETWEEN operator // on YEAR aspects of property types EVE4 and EVE5. { ruleType: 'ALLOW', itemTypeId: 'ET2', propertyTypeIds: ['EVE4', 'EVE5'], operators: ['BETWEEN'], aspects: ['YEAR'], }, // Override the above. For query entities of type ET1 only, // specifically allow conditions that use the EQUAL_TO or STARTS_WITH // operator on property type ADD5. { ruleType: 'ALLOW', itemTypeId: 'ET1', propertyTypeIds: ['ADD5'], operators: ['EQUAL_TO', 'STARTS_WITH'], }, ], Note: The rules that you can define here are equivalent to the rules that administrators can create to govern the behavior of Visual Queries against the Information Store. For more information, see Visual Query condition restrictions . Finally, you can use the constraints field to restrict other features of the query structures that analysts can create: constraints: { // Can users specify which record types they want in results? outputSelectionSupported: true, // How many items in the query structure can have count conditions? maximumCountConditions: 1, // How many query links can appear in the query structure? maximumQueryLinkCount: 100, // How many query entities can have the 'Any' type? maximumAnyEntityTypeSupported: 1, // How many query links can have the 'Any' type? maximumAnyLinkTypeSupported: 2, }, }, }, async ({ visualQuery, result }) => { // TODO: Implement the service } ); Implementing the service Taken as a whole, the Visual Query service configuration places limits on the contents of the visualQuery objects that your service receives. A real service would search an external data source for records that match or correspond to the contents of visualQuery , and then populate the result with the records that it finds. <!-- TODO: Add an explanation and a link to the example Visual Query service when we have it. --> Note: Implementing a Visual Query service over an external source can be a complicated task, especially if the source isn't relational. i2 recommends engaging with its Services team to assist with the creation of Visual Query services. Reload the connector configuration in i2 Analyze To make a new service available, you must reload the connector so that i2 Analyze picks up the configuration changes. Just like when you deployed the connector for the first time, you can use the Admin Console. Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors . If you are prompted to log in, enter Jenny and Jenny as the username and password. Click the Reload gateway button. Investigate in Analyst's Notebook After you reload the gateway, you can see what happens when you use the connector from the Analyst's Notebook desktop client. Open Analyst's Notebook and log in when prompted. Click the External Searches button on the ribbon bar, and find the new Visual Query in the list. Click Open to start designing a Visual Query. Create the query structure, specify the query conditions, and then click Run to execute it."
  },
  "guide/walkthrough/1-schema-design-guide.html": {
    "href": "guide/walkthrough/1-schema-design-guide.html",
    "title": "Designing an i2 Analyze connector schema",
    "keywords": "Designing an i2 Analyze connector schema i2 Analyze schemas are at the core of any i2 Analyze deployment. They define the types of entities, links, and properties that users can view and analyze in Analyst's Notebook. This section guides you through the process of developing a schema that aligns with the data the connector will retrieve. The process of developing a schema is iterative. Schema design requires fine tuning, especially if you are unfamiliar with the data set that you are creating the schema for. After you deploy i2 Analyze, you will be able to experiment with and test the schema you create. You can refer back to this document to repeat the process until you have a schema that you believe represents the NYPD Complaint Dataset. If you already understand the schema development process, you can use the sample NYPD complaint schema from here . Prerequisites Before you start, ensure that you have installed Analyst's Notebook with the i2 Analyze Schema Designer. The i2 Analyze schema There are three integral components of an i2 Analyze schema: Entity types . These represent real-world concepts such as person, location, bank account, or event (\"meeting\", for example). Link types . A link type describes a relationship between two entity types, such as a person's ownership of a vehicle or a transaction between two bank accounts. Link types can specify exactly which entity types can appear at their ends, or they can represent a general association between entities of any types. A link between entities on a chart is represented by a line between them, which will be an arrow if the link is directed. Property types . Entities and links have properties, which store information about the object, event, or relationship. For example, a person might have a name, date of birth, and eye color; while a meeting might have a date, a time, and a duration. The property types of an entity or link type define exactly what properties the records of that type can have. Getting to know the data The data that your connector will retrieve comes from the NYPD Complaint Dataset . Before you build your schema, you should explore the data and decide how to model it as entities, links, and properties. You can also consult the data API and look at the raw data if you want to. Creating the schema Open i2 Analyze Schema Designer. From the File menu, click New Schema . Adding entity types You need to create entity types that can represent different objects. These types will relate to the supplied NYPD Complaint Dataset, and you can decide what they will be. One example of an entity type used in the sample schema is a Complaint . You can follow the instructions below to simulate creating the example schema with this entity type, or you can create your own types. From the Insert menu, click New Entity Type . Enter a name and a description for the entity type. (For example, Name: Complaint, Description: \"A complaint regarding an incident that occurred between some individuals\".) Select an icon to represent entities of this type in Analyst's Notebook. (For example, a notepad.) You can create any entity types you like, provided that they align with the data. For example, you could have entity types to represent people and locations. Look at the example schema for inspiration if you need to. Adding property types to entity types For the entity types that you created, decide which fields in the data provide information that can be stored in properties. To continue with the Complaint example, some property types that might be suitable include: Complaint Number Complaint Start Date Complaint End Date Level of Offense Offense Description These property types are valuable because they allow for additional analysis to occur in Analyst's Notebook. They provide the opportunity to conduct live formatting on the data, as well as to create different charting schemes for when data needs to be displayed in a different fashion. This is explained in more detail in Creating a charting scheme , below. To add a property type to an entity type: Select the entity type in the navigation tree. From the Insert menu, click New Property Type . Enter a name and a description for the new property type. (For example, Name: Complaint Number, Description: \"Persistent ID for each complaint\".) Assign a logical type that describes the type of data that properties of this type will contain. (For example, Integer .) Select the Is Mandatory checkbox if you want to enforce that all entities of this type have a property of this type. Adding link types Decide how the entity types you have created can be related. An example of a link type in the supplied schema is Located At. You can follow the instructions below to simulate creating the example schema with this link type, or you can create your own link types: From the Insert menu, click New Link Type . Enter a name and a description for the link type. (For example, Name: Located At, Description: \"Where the incident was located\".) Links often make sense only between certain entity types. To choose which entities can be connected by a link of this type, open the Link Ends tab and select the appropriate From End Types and To End Types . (For example, From End: Complaint, To End: Location.) Define as many link types as you like, ensuring that they align with the data. For example, a person might be linked to a complaint if they are listed as the victim in the complaint. You might therefore have a Victim In link type that connects Person entities to Complaint entities. Similarly, you might define a a Suspect In link type. Adding property types to link types For the link types that you have created, decide if there are fields in the data set that can provide properties for them. The example schema contains no links with properties, and you can complete the demonstration without them, but they might be useful for the connectors that you make after following this guide. To add a property type to a link type: Select the link type in the navigation tree. From the Insert menu, click New Property Type . Enter a name and a description for the new property type. Assign a logical type that describes the type of data that properties of this type will contain. For example, Single Line String or Integer . Select the Is Mandatory checkbox if you want to enforce that all links have a property of this type. Creating a charting scheme When you have defined all the entity, link, and property types you want to model, you must create a charting scheme to determine how items that contain your entity and link records appear in Analyst's Notebook. For example, the charting scheme determines how labels on the chart are generated from properties of entities and links. To create a charting scheme: From the File menu, click Edit Charting Schemes . Expand the first charting scheme in the left panel to reveal Entity Types and Link Types . Expand Entity Types and Link Types to reveal the entity and link types that you created earlier. Right-click Properties and select Insert Chart Item Property Type . From the dropdown, select Label . In the Label tab, set the text to be displayed with entities of this type in Analyst's Notebook to distinguish them on the chart. You can use the values of properties assigned to a record to construct your label. To use a property value, click the downward arrow on the Insert button and select the property type of your choice. In the example charting scheme, the Complaint Number is used in the label of Complaint entities. You can prefix the value of a property with a space, a newline, or some custom text. The prefix can clarify what data is represented in the label. For example, a Complaint Number might be prefixed with the text \"Complaint \". This is displayed in Schema Designer as follows: A Complaint with the Complaint Number 667574574 will then be displayed in Analyst's Notebook like this: You can also add a suffix in the same way, which can be useful if you use multiple property values in the label. For example, you might display values on separate lines, or with spaces between them. For example, Person entities in the example are shown as follows: You can also set a default value to use when property values are not set. In this case, the default value is \"NO PROPERTIES\". This range of options allows you to customize your charting scheme in a way that best represents your data. To combine multiple properties into a single label, follow the above process again. You can add more charting schemes to visualize the data in different ways. The supplied example schema contains two charting schemes - one with labels (detailed version) and one without labels (simplified version). To create further charting schemes, repeat the above instructions with different (or no) labels. A group of entities and links with a detailed charting scheme might look like this: This charting scheme provides a substantial amount of information to the analyst, allowing them to see details of their entities and links at a glance. However, there might be times when this much information is overwhelming, especially in a chart with lots of records. For such cases, you might use a simpler charting scheme that just gives an overview of data in the records. A group of entities and links with a simplified charting scheme might look like this: When you have finished making your changes, click OK to close the charting scheme editor. See the i2 product documentation for information about adding property types that are not used in the example schema. Link summarizations Sometimes, multiple links exist between the same two entities on a chart in Analyst's Notebook. You can use the charting scheme to choose how to represent these links. The different link summarizations that you can use are: Link Option Description Single Link All links of the selected type between the same two entities are combined into a single link. This option is useful if you are producing a summary chart and do not want to show all the detail of the data between entities. Directed All links of the selected type in the same direction between the same two entities are combined. This option is useful if you are charting information such as telephone calls or transactions. Multiple Each link of the selected type between the same two entities is charted separately. This option is useful if you want to show all the detail. If there are many links, you might make the chart cluttered or hard to read. Flow All links of the selected type between the same two entities are combined into a single, directed link. The direction (or flow) is determined from a property that you specify. For example, if there are several financial transactions between two bank accounts, this option is useful to determine the direction that the aggregate amount of the money is flowing. The example schema uses link multiplicity (Multiple) to show all the data flowing to and from entities. If you want to change this setting, this is the time to do so! You are likely to use other settings in your own connectors. Live Formatting in Analyst's Notebook Live formatting in Analyst's Notebook is a type of conditional formatting that changes the appearance of chart items by applying specifications in real time. It allows analysts to format their charts to their own specifications. The default appearance of chart items is defined by your schema, but Live Formatting extends this to provide for filtering and quick, real-time insight. An example of this functionality in action with the example schema is with the Sex property of the Person entity. Live Formatting allows for quick, visual confirmation of whether a Person is a Male or a Female (pink for Male, blue for Female): To learn more about Live Formatting, including information regarding its setup, how to define a specification, and formatting system messages, you can visit the i2 product documentation . Saving the schema From the File menu, click Save Schema . Choose a location to save your schema. Save the schema as nypd-complaint-data-schema.xml and click Save . The schema and charting schemes will both be saved in your chose location as XML files. Now that you have defined your schema, you need to add a service ."
  },
  "guide/walkthrough/2-add-service.html": {
    "href": "guide/walkthrough/2-add-service.html",
    "title": "Adding a service",
    "keywords": "Adding a service In this task, you will replace the sample service and schema to align with the NYPD example. For the moment, the service returns some dummy data that you create to i2 Analyze. Later on, it will retrieve real data from the NYPD Complaint Dataset. Remember to consult the troubleshooting guide if you come across any issues. Create the NYPD schema Now that you've deployed i2 Analyze and created a connector with a template schema, you can update that schema to represent the data in the NYPD example. To replace the template schema, you will need to: Remove the schema.xml file from the src directory of your connector project. Create a new directory named schema inside the src directory. Copy nypd-complaint-data-schema.xml , the NYPD complaint schema that you created in Designing an i2 Analyze connector schema , to the new schema directory. Alternatively, you can copy the sample NYPD complaint schema from this repository. Import the NYPD schema into the connector project You have removed the old schema and replaced it with a new one, so you need to update the references to it as well. In index.ts , replace this import statement: import { schema } from './schema'; with: import { nypdcomplaintdataschema as schema } from './schema/nypd-complaint-data-schema'; In the same file, update startConnector() to use the new schema: startConnector({ schemas: { connector: schema }, hasPersistentResultIds: true, }); Update the service Still in index.ts , replace the basic service with the following NYPD getAll service, which you'll develop further in the next steps. addService( { id: 'getAll', name: 'NYPD Connector: Get all', description: 'A service that retrieves all data.', }, ({ result }) => { // TODO: Implement the service } ); Reload the connector configuration in i2 Analyze To make the new service available, you must reload the connector so that i2 Analyze picks up the configuration changes. Just like when you deployed the connector for the first time, you can use the Admin Console. Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors . If you are prompted to log in, enter Jenny and Jenny as the username and password. Click the Reload gateway button. Investigate in Analyst's Notebook You can see the consequences of your changes when you try to use the connector from the Analyst's Notebook desktop client. Open Analyst's Notebook and log in when prompted. Click the External Searches button in the ribbon. Find the query named NYPD Connector: Get all . Click Open to run the service. Note: Although the service exists, running it returns no data because that part of the implementation is still to come. Return some data To make the service return some data, you must add entity and link records to its result, using the methods of the IResult interface . Create a file named result-building.ts in the src folder of your connector. You'll add result-building functions to this file as you progress through the walkthrough. You can start with a function for creating links, which will require the following imports: import { services, records, schema as apiSchema } from '@i2analyze/i2connect'; Next, create an object to represent a source reference that will be set on all entities and links returned by the connector. Source references are useful to users, as they provide provenance information about the data they see. For example: const sourceReference = { name: 'NYPD Complaint Dataset', type: 'Open source data', description: 'A dataset containing all valid felony, misdemeanor, and violation crimes reported to the New York City Police Department (NYPD)', }; Add a function for creating links that wraps the addLink() method on the service result and also sets the source reference, as follows: export function addLink( linkType: apiSchema.ILinkType, id: string, fromEnd: records.IResultLinkRecordEnd, toEnd: records.IResultLinkRecordEnd, result: services.IResult ): void { const link = result.addLink(linkType, id, fromEnd, toEnd); link.setSourceReference(sourceReference); } You can now update the service in index.ts to create a Location and a Complaint entity using the schema entity types, as follows: const { Complaint, Location } = schema.entityTypes; const locationEntity = result.addEntity(Location, 'Location 1'); const complaintEntity = result.addEntity(Complaint, 'Complaint 1'); Then, create a link between the two entity records using the schema link types by importing the addLink() from result-building : import { addLink } from './result-building'; And adding the following to the service itself: const { Locatedat } = schema.linkTypes; addLink(Locatedat, 'Link 1', complaintEntity, locationEntity, result); The full NYPD Connector: Get all service should now look like this: addService( { id: 'getAll', name: 'NYPD Connector: Get all', description: 'A service that retrieves all data.', }, ({ result }) => { const { Complaint, Location } = schema.entityTypes; const locationEntity = result.addEntity(Location, 'Location 1'); const complaintEntity = result.addEntity(Complaint, 'Complaint 1'); const { Locatedat } = schema.linkTypes; addLink(Locatedat, 'Link 1', complaintEntity, locationEntity, result); } ); When the changes have been built, re-run the service from Analyst's Notebook, and you should see the data returned. Note: When the server is running in developer mode, it picks up any changes you make to the data that the service returns automatically, as soon as you save changes to the source files. You just need to re-run the service, rather than having to reload the i2 Connect gateway. Querying data from an external source Now that you have a basic connector with a working simple service, you can make it more useful by returning real data ."
  },
  "guide/walkthrough/3-connect-to-eds.html": {
    "href": "guide/walkthrough/3-connect-to-eds.html",
    "title": "Querying an external data source",
    "keywords": "Querying an external data source In this part of the walkthrough, you will connect to the NYPD Complaint Dataset as your external data source, and marshal the data into entities, links, and properties so that you can return results that can be displayed in Analyst's Notebook. Again, use the troubleshooting guide if you need to. Create an app token To connect to the NYPD dataset, you need an app token that allows you to make unlimited requests (within reason) to Socrata's API. If you don't use an app token, the APIs will throttle by IP address. Visit this link to sign in or create an account. Click your name at the top right to access My Profile . Click Edit Account Settings . In the side pane, click Developer Settings . At the bottom of the page, click Create New App Token . Specify your own \"Application Name\" and \"Description\", and save. If you leave the site, you can always retrieve the app token by logging into your account again. Access the data To start the process of accessing the data, create a file named data-service.ts alongside the index.ts file in the src folder. This new file will ultimately contain the code for making requests to the data source. Make the connector configurable To be able to access and query the NYPD Complaint Dataset, you need to configure your connector with settings for both the URL and the app token. In config/settings.json , the socrata_url , as follows: { \"socrata_url\": \"https://data.cityofnewyork.us/resource/7x9x-zpz6.json\" } Unlike the URL, the app token is a secret, and so you should access it from the environment. In this example, the environment variable will be named ENV_SOCRATA_TOKEN . Within the config/settings.json file we can add a setting named token and populate the value from the environment. We can also add a .env file at the root of the connector that will load the value into the Node.js environment when running the connector locally. Important: The .env should not be checked in or distributed as it will contain your own secret API token. For example, the config/settings.json file: { \"socrata_url\": \"https://data.cityofnewyork.us/resource/7x9x-zpz6.json\", \"token\": \"${env.ENV_SOCRATA_TOKEN}\" } And the .env file: ENV_SOCRATA_TOKEN=<YOUR TOKEN> You can also add a .env.sample file to the connector root that contains information and examples for other developers and deployers. Always use dummy data in this file. For example: # The token required by the connector to access the data source. # To generate a token, navigate to https://data.cityofnewyork.us/profile/app_tokens # Then, from \"Developer Settings\" run \"Create New App Token\" and follow the on-screen instructions. ENV_SOCRATA_TOKEN=abc123 Requests to the data source will require access to the configuration information. In data-service.ts , add an import to bring in the settings namespace from the @i2analyze/i2connect package and assign constants for the configuration values. import { settings } from '@i2analyze/i2connect'; const baseUrl = settings.getString('socrata_url', true); const token = settings.getString('token'); See the topic in the Further Materials section for more information about making a connector configurable . Model the data returned from the data source Next, you're going to create a TypeScript interface that models an individual complaint from the NYPD dataset. Some data sources might already have type definitions that you could use to model the data returned, so it's worth checking before creating your own! Add the following interface to data-service.ts . export interface IComplaint { /** Complaint number */ readonly cmplnt_num: string; /** Crime status */ readonly crm_atpt_cptd_cd: string; /** Jurisdiction code */ readonly jurisdiction_code: string; /** Offense classification code */ readonly ky_cd: string; /** Level of offense */ readonly law_cat_cd: string; /** Offense description */ readonly ofns_desc: string; /** Precinct code */ readonly addr_pct_cd: string; /** Borough name */ readonly boro_nm: string; /** Coordinates - latitude */ readonly latitude: string; /** Coordinates - longitude */ readonly longitude: string; /** Victim age group */ readonly vic_age_group: string; /** Victim race */ readonly vic_race: string; /** Victim sex */ readonly vic_sex: string; /** Suspect age group */ readonly susp_age_group: string; /** Suspect race */ readonly susp_race: string; /** Suspect sex */ readonly susp_sex: string; } Create a function to query the data source To make an HTTP request from your connector, this example uses an npm package called node-fetch (alternatives are available). You need to add the node-fetch package along with the @types/node-fetch type definitions to your connector. npm npm install node-fetch@2.6.7 npm install -D @types/node-fetch@2.5.12 yarn yarn add node-fetch yarn add -D @types/node-fetch You must then import the installed packages, along with the URL class, at the top of data-service.ts with the following code: import fetch from 'node-fetch'; import { URL } from 'url'; In the same file, add a function called requestData() that the connector services can use to query the NYPD data source. The inputs to this function will be the query parameters that for constructing the URL for the query, along with the variables that you defined for the token and baseUrl earlier. /** * Request some data from the NYPD dataset. * * @param queryParams - The request object that will be encoded into the query parameters. See https://dev.socrata.com/docs/queries/ for more details. */ export async function requestData(queryParams: Record<string, string>): Promise<IComplaint[]> { const url = new URL(baseUrl); for (const [key, value] of Object.entries(queryParams)) { url.searchParams.append(key, value); } // Append the token value if it exists. if (token) { url.searchParams.append('$$app_token', token); } const response = await fetch(url.href); if (response.status === 200) { return (await response.json()) as IComplaint[]; } else { throw new Error(response.statusText); } } Adapting the data Currently, the NYPD Connector: Get all service creates a Location entity, a Complaint entity, and a Locatedat link, using the specified schema. Now, you'll update the service to query the NYPD data source and adapt the returned data to align with that schema. First, add the following imports to your result-building.ts file: import { IComplaint } from './data-service'; import { nypdcomplaintdataschema as schema } from './schema/nypd-complaint-data-schema'; const { Complaint, Location, Person } = schema.entityTypes; Then, add the functions to adapt the data from the source data model to your schema types. The code below demonstrates the addition of a Location entity, given a Complaint. As part of adapting the data, you have to: Convert the addr_pct_cd property from a string to an integer, which is ultimately a number primitive type in JavaScript. This can be done using the parseInt function. Combine the longitude and latitude into a GeoJSON point (assuming that the longitude and latitude are in the WGS84 spatial reference system ) to set the Coordinates property on the Location entity. In doing so, the longitude and latitude need to be parsed as floats using the parseFloat function. Add the following to result-building.ts : export function addLocation(datum: IComplaint, result: services.IResult): records.IResultEntityRecord<typeof Location> { const locationId = `Borough: ${datum.boro_nm} Precinct: ${datum.addr_pct_cd}`; const entity = result.addEntity(Location, locationId); entity.setProperties({ 'Precinct Code': parseInt(datum.addr_pct_cd, 10), 'Borough Name': datum.boro_nm, Coordinates: { type: 'Point', coordinates: [parseFloat(datum.longitude), parseFloat(datum.latitude)], }, }); entity.setSourceReference(sourceReference); return entity; } Next, add three similar functions for creating Complaint, Suspect, and Victim entities: export function addComplaint( datum: IComplaint, result: services.IResult ): records.IResultEntityRecord<typeof Complaint> { const complaintId = `Complaint: ${datum.cmplnt_num}`; const entity = result.addEntity(Complaint, complaintId); entity.setProperties({ 'Complaint Number': datum.cmplnt_num, 'Crime Status': datum.crm_atpt_cptd_cd, 'Jurisdiction Code': parseInt(datum.jurisdiction_code, 10), 'Offence Classification Code': parseInt(datum.ky_cd, 10), 'Level Of Offence': datum.law_cat_cd, 'Offence Description': datum.ofns_desc, }); entity.setSourceReference(sourceReference); return entity; } export function addSuspect(datum: IComplaint, result: services.IResult): records.IResultEntityRecord<typeof Person> { const suspectId = `Suspect: ${datum.cmplnt_num}`; const entity = result.addEntity(Person, suspectId); entity.setProperties({ 'Age Group': datum.susp_age_group, Race: datum.susp_race, Sex: datum.susp_sex, }); entity.setSourceReference(sourceReference); return entity; } export function addVictim(datum: IComplaint, result: services.IResult): records.IResultEntityRecord<typeof Person> { const victimId = `Victim: ${datum.cmplnt_num}`; const entity = result.addEntity(Person, victimId); entity.setProperties({ 'Age Group': datum.vic_age_group, Race: datum.vic_race, Sex: datum.vic_sex, }); entity.setSourceReference(sourceReference); return entity; } Update the service to return real data Now you just need to wire everything together, so that your service returns the data that you retrieve from the NYPD data source. First, at the top of the src/index.ts file, add the following imports: import { addComplaint, addLocation, addSuspect, addVictim, addLink } from './result-building'; import { requestData } from './data-service'; Along with the schema link types: const { Locatedat, Suspectof, Victimof } = schema.linkTypes; In the service callback, you must first make a request to fetch data using requestData , and then loop through the complaints that you retrieve to build up the result set. For example, update the NYPD Connector: Get all service with the following: addService( { id: 'getAll', name: 'NYPD Connector: Get all', description: 'A service that retrieves all data.', }, async ({ result }) => { // The maximum number of rows returned from the NYPD complaint dataset const data = await requestData({ $limit: '100' }); for (const datum of data) { const locationEntity = addLocation(datum, result); const complaintEntity = addComplaint(datum, result); const suspectEntity = addSuspect(datum, result); const victimEntity = addVictim(datum, result); addLink(Locatedat, datum.cmplnt_num, complaintEntity, locationEntity, result); addLink(Victimof, datum.cmplnt_num, victimEntity, complaintEntity, result); addLink(Suspectof, datum.cmplnt_num, suspectEntity, complaintEntity, result); } } ); Note: You can query the data source using SoQL (Socrata Query Language), which supports a number of configuration parameters . When executing requestData , set a $limit parameter to restrict the number of records retrieved. It's good to keep this value small to reduce the response time of each request until you are more comfortable with SoQL. Reload the connector configuration in i2 Analyze To make the new service available, you must reload the connector so that i2 Analyze picks up the configuration changes. Just like when you deployed the connector for the first time, you can use the Admin Console. Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors . If you are prompted to log in, enter Jenny and Jenny as the username and password. Click the Reload gateway button. Investigate in Analyst's Notebook Now you can see what happens when you use the connector from the Analyst's Notebook desktop client. Open Analyst's Notebook and log in when prompted. Click the External Searches button in the ribbon. Find the query named NYPD Connector: Get all . Click Open to run the service, which now queries the data source and returns results. Next steps Next, you can configure your own parameterized search ."
  },
  "guide/walkthrough/4-parameterized-search.html": {
    "href": "guide/walkthrough/4-parameterized-search.html",
    "title": "Parameterized search",
    "keywords": "Parameterized search A parameterized search enables users to pass conditions in their requests that you can use to change the behavior of your searches. If you have any problems during this task, remember to consult the troubleshooting guide . Configuration To explore parameterized searching, you'll start by adding a new service to the connector. Add a new service Add another service to your index.ts file, and provide a form configuration . The form allows you to specify conditions through fields that are displayed to users in Analyst's Notebook, for example. addService( { id: 'findComplaint', name: 'NYPD Connector: Search', description: 'A service for conditional searches.', form: { borough: { label: 'Borough name', logicalType: 'selectedFromList', isMandatory: true, possibleValues: [], }, lawCategory: { label: 'Law category', logicalType: 'selectedFromList', isMandatory: true, possibleValues: [], }, }, }, () => { // TODO: Implement the service } ); Note: This form contains two mandatory fields, which means that users are forced to open it and provide values before they can run the service. If there are no mandatory fields but you still want users to see the form, you can use the formIsMandatory property to make the form itself mandatory. For more information, see Validation . Implementation With the service defined, you can implement it to search the NYPD data source using the form conditions. You need to: Parse the conditions to the acquire part of the service, defining both borough and lawCategory conditions. Use those conditions to query the NYPD data source. Filter the NYPD data source based on those conditions. You can use the condition fields to determine which of the entities retrieved from the data source match the parameters given by the user in the form. Create and return Complaint entities based on the matched conditions. For example: addService( { id: 'findComplaint', name: 'NYPD Connector: Search', description: 'A service for conditional searches.', form: { borough: { label: 'Borough name', logicalType: 'selectedFromList', isMandatory: true, possibleValues: [ { displayValue: 'Brooklyn', value: 'BROOKLYN' }, { displayValue: 'Bronx', value: 'BRONX' }, { displayValue: 'Manhattan', value: 'MANHATTAN' }, { displayValue: 'Queens', value: 'QUEENS' }, { displayValue: 'Staten Island', value: 'STATEN ISLAND' }, ], }, lawCategory: { label: 'Law category', logicalType: 'selectedFromList', isMandatory: true, possibleValues: [ { displayValue: 'Felony', value: 'FELONY' }, { displayValue: 'Misdemeanor', value: 'MISDEMEANOR' }, { displayValue: 'Violation', value: 'VIOLATION' }, ], }, }, }, async ({ conditions: { borough, lawCategory }, result }) => { const data = await requestData({ $limit: '50', $where: `boro_nm=\"${borough}\" AND law_cat_cd=\"${lawCategory}\"`, }); for (const datum of data) { addComplaint(datum, result); } } ); Reload the connector configuration in i2 Analyze To make the new service available, you must reload the connector so that i2 Analyze picks up the configuration changes. Just like when you deployed the connector for the first time, you can use the Admin Console. Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors . If you are prompted to log in, enter Jenny and Jenny as the username and password. Click the Reload gateway button. Investigate in Analyst's Notebook Now you can see what happens when you use the connector from the Analyst's Notebook desktop client. Open Analyst's Notebook and log in when prompted. Click the External Searches button in the ribbon bar. You should see the service named NYPD Connector: Search . Click Open to display the search form. Provide values for the two conditions, and then click Run to send the parameters to the service, which queries the data source and returns results. Next steps Now you can implement seeded searches ."
  },
  "guide/walkthrough/5-seeded-search.html": {
    "href": "guide/walkthrough/5-seeded-search.html",
    "title": "Seeded search",
    "keywords": "Seeded search A seeded search passes information from an entity on the chart to a service, so that you can use that information to drive your searches. In order to pass entities as seeds, users select them in Analyst's Notebook before they use External Searches . If you have any issues during this task, remember to consult the troubleshooting guide . Configuration To explore seeded searches, you'll start by adding two new services to the connector. Add new services The two new entries in the index.ts file both use the seedConstraints field , which defines the type and number of seed entities that the seeded search can use: addService( { id: 'findSimilarComplaint', name: 'NYPD Connector: Find like this complaint', description: 'A service that finds a similar complaint.', seedConstraints: { typeConstraints: [Complaint], min: 1, max: 1 }, }, () => { // TODO: Implement the service } ); addService( { id: 'expand', name: 'NYPD Connector: Expand', description: 'A service that executes an expand operation on a seed.', seedConstraints: { typeConstraints: [Complaint, Location], min: 1, max: 1 }, }, () => { // TODO: Implement the service } ); Implementation With the services defined, you can implement them to run seeded searches on the NYPD data source. In both cases, you need to: Parse the seeds to the acquire part of the service. Use the seeds to query the NYPD data source. Filter the NYPD data source based on the seeds. How you use the seeds depends on what you are trying to achieve. \"Find like this\" A \"find like this\" query looks at the property values of a selected record and searches for data in the source that has the same or similar property values. For this service, you need to find entities with property values that match some of the properties of the seed entity, which you access through seeds.entities[0] . Important: Do not return the entity that was passed as the seed. const { Complaint, Location } = schema.entityTypes; addService( { id: 'findSimilarComplaint', name: 'NYPD Connector: Find like this complaint', description: 'A service that finds a similar complaint.', seedConstraints: { typeConstraints: [Complaint], min: 1, max: 1 }, }, async ({ seeds, result }) => { const seed = seeds.entities[0]; const levelOfOffence = (seed.isType(Complaint) && seed.getProperty('Level Of Offence')) || ''; const data = await requestData({ $limit: '50', $where: `law_cat_cd=\"${levelOfOffence}\"`, }); for (const datum of data) { addComplaint(datum, result); } } ); \"Expand\" An \"expand\" query takes an entity as a seed and returns a list of entities and links that are connected to that seed. For this service, you need to query the NYPD data source to find entities that are related to the seed entity, and then fabricate link records that represent those relationships. Every link record that you create must have the seed record at one of its ends. addService( { id: 'expand', name: 'NYPD Connector: Expand', description: 'A service that executes an expand operation on a seed.', seedConstraints: { typeConstraints: [Complaint, Location], min: 1, max: 1 }, }, async ({ seeds, result }) => { const seed = seeds.entities[0]; const complaintNumber = (seed.isType(Complaint) && seed.getProperty('Complaint Number')) || ''; const boroughName = (seed.isType(Location) && seed.getProperty('Borough Name')) || ''; const precinctCode = (seed.isType(Location) && seed.getProperty('Precinct Code')) || ''; const query = seed.isType(Complaint) ? { $where: `cmplnt_num=\"${complaintNumber}\"` } : { $where: `boro_nm=\"${boroughName}\" AND addr_pct_cd=${precinctCode}` }; const data = await requestData({ $limit: '50', ...query, }); const seedEntity = seed.isType(Complaint) ? result.addEntityFromSeed(seed) : result.addEntityFromSeed(seed); for (const datum of data) { const complaintEntity = seed.isType(Complaint) ? seedEntity : addComplaint(datum, result); const locationEntity = seed.isType(Location) ? seedEntity : addLocation(datum, result); const suspectEntity = addSuspect(datum, result); const victimEntity = addVictim(datum, result); addLink(Locatedat, datum.cmplnt_num, complaintEntity, locationEntity, result); addLink(Victimof, datum.cmplnt_num, victimEntity, complaintEntity, result); addLink(Suspectof, datum.cmplnt_num, suspectEntity, complaintEntity, result); } } ); Reload the connector configuration in i2 Analyze To make the new service available, you must reload the connector so that i2 Analyze picks up the configuration changes. Just like when you deployed the connector for the first time, you can use the Admin Console. Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors . If you are prompted to log in, enter Jenny and Jenny as the username and password. Click the Reload gateway button. Investigate in Analyst's Notebook Now you can see what happens when you use the connector from the Analyst's Notebook desktop client. Open Analyst's Notebook and log in when prompted. Select an entity that you retrieved from the NYPD data source on the chart. Click the External Searches button in the ribbon. Find the queries named NYPD Connector: Find like this complaint and NYPD Connector: Expand . Click Open to run the services, which query the data source and return results. Next steps Next, you can combine what you've learned from the last two topics to implement seeded, parameterized searches ."
  },
  "guide/walkthrough/6-seeded-parameterized-search.html": {
    "href": "guide/walkthrough/6-seeded-parameterized-search.html",
    "title": "Seeded, parameterized search",
    "keywords": "Seeded, parameterized search A seeded, parameterized search is a combination of seeded and parameterized searches. This type of search passes information from an entity on the chart to the service, together with conditions that can change the behavior of your searches. If you have any issues during this task, remember to consult the troubleshooting guide . Configuration To explore seeded, parameterized searches, you'll start by adding another new service to the connector. Add a new service The new service in this example requires both a form setting and a seedConstraints setting. For more information, see the documentation for the IServiceConfig interface , or go over the last two steps of the walkthrough. For example: { addService( { id: 'expandWithConditions', name: 'NYPD Connector: Expand with conditions', description: 'A service that executes an expand operation on a seed, with conditions.', seedConstraints: { typeConstraints: [Complaint], min: 1, max: 1 }, form: { isPerson: { label: 'Person', logicalType: 'boolean' }, }, }, () => { // TODO: Implement the service } ); } Implementation With the service defined, you can implement it to search the NYPD data source. You need to: Parse the seeds to the acquire part of the service. Access the condition, and use it and the seeds to query the NYPD data source. Filter the NYPD data source based on the conditions and the seeds. How you use the seeds depends on what you are trying to achieve. Filter data based on conditions and seeds An \"expand with conditions\" query takes an entity as a seed and returns a list of entities and links that: are connected to the seed, and satisfy the list of conditions that the user provided. For this service, you need to query the NYPD data source to find entities that are related to the seed entity. Then, you filter those results according to the conditions . Finally, you fabricate link records that represent the relationships. Every link record that you create must have the seed record at one of its ends. addService( { id: 'expandWithConditions', name: 'NYPD Connector: Expand with conditions', description: 'A service that executes an expand operation on a seed, with conditions.', seedConstraints: { typeConstraints: [Complaint], min: 1, max: 1 }, form: { isPerson: { label: 'Person', logicalType: 'boolean' }, }, }, async ({ conditions: { isPerson }, seeds, result }) => { const seed = seeds.entities[0]; const complaintNumber = (seed.isType(Complaint) && seed.getProperty('Complaint Number')) || ''; const data = await requestData({ $limit: '50', $where: `cmplnt_num=\"${complaintNumber}\"`, }); const seedEntity = result.addEntityFromSeed(seed); for (const datum of data) { if (isPerson) { const suspectEntity = addSuspect(datum, result); const victimEntity = addVictim(datum, result); addLink(Suspectof, datum.cmplnt_num, suspectEntity, seedEntity, result); addLink(Victimof, datum.cmplnt_num, victimEntity, seedEntity, result); } const locationEntity = addLocation(datum, result); addLink(Locatedat, datum.cmplnt_num, seedEntity, locationEntity, result); } } ); Reload the connector configuration in i2 Analyze To make the new service available, you must reload the connector so that i2 Analyze picks up the configuration changes. Just like when you deployed the connector for the first time, you can use the Admin Console. Open a web browser and navigate to https://i2analyze.eia:9443/opal/admin#/connectors . If you are prompted to log in, enter Jenny and Jenny as the username and password. Click the Reload gateway button. Investigate in Analyst's Notebook Now you can see what happens when you use the connector from the Analyst's Notebook desktop client. Open Analyst's Notebook and log in when prompted. Select an entity that you retrieved from the NYPD data source on the chart. Click the External Searches button in the ribbon. Find the query named NYPD Connector: Expand with conditions . Click Open to display the search form. Set the condition, and then click Run to send the parameter to the service, which queries the data source and returns results. Next steps Now that you've completed this task, you can look into validating service requests ."
  },
  "guide/walkthrough/7-validation.html": {
    "href": "guide/walkthrough/7-validation.html",
    "title": "Validation",
    "keywords": "Validation In your service code, you can arrange for validation to take place on the client and at the gateway. Early validation improves the user's experience, and makes it more likely that client requests are in the correct form before you attempt to act on them. Consult the troubleshooting guide if you need it during this task. Client-side validation Validation on the client can perform simple checks on input data, in the hope of avoiding faulty requests to a service. For example, you can ensure the presence of values for mandatory fields, or verify that input values are in the correct format. Client-side validation is configured through service settings, in the same way as parameterized searches. For example, you can instruct a service to validate that the input values for the Offence field start with two letters and two digits, as follows: addService( { id: 'searchTerm', name: 'NYPD Connector: Search Term', description: 'A service for conditional searches.', form: { offence: { label: 'Offence', logicalType: 'singleLineString', isMandatory: true, validation: { regex: '[A-Za-z]{2}\\\\d{2}', message: 'Case number must start with two letters, then two digits', }, }, }, }, () => { // TODO: Implement acquire } ); The isMandatory field specifies whether a value is required, while the validation field allows regular expression validation to be performed, with custom error messages to be sent back to the client when a value does not comply with the rule. The documentation for the ICondition type contains more information about condition properties. Server-side validation Validation on the server can handle more complex requirements. For example, your form might have three input fields that are individually optional, but at least one of them must be set. In your service code, you can check that the user has set at least one condition in the request. As another example, if you have two date fields and want to support searching a range of dates, you can validate that the start date is before the end date. In your service code, you can implement the validation logic using the optional validate() function on the service callback, as described in the documentation for IServiceCallbacks . If you find a problem, you can throw a DetailedError from within validate() . The following is an illustration of the first example: addService( { id: 'findComplaintBy', name: 'NYPD Connector: Search By', description: 'A service for conditional searches.', formIsMandatory: true, form: { sourceId: { label: 'Source id', logicalType: 'multipleLineString', description: 'A service that has some validation', isMandatory: false, }, borough: { label: 'Borough name', logicalType: 'multipleLineString', isMandatory: false, }, lawCategory: { label: 'Law category', logicalType: 'multipleLineString', isMandatory: false, }, }, }, { acquire: () => { // TODO: Implement acquire }, validate: ({ conditions: { borough, lawCategory, sourceId } }) => { if (!borough && !lawCategory && !sourceId) { throw new DetailedError({ title: 'One of the conditions must be set.' }); } }, } ); In this code, the Boolean formIsMandatory property means that users must always open the form, even though it contains no individually mandatory conditions. The implementation of validate() then ensures that at least one of the conditions is set. Note: To use DetailedError , you must update the import from @i2analyze/i2connect to include it, as follows: import { startConnector, addService, DetailedError } from '@i2analyze/i2connect'; Handling errors If your service code encounters problems despite your efforts to validate requests, you can also handle errors within the acquire() function itself. For example, even though errors are handled by service calls, you might want to display your own, more descriptive error message to the user. In another case, you might want to throw an error if you call a third party system and it fails. You can set up a try-catch structure around the service call, and throw a DetailedError if required. The following code shows how you can update the NYPD Connector: Get all service to throw a DetailedError : addService( { id: 'getAll', name: 'NYPD Connector: Get all', description: 'A service that retrieves all data.', }, async ({ result }) => { const brokenUrl = 'This is a broken URL'; let data: IComplaint[] = []; try { const response = await fetch(brokenUrl); if (response.status === 200) { data = (await response.json()) as IComplaint[]; } } catch { throw new DetailedError({ title: 'Failed to connect to the NYPD data source.' }); } for (const datum of data) { const locationEntity = addLocation(datum, result); const complaintEntity = addComplaint(datum, result); const suspectEntity = addSuspect(datum, result); const victimEntity = addVictim(datum, result); addLink(Locatedat, datum.cmplnt_num, complaintEntity, locationEntity, result); addLink(Victimof, datum.cmplnt_num, victimEntity, complaintEntity, result); addLink(Suspectof, datum.cmplnt_num, suspectEntity, complaintEntity, result); } } ); Note: To run this code, you also need to update the imports in index.ts , as follows: import fetch from 'node-fetch'; import { requestData, IComplaint } from './data-service'; As a result of a DetailedError , the user sees the title or the detail if only one is present, or a composition in the form ${title}: ${detail} when both are present. Next steps You're now ready to package and distribute your connector."
  },
  "guide/walkthrough/8-packaging-and-distribution.html": {
    "href": "guide/walkthrough/8-packaging-and-distribution.html",
    "title": "Packaging and distribution",
    "keywords": "Packaging and distribution With the connector complete, you need to package it up, deploy it to a location where i2 Analyze can find it, and test that it still works correctly. Packaging the connector To package the connector for distribution: Open a terminal window at the root of the connector project directory. Run the following commands: npm run build npm pack The commands create a file named my-connector-0.1.0.tgz that you will use during deployment. Deploying the connector using analyze-containers To deploy the packed connector, run through the instructions starting here . After deployment, test that the connector behaves as expected, as described here ."
  },
  "guide/walkthrough/index.html": {
    "href": "guide/walkthrough/index.html",
    "title": "Worked example",
    "keywords": "Worked example This part of the SDK documentation demonstrates the process of setting a up a development environment and creating a connector through a worked example. Prerequisites This guide is designed as a continuation of Getting Started , so be sure to have completed that topic before you continue. Developing a connector The procedure for understanding, deploying, and configuring both i2 Analyze and the example connector is divided into the following sections: Designing an i2 Analyze connector schema Adding a service Querying an external data source Implementing parameterized searches Implementing seeded searches Implementing seeded, parameterized searches Validating requests Packaging and distribution System requirements The example requires the following tools and technologies: i2 Analyze 4.4.4 : The server that hosts the i2 Connect gateway. i2 Analyst's Notebook 10.0.2 : The client that provides the user interface for interacting with your connector. The client displays the resulting entity and link records with their properties. i2 Analyze Schema Designer : The tool that enables you to design and create your i2 Analyze schema. During installation of Analyst's Notebook, ensure that you also install Schema Designer. Microsoft Visual Studio Code : The recommended IDE for developing your connector. You can use any IDE you like, but the Visual Studio Code Spring Boot Dashboard plugin can handle running and redeploying the connector for you. Download it here . Node.js Express : The connector is written with in Node with Express, which is a lightweight web application framework."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome",
    "keywords": "Welcome Welcome to the documentation for the i2 Connect Node SDK. At this version of the SDK, the documentation includes information on how to start developing and deploying connectors, alongside the sample projects and the API reference. To view the API documentation for the connector server, use the Server API tab at the top of the page. You can get started with the sample projects from the main branch of this repository. Compatibility Each new version of the i2 Connect Node SDK adds features and functionality. The following table shows the relationship between a version of the SDK and the version of i2 Analyze in which its new features are available: <!-- Be sure to update the i2connect/README.md file's version of this compatibility table when you change this one --> i2 Connect Node SDK version i2 Analyze version 1.1 and earlier 4.3.4.0 1.2 4.3.5.0 2.0 4.3.5.3 2.1 4.4.0.0 2.2 4.4.1.0 2.3 4.4.2.0 Note: This documentation applies to version 2.x of the SDK. You can read documentation for version 1.x of the SDK here . Unless features are deprecated, connectors created using earlier versions of the SDK are compatible with later versions of i2 Analyze. For the best experience, keep the version of the SDK that you use for development in step with the version of the target i2 Analyze deployment. Support policy i2's policy for supporting releases of the SDK is as follows: We add new functionality only to the current major version of the SDK. On releasing a new major version, we support the previous major version for a minimum of 12 months. We consider fixes to unsupported major versions (such as updating a vulnerable dependency) on a case-by-case basis. To deprecate something in the API, we mark it as @deprecated and provide instructions on the alternative to use. We remove deprecated APIs when we release the next major version of the SDK."
  }
}